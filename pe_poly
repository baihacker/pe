#ifndef PE_POLY_
#define PE_POLY_

#include "pe_base"
#include "pe_int128"
#include "pe_mod"
#include "pe_type_traits"
#include "pe_nt"
#include "pe_poly_base"

struct NModPoly {
  int64 mod;
  std::vector<int64> data;

  NModPoly(int64 mod = 1) : mod(mod) {}

  NModPoly(const std::vector<int64>& data, int64 mod,
           int adjust_leading_zero = 1)
      : data(data), mod(mod) {
    AdjustMod();
    if (adjust_leading_zero) {
      AdjustLeadingZeros();
    }
  }

  NModPoly(std::vector<int64>&& data, int64 mod, int adjust_leading_zero = 1)
      : data(std::move(data)), mod(mod) {
    AdjustMod();
    if (adjust_leading_zero) {
      AdjustLeadingZeros();
    }
  }

  NModPoly& operator=(const vector<int64>& v) {
    data = v;
    return *this;
  }

  NModPoly& operator=(const vector<int64>&& v) {
    data = v;
    return *this;
  }

  NModPoly(const NModPoly& p) = default;
  NModPoly(NModPoly&& p) = default;
  NModPoly& operator=(const NModPoly& other) = default;
  NModPoly& operator=(NModPoly&& other) = default;

  NModPoly& AdjustLeadingZeros() {
    AdjustPolyLeadingZero(data);
    return *this;
  }

  NModPoly& AdjustMod() {
    for (auto& iter : data) {
      iter = RegulateMod(iter, mod);
    }
    return *this;
  }

  int64 deg() const { return static_cast<int64>(data.size() - 1); }
  int64 size() const { return static_cast<int64>(data.size()); }

  NModPoly& Resize(int64 n) {
    const auto m = static_cast<int64>(data.size());
    data.resize(n);
    for (int64 i = m; i < n; ++i) {
      data[i] = 0;
    }
    return *this;
  }

  NModPoly& Redeg(int64 n) { return Resize(n + 1); }

  int64& operator[](int64 idx) {
    PE_ASSERT(idx >= 0 && idx < static_cast<int64>(data.size()));
    return data[idx];
  }

  int64 operator[](int64 idx) const {
    PE_ASSERT(idx >= 0 && idx < static_cast<int64>(data.size()));
    return data[idx];
  }

  int64 At(int64 idx) const {
    return idx >= 0 && idx < static_cast<int64>(data.size()) ? data[idx] : 0;
  }

  bool IsZero() const { return data.size() == 1 && data[0] == 0; }

  int64 ValueAt(int64 v) const {
    int64 ret = 0;
    const int64 t = RegulateMod(v, mod);
    for (int64 i = deg(); i >= 0; --i) {
      ret = AddMod(MulModEx(ret, t, mod), data[i], mod);
    }
    return ret;
  }

  NModPoly LowerTerms(int64 n, int adjust_leading_zero = 1) const {
    const int64 m = min(n, static_cast<int64>(data.size()));
    return NModPoly(std::vector<int64>(data.begin(), data.begin() + m), mod,
                    adjust_leading_zero);
  }

  NModPoly Inv(int64 n) const;
};

template <int64 M>
struct NModPolyT : public NModPoly {
  NModPolyT() : NModPoly(M) {}

  NModPolyT(const std::vector<int64>& data) : NModPoly(data, M) {}

  NModPolyT(std::vector<int64>&& data) : NModPoly(std::move(data), M) {}

  NModPolyT(std::initializer_list<int64> l)
      : NModPolyT(std::vector<int64>(l)) {}
};

SL NModPoly PolyMul(const NModPoly& X, const NModPoly& Y) {
  return NModPoly{PolyMul(X.data, Y.data, X.mod), X.mod};
}

SL NModPoly PolyInv(const NModPoly& x, int64 n) {
  // It is assumed that mod is a prime
  return NModPoly(PolyInv(x.data, n, x.mod), x.mod);
}

SL tuple<NModPoly, NModPoly> PolyDivAndMod(const NModPoly& x,
                                           const NModPoly& y) {
  vector<int64> q, r;
  tie(q, r) = PolyDivAndMod(x.data, y.data, x.mod);
  return make_tuple(NModPoly(std::move(q), x.mod),
                    NModPoly(std::move(r), x.mod));
}

#define PPOLY_DIV_AND_MOD_IMPL(PolyDivAndMod, PolyDivAndModInternal) \
  SL tuple<NModPoly, NModPoly> PolyDivAndMod(const NModPoly& X,      \
                                             const NModPoly& Y) {    \
    vector<int64> q, r;                                              \
    tie(q, r) = PolyDivAndMod(X.data, Y.data, X.mod);                \
    return make_tuple(NModPoly(std::move(q), X.mod),                 \
                      NModPoly(std::move(r), X.mod));                \
  }

#define PPOLY_DIV_IMPL(PolyDiv, PolyDivAndMod)                \
  SL NModPoly PolyDiv(const NModPoly& X, const NModPoly& Y) { \
    return NModPoly(PolyDiv(X.data, Y.data, X.mod), X.mod);   \
  }

#define PPOLY_MOD_IMPL(PolyMod, PolyDivAndMod)                \
  SL NModPoly PolyMod(const NModPoly& X, const NModPoly& Y) { \
    return NModPoly(PolyMod(X.data, Y.data, X.mod), X.mod);   \
  }

PPOLY_DIV_AND_MOD_IMPL(PolyDivAndModDc, PolyDivAndModDcInternal)
PPOLY_DIV_IMPL(PolyDivDc, PolyDivAndModDc)
PPOLY_MOD_IMPL(PolyModDc, PolyDivAndModDc)

PPOLY_DIV_AND_MOD_IMPL(PolyDivAndModNormal, PolyDivAndModNormalInternal)
PPOLY_DIV_IMPL(PolyDivNormal, PolyDivAndModNormal)
PPOLY_MOD_IMPL(PolyModNormal, PolyDivAndModNormal)

PPOLY_DIV_IMPL(PolyDiv, PolyDivAndMod)
PPOLY_MOD_IMPL(PolyMod, PolyDivAndMod)

inline NModPoly NModPoly::Inv(int64 n) const {
  // It is assumed that mod is a prime
  auto t = PolyInv(data, n, mod);
  return NModPoly(std::vector<int64>(static_cast<int64*>(&t[0]),
                                     static_cast<int64*>(&t[0]) + t.size()),
                  mod);
}

NModPoly operator<<(const NModPoly& p, int64 m) {
  if (m == 0) {
    return p;
  }
  std::vector<int64> new_data(p.data.size() + m);
  for (int64 i = static_cast<int64>(p.data.size()) + m - 1; i >= m; --i) {
    new_data[i] = p.data[i - m];
  }
  for (int64 i = 0; i < m; ++i) {
    new_data[i] = 0;
  }
  return NModPoly(std::move(new_data), p.mod);
}

NModPoly operator>>(const NModPoly& p, int64 m) {
  if (m == 0) {
    return p;
  }
  if (m >= p.size()) {
    return NModPoly{vector<int64>{0}, p.mod};
  }
  const int64 new_size = p.size() - m;
  std::vector<int64> new_data(new_size);
  for (int i = 0; i < new_size; ++i) {
    new_data[i] = p.data[i + m];
  }
  return NModPoly(std::move(new_data), p.mod);
}

SL NModPoly operator-(const NModPoly& x, const NModPoly& y) {
  return NModPoly(PolySub(x.data, y.data, x.mod), x.mod).AdjustLeadingZeros();
}

SL NModPoly operator+(const NModPoly& x, const NModPoly& y) {
  return NModPoly(PolyAdd(x.data, y.data, x.mod), x.mod).AdjustLeadingZeros();
}

SL NModPoly operator*(const NModPoly& x, int64 v) {
  std::vector<int64> data(x.data);
  for (auto& iter : data) {
    iter = iter * v % x.mod;
  }
  return NModPoly(std::move(data), x.mod);
}

SL NModPoly operator*(int64 v, const NModPoly& x) { return x * v; }

SL NModPoly operator*(const NModPoly& x, const NModPoly& y) {
  return PolyMul(x, y);
}

SL NModPoly operator/(const NModPoly& x, const NModPoly& y) {
  return PolyDiv(x, y);
}

SL NModPoly operator%(const NModPoly& x, const NModPoly& y) {
  return PolyMod(x, y);
}

SL int operator==(const NModPoly& x, const NModPoly& y) {
  return x.mod == y.mod && x.data == y.data;
}

// x^n % mod
SL NModPoly operator%(int64 n, const NModPoly& mod) {
  NModPoly x{{0, 1}, mod.mod};
  NModPoly ret{{1}, mod.mod};
  for (; n > 0; n >>= 1) {
    if (n & 1) {
      ret = PolyMod(x * ret, mod);
    }
    if (n > 1) {
      x = PolyMod(x * x, mod);
    }
  }
  return ret;
}

SL ostream& operator<<(ostream& o, const NModPoly& p) {
  const auto n = static_cast<int64>(p.data.size());
  for (int64 i = 0; i < n - 1; ++i) {
    o << p.data[i] << ", ";
  }
  return o << p.data[n - 1];
}

#endif
