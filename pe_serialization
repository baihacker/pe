#ifndef PE_SERIALIZATION_
#define PE_SERIALIZATION_

#include "pe_base"
#include "pe_int"

namespace pe {
template <typename T, typename = void>
struct has_as_tuple : std::false_type {};

template <typename T>
struct has_as_tuple<T, std::void_t<decltype(std::declval<T>().AsTuple())>>
    : std::true_type {};

template <typename T>
constexpr bool has_as_tuple_v = has_as_tuple<T>::value;

template <typename T>
constexpr bool can_copy_by_byte_v =
    !has_as_tuple_v<T> && std::is_trivially_copyable_v<T> &&
    std::is_default_constructible_v<T>;

template <typename T>
SL REQUIRES((can_copy_by_byte_v<T> && sizeof(T) == 4))
    RETURN(std::vector<int64>) SerializeObject(const T &value) {
  return {static_cast<int64>(*reinterpret_cast<const uint32 *>(&value))};
}

template <typename T>
SL REQUIRES((can_copy_by_byte_v<T> && sizeof(T) == 8))
    RETURN(std::vector<int64>) SerializeObject(const T &value) {
  return {*reinterpret_cast<const int64 *>(&value)};
}

template <typename T>
SL REQUIRES((can_copy_by_byte_v<T> && sizeof(T) >= 16 && sizeof(T) % 8 == 0))
    RETURN(std::vector<int64>) SerializeObject(const T &value) {
  const int64 *ptr = reinterpret_cast<const int64 *>(&value);
  return std::vector<int64>(ptr, ptr + sizeof(T) / 8);
}

std::vector<int64> SerializeObject(const std::string &value) {
  std::vector<int64> ret;
  ret.push_back(value.size());
  for (auto iter : value) {
    ret.push_back(iter);
  }
  return ret;
}

template <typename T>
std::vector<int64> SerializeObject(const std::vector<T> &value);

template <typename T>
std::vector<int64> SerializeObject(const std::set<T> &value);

template <typename T>
std::vector<int64> SerializeObject(const std::unordered_set<T> &value);

template <typename K, typename V>
std::vector<int64> SerializeObject(const std::map<K, V> &value);

template <typename K, typename V>
std::vector<int64> SerializeObject(const std::unordered_map<K, V> &value);

template <typename U, typename V>
std::vector<int64> SerializeObject(const std::pair<U, V> &value);

template <typename U, typename V>
std::vector<int64> SerializeObject(const std::pair<U, V> &value) {
  std::vector<int64> ret;
  for (int64 t : SerializeObject(value.first)) {
    ret.push_back(t);
  }
  for (int64 t : SerializeObject(value.second)) {
    ret.push_back(t);
  }
  return ret;
}

template <typename T>
std::vector<int64> SerializeVectorLike(const T &vector_like) {
  std::vector<int64> ret;
  ret.push_back(vector_like.size());
  for (const auto &iter : vector_like) {
    for (int64 t : SerializeObject(iter)) {
      ret.push_back(t);
    }
  }
  return ret;
}

template <typename T>
std::vector<int64> SerializeObject(const std::vector<T> &value) {
  return SerializeVectorLike(value);
}

template <typename T>
std::vector<int64> SerializeObject(const std::set<T> &value) {
  return SerializeVectorLike(value);
}

template <typename T>
std::vector<int64> SerializeObject(const std::unordered_set<T> &value) {
  return SerializeVectorLike(value);
}

template <typename T>
std::vector<int64> SerializeMapLike(const T &map_like) {
  std::vector<int64> ret;
  ret.push_back(map_like.size());
  for (const auto &iter : map_like) {
    for (int64 t : SerializeObject(iter.first)) {
      ret.push_back(t);
    }
    for (int64 t : SerializeObject(iter.second)) {
      ret.push_back(t);
    }
  }
  return ret;
}

template <typename K, typename V>
std::vector<int64> SerializeObject(const std::map<K, V> &value) {
  return SerializeMapLike(value);
}

template <typename K, typename V>
std::vector<int64> SerializeObject(const std::unordered_map<K, V> &value) {
  return SerializeMapLike(value);
}

namespace internal {
template <typename... T>
std::vector<int64> SerializeObjectImpl(std::tuple<T...> &&obj) {
  std::vector<int64> ret;
  const int field_count = std::tuple_size_v<std::tuple<T...>>;
  ret.push_back(field_count);

  const auto append_elements = [](const std::vector<int64> &src,
                                  std::vector<int64> &target) {
    for (const int64 iter : src) {
      target.push_back(iter);
    }
  };
  std::apply(
      [&](T &&...field) {
        ((append_elements(pe::SerializeObject(field), ret)), ...);
      },
      obj);
  return ret;
}
}  // namespace internal

template <typename T>
SL REQUIRES((has_as_tuple_v<T>)) RETURN(std::vector<int64>)
    SerializeObject(const T &value) {
  return internal::SerializeObjectImpl(value.AsTuple());
}

template <typename T>
SL REQUIRES((can_copy_by_byte_v<T> && sizeof(T) == 4)) RETURN(void)
    DeserializeObject(const std::vector<int64> &src, int64 &idx, T &value) {
  const int64 size = src.size();
  if (idx >= size) {
    std::cerr << "Invalid index (sizeof(T) == 4), idx = " << idx
              << ", size = " << size << std::endl;
    exit(-1);
  }
  uint32 t = static_cast<uint32>(src[idx]);
  value = *reinterpret_cast<const T *>(&t);
  idx = idx + 1;
}

template <typename T>
SL REQUIRES((can_copy_by_byte_v<T> && sizeof(T) == 8)) RETURN(void)
    DeserializeObject(const std::vector<int64> &src, int64 &idx, T &value) {
  const int64 size = src.size();
  if (idx >= size) {
    std::cerr << "Invalid index (sizeof(T) == 8), idx = " << idx
              << ", size = " << size << std::endl;
    exit(-1);
  }
  value = *reinterpret_cast<const T *>(&src[idx]);
  idx = idx + 1;
}

template <typename T>
SL REQUIRES((can_copy_by_byte_v<T> && sizeof(T) >= 16 && sizeof(T) % 8 == 0))
    RETURN(void)
        DeserializeObject(const std::vector<int64> &src, int64 &idx, T &value) {
  const int size = static_cast<int>(src.size());
  if (idx >= size) {
    std::cerr << "Invalid index, idx = " << idx << ", size = " << size
              << std::endl;
    exit(-1);
  }
  const int64 length = sizeof(T) / 8;
  if (idx + length - 1 >= size) {
    std::cerr << "Insufficient data (sizeof(T) >= 16), idx = " << idx
              << ", length = " << length << ", size = " << size << std::endl;
    exit(-1);
  }

  int64 *ptr = reinterpret_cast<int64 *>(&value);
  for (int64 i = 0; i < length; ++i) {
    ptr[i] = src[idx + i];
  }

  idx = idx + length;
}

void DeserializeObject(const std::vector<int64> &src, int64 &idx,
                       std::string &value) {
  const int64 size = src.size();
  if (idx >= size) {
    std::cerr << "Invalid index, idx = " << idx << ", size = " << size
              << std::endl;
    exit(-1);
  }
  const int64 length = src[idx];
  if (idx + length >= size) {
    std::cerr << "Insufficient data (string), idx = " << idx
              << ", length = " << length << ", size = " << size << std::endl;
    exit(-1);
  }
  for (int64 i = idx + 1; i <= idx + length; ++i) {
    value += char(src[i]);
  }
  idx = idx + length + 1;
}

template <typename T>
void DeserializeObject(const std::vector<int64> &src, int64 &idx,
                       std::vector<T> &value);

template <typename T>
void DeserializeObject(const std::vector<int64> &src, int64 &idx,
                       std::set<T> &value);

template <typename T>
void DeserializeObject(const std::vector<int64> &src, int64 &idx,
                       std::unordered_set<T> &value);

template <typename K, typename V>
void DeserializeObject(const std::vector<int64> &src, int64 &idx,
                       std::map<K, V> &value);

template <typename K, typename V>
void DeserializeObject(const std::vector<int64> &src, int64 &idx,
                       std::unordered_map<K, V> &value);

template <typename U, typename V>
void DeserializeObject(const std::vector<int64> &src, int64 &idx,
                       std::pair<U, V> &value) {
  const int64 size = src.size();
  if (idx >= size) {
    std::cerr << "Invalid index, idx = " << idx << ", size = " << size
              << std::endl;
    exit(-1);
  }

  DeserializeObject(src, idx, value.first);
  DeserializeObject(src, idx, value.second);
}

template <typename T, typename C>
void DeserializeVectorLike(const std::vector<int64> &src, int64 &idx,
                           C &value) {
  const int64 size = src.size();
  if (idx >= size) {
    std::cerr << "Invalid index, idx = " << idx << ", size = " << size
              << std::endl;
    exit(-1);
  }

  const int64 length = src[idx];

  ++idx;

  for (int64 parsed = 0; parsed < length; ++parsed) {
    T t;
    DeserializeObject(src, idx, t);
    *std::inserter(value, value.end()) = std::move(t);
  }
}

template <typename T>
void DeserializeObject(const std::vector<int64> &src, int64 &idx,
                       std::vector<T> &value) {
  DeserializeVectorLike<T>(src, idx, value);
}

template <typename T>
void DeserializeObject(const std::vector<int64> &src, int64 &idx,
                       std::set<T> &value) {
  DeserializeVectorLike<T>(src, idx, value);
}

template <typename T>
void DeserializeObject(const std::vector<int64> &src, int64 &idx,
                       std::unordered_set<T> &value) {
  DeserializeVectorLike<T>(src, idx, value);
}

template <typename K, typename V, typename T>
void DeserializeMapLike(const std::vector<int64> &src, int64 &idx, T &value) {
  const int64 size = src.size();
  if (idx >= size) {
    std::cerr << "Invalid index, idx = " << idx << ", size = " << size
              << std::endl;
    exit(-1);
  }

  const int64 length = src[idx];

  ++idx;

  for (int64 parsed = 0; parsed < length; ++parsed) {
    K k;
    DeserializeObject(src, idx, k);
    V v;
    DeserializeObject(src, idx, v);
    value[k] = std::move(v);
  }
}

template <typename K, typename V>
void DeserializeObject(const std::vector<int64> &src, int64 &idx,
                       std::map<K, V> &value) {
  DeserializeMapLike<K, V>(src, idx, value);
}

template <typename K, typename V>
void DeserializeObject(const std::vector<int64> &src, int64 &idx,
                       std::unordered_map<K, V> &value) {
  DeserializeMapLike<K, V>(src, idx, value);
}

namespace internal {
template <typename... T>
void DeserializeObjectImpl(const std::vector<int64> &source, int64 &idx,
                           std::tuple<T...> &&obj) {
  const int field_count = std::tuple_size_v<std::tuple<T...>>;
  const int size = source.size();
  if (idx >= size) {
    std::cerr << "Invalid index, idx = " << idx << ", size = " << size
              << std::endl;
    exit(-1);
  }
  int64 source_cnt = source[idx];
  if (field_count != source_cnt) {
    std::cerr << "Wrong field count, expected " << field_count
              << ", actual = " << source_cnt << std::endl;
    exit(-1);
  }
  ++idx;

  std::apply(
      [&](T &&...field) { ((pe::DeserializeObject(source, idx, field)), ...); },
      obj);
}
}  // namespace internal

template <typename T>
SL REQUIRES((has_as_tuple_v<T>)) RETURN(void)
    DeserializeObject(const std::vector<int64> &source, int64 &idx, T &value) {
  internal::DeserializeObjectImpl(source, idx, value.AsTuple());
}

template <typename OT>
OT DeserializeObject(const std::vector<int64> &source, int64 &idx) {
  OT obj;
  DeserializeObject<OT>(source, idx, obj);
  return obj;
}

template <typename OT>
OT DeserializeObject(const std::vector<int64> &source) {
  int64 idx = 0;
  return DeserializeObject<OT>(source, idx);
}

#define DECLARE_SERIALIZATION(...)                              \
  auto AsTuple() { return std::forward_as_tuple(__VA_ARGS__); } \
  auto AsTuple() const { return std::forward_as_tuple(__VA_ARGS__); }

}  // namespace pe

#endif