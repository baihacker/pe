#ifndef PE_BI32_
#define PE_BI32_

#include "pe_base"
#include "pe_int128"
#include "pe_type_traits"
#include "pe_nt"
#include "pe_fraction"
#include "pe_poly_base"
#include "pe_gbi"

namespace pe {
namespace pe_internal {
static const struct alloc_mem {
} alloc_mem_tag;

static const struct zero_initialize {
} zero_initialize_tag;

// Predefined allocator
struct BiAllocatorStd {
  static unsigned int* Allocate(int& length) {
    length = ((length + 3) >> 2) << 2;
    return new unsigned int[length];
  }
  static void Deallocate(unsigned int* data) { delete[] data; }
};

template <int SIZE>
struct BiAllocatorFixedSizeImpl {
  std::vector<unsigned int*> available;
  int top;

  BiAllocatorFixedSizeImpl() { top = 0; }

  unsigned int* Allocate(int& length) {
    if (length > SIZE) {
      dbg(length);
    }
    PE_ASSERT(length <= SIZE);
    length = SIZE;
    if (top == available.size()) {
      available.push_back(new unsigned int[SIZE]);
    }
    return available[top++];
  }

  void Deallocate(unsigned int* ptr) { available[--top] = ptr; }
};

static BiAllocatorFixedSizeImpl<1 << 16> allocator_16;
static BiAllocatorFixedSizeImpl<1 << 20> allocator_20;

static auto& allocator_impl = allocator_16;

struct BiAllocatorFixedSize {
  static unsigned int* Allocate(int& length) {
    return allocator_impl.Allocate(length);
  }
  static void Deallocate(unsigned int* data) {
    allocator_impl.Deallocate(data);
  }
};
}  // namespace pe_internal

// Configuration of BigInteger.
using BiAllocator = pe_internal::BiAllocatorStd;

// Class layout principle:
// Idealy, if a method A uses method B, B should be declared before A.

// Class layout:
// Usefule constants
// Utility function for constructors
// Constructor and operator=
// Internal constructors
// Implementation internals
// Normal methods
// Integer concept methods
// Unary operators
// Self operators
// Friend binary operators
// Member fields
class BigInteger {
 public:
  static constexpr unsigned int max_32bit_value = 0xFFFFFFFF;
  static constexpr uint64 bit32_value = 1ULL << 32;
  static constexpr unsigned int output_mod = 1000000000;
  static constexpr unsigned int output_mod_dig = 9;

  static constexpr unsigned int div32_bit = 5;
  static constexpr unsigned int mod32_mask = 31;

 private:
  template <typename T>
  REQUIRES((is_native_integer<T>::value && pe_is_unsigned<T>::value))
  RETURN(void) FromNativeInt(T value) {
    if (value == 0) {
      Reserve(1);
      data_[0] = 0;
      sign_ = 0;
      return;
    }

    if (sizeof(T) <= 8) {
      SetNativeUInt64(value);
    } else {
      int need = 0;
      for (auto t = value; t > 0; ++need) {
#if defined(COMPILER_MSVC) || defined(COMPILER_CLANG)
        t >>= 16;
        t >>= 16;
#else
        t >>= 32;
#endif
      }
      Reserve(need);

      pos_ = -1;
      for (auto t = value; t > 0;) {
        data_[++pos_] = t & BigInteger::max_32bit_value;
#if defined(COMPILER_MSVC) || defined(COMPILER_CLANG)
        t >>= 16;
        t >>= 16;
#else
        t >>= 32;
#endif
      }
    }
    sign_ = 1;
  }

  template <typename T>
  REQUIRES((is_native_integer<T>::value && pe_is_signed<T>::value))
  RETURN(void) FromNativeInt(T value) {
    if (value == 0) {
      Reserve(1);
      data_[0] = 0;
      sign_ = 0;
      return;
    }

    using unsignedT = typename pe_make_unsigned<T>::type;
    if (value > 0) {
      FromNativeInt<unsignedT>(static_cast<unsignedT>(value));
    } else {
      // Note: it works for value = T::min()
      FromNativeInt<unsignedT>(static_cast<unsignedT>(-value));
      sign_ = -1;
    }
  }

  void Reserve(int new_size) {
    PE_ASSERT(new_size > 0);
    unsigned int* old_data = nullptr;
    if (data_) {
      if (new_size > buffer_length_) {
        old_data = data_;
      } else {
        return;
      }
    }

    data_ = BiAllocator::Allocate(new_size);
    if (old_data != nullptr) {
      // copy used data only.
      std::copy(old_data, old_data + pos_ + 1, data_);
      BiAllocator::Deallocate(old_data);
    }
    buffer_length_ = new_size;
  }

  void FixPos() const {
    while (pos_ > 0 && data_[pos_] == 0) --pos_;
    if (pos_ == 0 && data_[0] == 0) sign_ = 0;
  }

  template <typename T>
  static void FixSize(std::vector<T>& v) {
    if (v.empty()) v.push_back(0);
    int now = static_cast<int>(v.size()) - 1;
    while (now > 0 && v[now] == 0) --now;
    v.resize(now + 1);
  }

 public:
  // constructors, destructors, value semantics.
  BigInteger() : BigInteger(pe_internal::zero_initialize_tag) {
    Reserve(1);
    data_[0] = 0;
    sign_ = 0;
  }

  BigInteger(const std::string& str)
      : BigInteger(pe_internal::zero_initialize_tag) {
    const int n = static_cast<int>(str.size());
    if (n == 0) {
      Reserve(1);
      data_[0] = 0;
      sign_ = 0;
      return;
    }
    std::vector<unsigned int> value(n);
    for (int i = 0, j = n - 1; i < n; ++i, --j) {
      value[j] = str[i] - '0';
    }

    int now = n - 1;
    while (now > 0 && value[now] == 0) --now;

    std::vector<unsigned int> result;
    do {
      uint64 add = 0;
      for (int i = now; i > 0; --i) {
        const uint64 x = add + value[i];
        const uint64 next_add = (x & max_32bit_value) * 10;
        value[i] = x >> 32;
        add = next_add;
      }
      uint64 x = add + value[0];
      value[0] = x >> 32;
      result.push_back(x & max_32bit_value);
      while (now > 0 && value[now] == 0) --now;
    } while (now > 0 || value[now] > 0);

    Reserve(static_cast<int>(result.size()));

    sign_ = 1;
    pos_ = std::max<int>(0, static_cast<int>(result.size()) - 1);
    std::copy(result.begin(), result.end(), data_);
    FixPos();
  }

  template <typename T,
            typename TT = REQUIRES((is_native_integer<T>::value)) RETURN(T)>
  BigInteger(const std::vector<T>& v)
      : BigInteger(pe_internal::zero_initialize_tag) {
    if (v.empty()) {
      Reserve(1);
      data_[0] = 0;
      sign_ = 0;
      return;
    }

    const auto n = static_cast<unsigned int>(v.size());
    unsigned int need = (n + 31) >> 5;
    Reserve(need);

    unsigned int value = 0;
    unsigned int flag = 1;
    for (unsigned i = 0; i < n; ++i) {
      if (v[i]) {
        value |= flag;
      }
      flag <<= 1;
      if (((i + 1) & mod32_mask) == 0) {
        data_[pos_++] = value;
        value = 0;
        flag = 1;
      }
    }
    if (n & mod32_mask) {
      data_[pos_++] = value;
    }
    --pos_;
    sign_ = 1;
    FixPos();
  }

  template <typename T,
            typename TT = REQUIRES((is_native_integer<T>::value)) RETURN(void)>
  BigInteger(T value) : BigInteger(pe_internal::zero_initialize_tag) {
    FromNativeInt(value);
  }

  BigInteger(const BigInteger& other)
      : BigInteger(pe_internal::zero_initialize_tag) {
    Reserve(other.buffer_length_);
    sign_ = other.sign_;
    pos_ = other.pos_;
    std::copy(other.data_, other.data_ + other.pos_ + 1, data_);
  }

  BigInteger(BigInteger&& other) noexcept
      : BigInteger(pe_internal::zero_initialize_tag) {
    std::swap(data_, other.data_);
    std::swap(buffer_length_, other.buffer_length_);
    std::swap(sign_, other.sign_);
    std::swap(pos_, other.pos_);
  }

  ~BigInteger() {
    if (data_) {
      BiAllocator::Deallocate(data_);
    }
  }

  BigInteger& operator=(const BigInteger& other) {
    return *this = BigInteger(other);
  }

  BigInteger& operator=(BigInteger&& other) noexcept {
    std::swap(data_, other.data_);
    std::swap(buffer_length_, other.buffer_length_);
    std::swap(sign_, other.sign_);
    std::swap(pos_, other.pos_);
    return *this;
  }

  template <typename T,
            typename TT = REQUIRES((is_native_integer<T>::value)) RETURN(T)>
  BigInteger& operator=(T value) {
    return *this = BigInteger(value);
  }

 private:
  // Internal constructor
  BigInteger(int size, pe_internal::alloc_mem)
      : BigInteger(pe_internal::zero_initialize_tag) {
    Reserve(size);
    data_[0] = 0;
    sign_ = 0;
  }

  BigInteger(const BigInteger& other, int min_buffer)
      : BigInteger(pe_internal::zero_initialize_tag) {
    Reserve(std::max(other.buffer_length_, min_buffer));
    sign_ = other.sign_;
    pos_ = other.pos_;
    std::copy(other.data_, other.data_ + other.pos_ + 1, data_);
  }

  BigInteger(pe_internal::zero_initialize)
      : data_(nullptr), buffer_length_(0), sign_(0), pos_(0) {}

 private:
  // Implementation internals

  // Operations on native integer.
  template <typename T>
  SL REQUIRES((is_native_integer<T>::value && pe_is_signed<T>::value)) RETURN(T)
      GetAbsValue(T x) {
    return x >= 0 ? x : -x;
  }

  template <typename T>
  SL REQUIRES((is_native_integer<T>::value && pe_is_unsigned<T>::value))
      RETURN(T) GetAbsValue(T x) {
    return x;
  }

  template <typename T>
  SL REQUIRES((is_native_integer<T>::value && pe_is_signed<T>::value)) RETURN(T)
      GetNegValue(T x) {
    return -x;
  }

  template <typename T>
  SL REQUIRES((is_native_integer<T>::value && pe_is_unsigned<T>::value))
      RETURN(T) GetNegValue(T x) {
    return x;
  }

  template <typename T>
  REQUIRES((is_native_integer<T>::value))
  RETURN(std::vector<T>) ToBinaryVector(int fix_size = 1) const {
    std::vector<T> ret;
    for (int i = 0; i <= pos_; ++i) {
      auto t = data_[i];
      for (int j = 0; j < 32; ++j) {
        ret.push_back(t & 1);
        t >>= 1;
      }
    }
    if (fix_size) {
      FixSize(ret);
    }
    return ret;
  }

  void SetNativeUInt64(uint64 v) {
    if (v <= max_32bit_value) {
      Reserve(1);
      data_[0] = static_cast<unsigned>(v);
      pos_ = 0;
    } else {
      Reserve(2);
      data_[0] = v & max_32bit_value;
      data_[1] = v >> 32;
      pos_ = 1;
    }
  }

  static int AbsCompare(const BigInteger& l, const BigInteger& r) {
    if (l.size() <= 2 && r.size() <= 2) {
      const uint64 a = l.ToInt<uint64>();
      const uint64 b = r.ToInt<uint64>();
      if (a == b) return 0;
      return a > b ? 1 : -1;
    }

    int left_pos = l.pos_;
    int right_pos = r.pos_;

    if (left_pos != right_pos) {
      return left_pos > right_pos ? 1 : -1;
    }

    for (; left_pos >= 0 && l[left_pos] == r[left_pos]; --left_pos) {
      ;
    }

    return left_pos >= 0 ? (l[left_pos] > r[left_pos] ? 1 : -1) : 0;
  }

  static BigInteger AbsAdd(const BigInteger& l, const BigInteger& r) {
    BigInteger ret(l, std::max(l.size(), r.size()) + 1);
    AbsAddInplace(ret, r);
    return ret;
  }

  static void AbsAddInplace(BigInteger& l, const BigInteger& r) {
    if (l.size() <= 2 && r.size() <= 1 || l.size() <= 1 && r.size() <= 2) {
      l.SetNativeUInt64(l.ToInt<uint64>() + r.ToInt<uint64>());
      return;
    }

    l.Reserve(l.size() + r.size() + 1);

    const int max_pos = std::max(l.pos_, r.pos_);
    const int min_pos = std::min(l.pos_, r.pos_);

    int idx = 0;
    unsigned int inc = 0;

    while (idx <= min_pos) {
      uint64 t = static_cast<uint64>(l[idx]) + r[idx] + inc;
      l[idx++] = t & max_32bit_value;
      inc = t >> 32;
    }

    const auto* large_data = l.pos_ > r.pos_ ? l.data_ : r.data_;
    while (idx <= max_pos) {
      uint64 t = static_cast<uint64>(large_data[idx]) + inc;
      l[idx++] = t & max_32bit_value;
      inc = t >> 32;
    }

    if (inc) {
      l[idx++] = inc;
    }

    l.pos_ = std::max(idx - 1, 0);
    l.FixPos();
  }

  static BigInteger AbsSub(const BigInteger& l, const BigInteger& r) {
    BigInteger ret(l);
    AbsSubInplace(ret, r);
    return ret;
  }

  static void AbsSubInplace(BigInteger& l, const BigInteger& r) {
    PE_ASSERT(BigInteger::AbsCompare(l, r) >= 0);

    if (l.size() <= 2 && r.size() <= 2) {
      l.SetNativeUInt64(l.ToInt<uint64>() - r.ToInt<uint64>());
      return;
    }

    int max_pos = l.pos_;
    int min_pos = r.pos_;

    unsigned int borrow = 0;
    for (int curr = 0; curr <= min_pos; ++curr) {
      unsigned int next_borrow = 0;
      uint64 t = l[curr];
      while (t < static_cast<uint64>(r[curr]) + borrow) {
        next_borrow++;
        t += bit32_value;
      }
      l[curr] = static_cast<unsigned>(t - r[curr] - borrow);
      borrow = next_borrow;
    }
    for (int curr = min_pos + 1; curr <= max_pos; ++curr) {
      unsigned int next_borrow = 0;
      uint64 t = l[curr];
      while (t < borrow) {
        next_borrow++;
        t += bit32_value;
      }
      l[curr] = static_cast<unsigned>(t - borrow);
      borrow = next_borrow;
    }
    l.FixPos();
  }

#if HAS_POLY_MUL_NTT32
  static BigInteger AbsMulNtt(const BigInteger& l, const BigInteger& r) {
    const int n = l.size() << 1;
    const int m = r.size() << 1;

    std::vector<uint64> X(n), Y(m);

    for (int i = 0; i <= l.pos_; ++i) {
      X[i << 1] = l[i] & 65535u;
      X[(i << 1) + 1] = l[i] >> 16;
    }
    for (int i = 0; i <= r.pos_; ++i) {
      Y[i << 1] = r[i] & 65535;
      Y[(i << 1) + 1] = r[i] >> 16;
    }
    const int allocate_size = n + m + 8;
    const int result_size = n + m - 1;
    auto result = ntt32::PolyMulSmall(X, Y, 0);
    result.resize(allocate_size);
    uint64 inc = 0;
    for (int i = 0; i < result_size; ++i) {
      uint64 t = inc + result[i];
      result[i] = t & 65535u;
      inc = t >> 16;
    }
    int now = result_size;
    while (inc > 0) {
      result[now++] = inc & 65535u;
      inc >>= 16;
    }
    if (now & 1) {
      result[now++] = 0;
    }

    BigInteger ret(now >> 1, pe_internal::alloc_mem_tag);
    for (int i = 0; i < now; i += 2) {
      ret[i >> 1] = static_cast<unsigned>((result[i + 1] << 16) | result[i]);
    }
    ret.pos_ = (now >> 1) - 1;
    ret.sign_ = 1;
    ret.FixPos();
    return ret;
  }
#endif

  static BigInteger AbsMul(const BigInteger& l, const BigInteger& r) {
    if (l.size() <= 1 && r.size() <= 1) {
      return static_cast<uint64>(l[0]) * r[0];
    }
    if (r.size() <= 1) {
      return AbsMul(l, r.ToInt<uint64>());
    }
    if (l.size() <= 1) {
      return AbsMul(r, l.ToInt<uint64>());
    }

#if HAS_POLY_MUL_NTT32
    {
      // If the cost of ntt is less than normal multiplication, then use ntt.
      const uint64 cost1 = static_cast<uint64>(l.size()) * r.size();
      const uint64 len = (l.size() + r.size()) << 1;
      int64 aligned_len = 1;
      int bit = 1;
      while (aligned_len < static_cast<int64>(len)) aligned_len <<= 1, ++bit;
      const uint64 cost2 = aligned_len * bit * 3;

      if (cost2 * 2 < cost1) {
        return AbsMulNtt(l, r);
      }
    }
#endif

    const int left_pos = l.pos_;
    const int right_pos = r.pos_;

    const int new_size = l.size() + r.size() + 1;

    BigInteger ret(new_size, pe_internal::alloc_mem_tag);
    std::fill(ret.data_, ret.data_ + new_size, 0);

    for (int i = 0; i <= right_pos; ++i) {
      auto t = r[i];
      uint64 inc = 0;
      int j = 0;
      for (; j <= left_pos; ++j) {
        inc += static_cast<uint64>(t) * l[j] + ret[i + j];
        ret[i + j] = inc & max_32bit_value;
        inc >>= 32;
      }
      for (; inc; inc >>= 32) {
        ret[i + j++] = inc & max_32bit_value;
      }
    }
    ret.pos_ = left_pos + right_pos + 2;
    ret.FixPos();
    return ret;
  }

  template <typename T>
  static BigInteger AbsMul(const BigInteger& l, T r) {
    static_assert(pe_is_unsigned<T>::value, "T must be unsigned");
    if (r > max_32bit_value) {
      return AbsMul(l, BigInteger(r));
    }
    BigInteger ret(l, l.size() + BigInteger(r).size() + 1);
    AbsMulInplace(ret, r);
    return ret;
  }

  template <typename T>
  static void AbsMulInplace(BigInteger& l, T r) {
    static_assert(pe_is_unsigned<T>::value, "T must be unsigned");
    if (r > max_32bit_value) {
      l = AbsMul(l, BigInteger(r));
      return;
    }

    if (l.size() <= 1) {
      l.SetNativeUInt64(static_cast<uint64>(l[0]) * r);
      return;
    }

    l.Reserve(l.size() + BigInteger(r).size() + 1);

    uint64 inc = 0;
    int top = 0;
    for (int i = 0; i <= l.pos_; ++i) {
      uint64 v = static_cast<uint64>(l[i]) * r + inc;
      l[top++] = v & max_32bit_value;
      inc = v >> 32;
    }

    while (inc > 0) {
      l[top++] = inc & max_32bit_value;
      inc >>= 32;
    }

    l.pos_ = top - 1;
    l.FixPos();
  }

  static BigInteger AbsDiv(const BigInteger& l, const BigInteger& r,
                           BigInteger& remain) {
    if (l.size() <= 2 && r.size() <= 2) {
      const uint64 a = l.ToInt<uint64>();
      const uint64 b = r.ToInt<uint64>();
      remain = a % b;
      return a / b;
    }

    const int t = AbsCompare(l, r);
    if (t < 0) {
      remain = l;
      return 0;
    }
    if (t == 0) {
      remain = 0;
      return 1;
    }

    std::vector<unsigned int> rb;
    std::vector<unsigned int> rr = AbsDivImpl<unsigned int>(
        l.ToBinaryVector<unsigned int>(), r.ToBinaryVector<unsigned int>(), rb);
    remain = BigInteger(rb);
    return rr;
  }

  static BigInteger AbsDiv(const BigInteger& l, const BigInteger& r) {
    if (l.size() <= 2 && r.size() <= 2) {
      const uint64 a = l.ToInt<uint64>();
      const uint64 b = r.ToInt<uint64>();
      return a / b;
    }

    const int t = AbsCompare(l, r);
    if (t < 0) {
      return 0;
    }
    if (t == 0) {
      return 1;
    }

    std::vector<unsigned int> rb;
    std::vector<unsigned int> rr = AbsDivImpl<unsigned int>(
        l.ToBinaryVector<unsigned int>(), r.ToBinaryVector<unsigned int>(), rb);
    return rr;
  }

  template <typename T>
  static std::vector<T> AbsDivImpl(const std::vector<T>& l,
                                   const std::vector<T>& r,
                                   std::vector<T>& remain) {
    std::vector<T> result;
    remain = l;

    const int r_size = static_cast<int>(r.size());
    int pos = static_cast<int>(l.size()) - 1;
    int end = pos - r_size + 1;
    for (; end >= 0;) {
      if (pos - end + 1 < r_size) {
        result.push_back(0);
        --end;
        continue;
      }
      if (remain[pos] == 0) {
        --pos;
        continue;
      }
      int gt = 1;
      if (pos - end + 1 == r_size) {
        for (int i = pos, j = r_size - 1; i >= end; --i, --j) {
          if (remain[i] < r[j]) {
            gt = 0;
            break;
          } else if (remain[i] > r[j]) {
            break;
          }
        }
      }
      result.push_back(gt);
      if (gt == 0) {
        --end;
        continue;
      }

      int borrow = 0;
      int i = end, j = 0;
      for (; j < r_size; ++i, ++j) {
        int next_borrow = 0;
        auto t = remain[i];
        while (t < r[j] + borrow) {
          t += 2;
          ++next_borrow;
        }
        remain[i] = t - r[j] - borrow;
        borrow = next_borrow;
      }

      for (; i <= pos; ++i) {
        int next_borrow = 0;
        int t = remain[i];
        while (t < borrow) {
          t += 2;
          ++next_borrow;
        }
        remain[i] = t - borrow;
        borrow = next_borrow;
      }
      --end;
    }

    if (result.size() == 0) result.push_back(0);
    std::reverse(result.begin(), result.end());
    FixSize(result);
    FixSize(remain);
    return result;
  }

  template <typename T>
  static BigInteger AbsDiv(const BigInteger& l, T r, T& remain) {
    static_assert(pe_is_unsigned<T>::value, "T must be unsigned");
    static_assert(sizeof(T) <= 8, "T must be at most 64-bit");
    if (l.size() <= 2) {
      const uint64 a = l.ToInt<uint64>();
      const uint64 b = r;
      remain = a % b;
      return a / b;
    }

    BigInteger t(l);
    AbsDivInplace(t, r, remain);
    return t;
  }

  template <typename T>
  static BigInteger AbsDiv(const BigInteger& l, T r) {
    static_assert(pe_is_unsigned<T>::value, "T must be unsigned");
    static_assert(sizeof(T) <= 8, "T must be at most 64-bit");
    if (l.size() <= 2) {
      const uint64 a = l.ToInt<uint64>();
      const uint64 b = r;
      return a / b;
    }

    BigInteger t(l);
    T remain;
    AbsDivInplace(t, r, remain);
    return t;
  }

  template <typename T>
  static void AbsDivInplace(BigInteger& l, T r, T& remain) {
    static_assert(pe_is_unsigned<T>::value, "T must be unsigned");
    static_assert(sizeof(T) <= 8, "T must be at most 64-bit");

    l.FixPos();
    if (l.size() <= 2) {
      const uint64 a = l.ToInt<uint64>();
      const uint64 b = r;
      remain = static_cast<T>(a % b);
      l.SetNativeUInt64(a / b);
      return;
    }
#if !PE_HAS_INT128
    if (sizeof(T) > 4) {
      BigInteger tmp_remain;
      l = AbsDiv(l, BigInteger(r), tmp_remain);
      remain = tmp_remain.ToInt<T>();
      return;
    }
#else
    if (r <= max_32bit_value) {
      uint64 add = 0;
      for (int i = l.pos_; i > 0; --i) {
        const uint64 x = add + l.data_[i];
        const uint64 next_add = (x % r) << 32;
        l.data_[i] = x / r;
        add = next_add;
      }
      const uint64 x = add + l.data_[0];
      l.data_[0] = x / r;
      remain = x % r;
      l.FixPos();
    } else {
      uint64 add = 0;
      for (int i = l.pos_; i > 0; --i) {
        const uint128 x = (static_cast<uint128>(add) << 32) + l.data_[i];
        const uint64 next_add = x % r;
        l.data_[i] = x / r;
        add = next_add;
      }
      const uint128 x = (static_cast<uint128>(add) << 32) + l.data_[0];
      l.data_[0] = x / r;
      remain = x % r;
      l.FixPos();
    }
#endif
  }

 public:
  const unsigned int* data() const { return data_; }
  unsigned int* data() { return data_; }
  int size() const { return pos_ + 1; }
  unsigned int operator[](int idx) const { return data_[idx]; }
  unsigned int& operator[](int idx) { return data_[idx]; }
  int sign() const { return sign_; }

  int CompareTo(const BigInteger& other) const {
    if (sign_ != other.sign_) {
      return sign_ < other.sign_ ? -1 : 1;
    }
    if (sign_ == 0) {
      return 0;
    }
    const int t = BigInteger::AbsCompare(*this, other);
    return sign_ > 0 ? t : -t;
  }

  int IntSign() const { return sign_; }
  bool IsZero() const { return sign_ == 0; }
  int IsEven() const { return data_[0] & 1 ? 0 : 1; }
  int IsOdd() const { return data_[0] & 1 ? 1 : 0; }
  unsigned int LowerBits() const {
    return static_cast<unsigned int>(data_[0]);
  }

  template <typename T>
  REQUIRES((is_native_integer<T>::value && pe_is_signed<T>::value))
  RETURN(T) ToInt() const {
    using unsignedT = typename pe_make_unsigned<T>::type;
    unsignedT v = ToInt<unsignedT>();
    if (IntSign() < 0) {
      v = ~v + 1;
    }
    return static_cast<T>(v);
  }

  template <typename T>
  REQUIRES((is_native_integer<T>::value && pe_is_unsigned<T>::value))
  RETURN(T) ToInt() const {
    T result = 0;
    for (int i = pos_; i >= 0; --i) {
#if defined(COMPILER_MSVC) || defined(COMPILER_CLANG)
      result <<= 16;
      result = (result << 16) | data_[i];
#else
      result = (result << 32) | data_[i];
#endif
    }
    return result;
  }

  template <typename T>
  T ToFloat() const {
    T result = 0;
    for (int i = pos_; i >= 0; --i) {
      result = result * 4294967296 + data_[i];
    }
    if (sign_ < 0) {
      result = -result;
    }
    return result;
  }

  void SetBit(int idx) {
    const int x = idx >> div32_bit;
    const int y = idx & mod32_mask;
    data_[x] = pe::SetBit(data_[x], y);
  }

  void ResetBit(int idx) {
    const int x = idx >> div32_bit;
    const int y = idx & mod32_mask;
    data_[x] = pe::ResetBit(data_[x], y);
  }

  int GetBit(int idx) const {
    const int x = idx >> div32_bit;
    const int y = idx & mod32_mask;
    return x > pos_ ? 0 : (data_[x] >> y) & 1;
  }

  void RevBit(int idx) {
    const int x = idx >> div32_bit;
    const int y = idx & mod32_mask;
    data_[x] = pe::RevBit(data_[x], y);
  }

  int BitCount() const {
    int ret = 0;
    for (int i = pos_; i >= 0; --i) ret += pe_popcount(data_[i]);
    return ret;
  }

  int BitHeight() const {
    int ret = pos_ << div32_bit;
    int hiCnt = 0;
    unsigned int v = data_[pos_];
    for (unsigned int x = 1; v; ++hiCnt, x <<= 1, v >>= 1) {
      ;
    }
    return ret + hiCnt;
  }

  std::string ToString() const {
    BigInteger t(*this);
    std::vector<unsigned int> mods;
    t.FixPos();
    std::stringstream ss;
    if (t.sign_ == -1) {
      ss << "-";
    }

    do {
      uint64 add = 0;
      for (int i = t.pos_; i > 0; --i) {
        const uint64 x = add + t.data_[i];
        const uint64 next_add = (x % output_mod) << 32;
        t.data_[i] = static_cast<unsigned>(x / output_mod);
        add = next_add;
      }
      uint64 x = add + t.data_[0];
      t.data_[0] = static_cast<unsigned>(x / output_mod);
      mods.push_back(x % output_mod);
      t.FixPos();
    } while (!t.IsZero());

    int idx = static_cast<int>(mods.size()) - 1;
    char buff[32];
    sprintf(buff, "%u", mods[idx--]);
    ss << buff;
    for (; idx >= 0; --idx) {
      sprintf(buff, "%0*u", output_mod_dig, mods[idx]);
      ss << buff;
    }
    return ss.str();
  }

  std::string to_string() const { return ToString(); }

  BigInteger Difference(const BigInteger& other) const {
    int t = CompareTo(other);
    if (t == 0) {
      return 0;
    }
    return t > 0 ? AbsSub(*this, other) : AbsSub(other, *this);
  }

  void Dump() const {
    dbg(sign_);
    dbg(pos_);
    dbg(buffer_length_);
    for (int i = 0; i <= pos_; ++i) std::cerr << data_[i] << ",";
    std::cerr << std::endl;
  }

 public:
  // Operators
  const BigInteger& operator+() const { return *this; }

  BigInteger operator-() const {
    BigInteger ret(*this);
    ret.sign_ = -ret.sign_;
    return ret;
  }

  BigInteger operator~() const {
    BigInteger ret(*this);
    for (int i = 0; i < ret.pos_; ++i) {
      ret[i] ^= max_32bit_value;
    }
    unsigned int y = ret[ret.pos_];
    for (unsigned int x = 1; y; x <<= 1, y >>= 1) {
      ret[ret.pos_] ^= x;
    }

    ret.FixPos();

    return ret;
  }

  BigInteger& operator+=(const BigInteger& other) {
    if (other.IsZero()) {
      // Do nothing
    } else if (IsZero()) {
      *this = other;
    } else if (sign() == other.sign()) {
      AbsAddInplace(*this, other);
    } else {
      int c = AbsCompare(*this, other);
      if (c == 0) {
        pos_ = 0;
        data_[0] = 0;
        sign_ = 0;
      } else if (c > 0) {
        AbsSubInplace(*this, other);
      } else {
        BigInteger t(other);
        AbsSubInplace(t, *this);
        *this = std::move(t);
      }
    }
    return *this;
  }

  BigInteger& operator-=(const BigInteger& other) {
    if (other.IsZero()) {
      // Do nothing
    } else if (IsZero()) {
      *this = other;
      sign_ = -other.sign_;
    } else if (sign() != other.sign()) {
      AbsAddInplace(*this, other);
    } else {
      int c = AbsCompare(*this, other);
      if (c == 0) {
        pos_ = 0;
        data_[0] = 0;
        sign_ = 0;
      } else if (c > 0) {
        AbsSubInplace(*this, other);
      } else {
        BigInteger t(other);
        AbsSubInplace(t, *this);
        *this = std::move(t);
        sign_ = -other.sign_;
      }
    }
    return *this;
  }

  BigInteger& operator*=(const BigInteger& other) {
    *this = *this * other;
    return *this;
  }

  template <typename T>
  REQUIRES((is_native_integer<T>::value))
  RETURN(BigInteger&) operator*=(T other) {
    if (IsZero()) {
      return *this;
    }
    if (other == 0) {
      pos_ = 0;
      data_[0] = 0;
      sign_ = 0;
      return *this;
    }
    using unsignedT = typename pe_make_unsigned<T>::type;
    unsignedT abs_value = GetAbsValue(other);
    AbsMulInplace(*this, abs_value);
    sign_ = sign_ * (other > 0 ? 1 : -1);
    return *this;
  }

  BigInteger& operator/=(const BigInteger& other) {
    *this = *this / other;
    return *this;
  }

  template <typename T>
  REQUIRES((is_native_integer<T>::value && sizeof(T) <= 8))
  RETURN(BigInteger&) operator/=(T other) {
    T r;
    DivInplace(*this, other, r);
    return *this;
  }

  BigInteger& operator%=(const BigInteger& other) {
    *this = *this % other;
    return *this;
  }

  template <typename T>
  REQUIRES((is_native_integer<T>::value && sizeof(T) <= 8))
  RETURN(BigInteger&) operator%=(T other) {
    T r;
    DivInplace(*this, other, r);
    return *this = r;
  }

  BigInteger& operator&=(const BigInteger& other) {
    *this = *this & other;
    return *this;
  }

  BigInteger& operator^=(const BigInteger& other) {
    *this = *this ^ other;
    return *this;
  }

  BigInteger& operator|=(const BigInteger& other) {
    *this = *this | other;
    return *this;
  }

  template <typename T>
  REQUIRES(
      (is_native_integer<T>::value &&
       !std::is_same<typename std::remove_cvref<T>::type, BigInteger>::value))
  RETURN(BigInteger&)
  operator>>=(T other) {
    *this = *this >> other;
    return *this;
  }

  template <typename T>
  REQUIRES(
      (is_native_integer<T>::value &&
       !std::is_same<typename std::remove_cvref<T>::type, BigInteger>::value))
  RETURN(BigInteger&)
  operator<<=(T other) {
    *this = *this << other;
    return *this;
  }

  BigInteger& operator++() {
    *this += 1;
    return *this;
  }

  BigInteger operator++(int) {
    BigInteger ret(*this);
    *this += 1;
    return ret;
  }

  BigInteger& operator--() {
    *this -= 1;
    return *this;
  }

  BigInteger operator--(int) {
    BigInteger ret(*this);
    *this -= 1;
    return ret;
  }

 public:
  // All the binary operators are friend operators
  // Comparison operators
#if PE_HAS_CPP20
  friend inline int operator<=>(const BigInteger& l, const BigInteger& r) {
    return l.CompareTo(r);
  }
  friend inline int operator==(const BigInteger& l, const BigInteger& r) {
    return l.CompareTo(r) == 0;
  }
  friend inline int operator!=(const BigInteger& l, const BigInteger& r) {
    return l.CompareTo(r) != 0;
  }
#else
  friend inline int operator<(const BigInteger& l, const BigInteger& r) {
    const int s1 = l.sign_;
    const int s2 = r.sign_;

    if (s1 < 0) {
      return s2 >= 0 || BigInteger::AbsCompare(l, r) > 0;
    } else if (s1 > 0) {
      return s2 > 0 && BigInteger::AbsCompare(l, r) < 0;
    } else {
      return s2 > 0;
    }
  }

  friend inline int operator<=(const BigInteger& l, const BigInteger& r) {
    const int s1 = l.sign_;
    const int s2 = r.sign_;

    if (s1 < 0) {
      return s2 >= 0 || BigInteger::AbsCompare(l, r) >= 0;
    } else if (s1 > 0) {
      return s2 > 0 && BigInteger::AbsCompare(l, r) <= 0;
    } else {
      return s2 >= 0;
    }
  }

  friend inline int operator>(const BigInteger& l, const BigInteger& r) {
    const int s1 = l.sign_;
    const int s2 = r.sign_;

    if (s1 < 0) {
      return s2 < 0 && BigInteger::AbsCompare(l, r) < 0;
    } else if (s1 > 0) {
      return s2 <= 0 || BigInteger::AbsCompare(l, r) > 0;
    } else {
      return s2 < 0;
    }
  }

  friend inline int operator>=(const BigInteger& l, const BigInteger& r) {
    const int s1 = l.sign_;
    const int s2 = r.sign_;

    if (s1 < 0) {
      return s2 < 0 && BigInteger::AbsCompare(l, r) <= 0;
    } else if (s1 > 0) {
      return s2 <= 0 || BigInteger::AbsCompare(l, r) >= 0;
    } else {
      return s2 <= 0;
    }
  }

  friend inline int operator==(const BigInteger& l, const BigInteger& r) {
    return l.sign_ == r.sign_ && BigInteger::AbsCompare(l, r) == 0;
  }

  friend inline int operator!=(const BigInteger& l, const BigInteger& r) {
    return !(l == r);
  }
#endif
  friend inline BigInteger operator+(const BigInteger& l, const BigInteger& r) {
    BigInteger ret(l);
    ret += r;
    return ret;
  }

  friend inline BigInteger operator-(const BigInteger& l, const BigInteger& r) {
    if (r.IsZero()) {
      return l;
    } else if (l.IsZero()) {
      return -r;
    } else if (l.sign() != r.sign()) {
      BigInteger t(l);
      BigInteger::AbsAddInplace(t, r);
      return t;
    } else {
      int c = BigInteger::AbsCompare(l, r);
      if (c == 0) {
        return 0;
      } else if (c > 0) {
        BigInteger t(l);
        BigInteger::AbsSubInplace(t, r);
        return t;
      } else {
        BigInteger t(r);
        BigInteger::AbsSubInplace(t, l);
        t.sign_ = -r.sign_;
        return t;
      }
    }
  }

  friend inline BigInteger operator*(const BigInteger& l, const BigInteger& r) {
    if (l.IsZero() || r.IsZero()) return 0;

    const int s = l.sign() * (r > 0 ? 1 : -1);
    BigInteger ret(BigInteger::AbsMul(l, r));
    ret.sign_ = s;

    return ret;
  }

  template <typename T>
  friend inline REQUIRES(
      (is_native_integer<T>::value &&
       !std::is_same<typename std::remove_cvref<T>::type, BigInteger>::value))
      RETURN(BigInteger)
      operator*(const BigInteger& l, T r) {
    if (r == 0 || l.IsZero()) return 0;

    using unsignedT = typename pe_make_unsigned<T>::type;
    unsignedT abs_value = BigInteger::GetAbsValue(r);
    const int s = l.sign() * (r > 0 ? 1 : -1);
    BigInteger ret(BigInteger::AbsMul(l, abs_value));
    ret.sign_ = s;

    return ret;
  }

  template <typename T>
  friend inline REQUIRES(
      (is_native_integer<T>::value &&
       !std::is_same<typename std::remove_cvref<T>::type, BigInteger>::value))
      RETURN(BigInteger)
      operator*(T l, const BigInteger& r) {
    return r * l;
  }

  friend inline BigInteger operator/(const BigInteger& l, const BigInteger& r) {
    BigInteger u, v;
    std::tie(u, v) = DivImpl(l, r);
    return u;
  }

  template <typename T>
  friend inline REQUIRES(
      (is_native_integer<T>::value &&
       !std::is_same<typename std::remove_cvref<T>::type, BigInteger>::value &&
       sizeof(T) <= 8)) RETURN(BigInteger)
  operator/(const BigInteger& l, T r) {
    BigInteger u;
    T v;
    std::tie(u, v) = DivImpl(l, r);
    return u;
  }

  friend inline std::tuple<BigInteger, BigInteger> DivImpl(
      const BigInteger& l, const BigInteger& r) {
    if (l.IsZero() && r.IsZero()) {
      return std::make_tuple(1, 0);
    }
    if (l.IsZero() || r.IsZero()) {
      return std::make_tuple(0, 0);
    }

    if (r.size() > 2) {
      BigInteger x;
      BigInteger ret(BigInteger::AbsDiv(l, r, x));
      ret.sign_ = l.sign_ * r.sign_;
      ret.FixPos();
      if (l.sign_ < 0) {
        x.sign_ = -x.sign_;
      }
      x.FixPos();

      return std::make_tuple(std::move(ret), std::move(x));
    } else {
      uint64 abs_value = r.ToInt<uint64>();
      uint64 x;
      BigInteger ret(l);
      BigInteger::AbsDivInplace(ret, abs_value, x);
      ret.sign_ = l.sign() * (r.sign() > 0 ? 1 : -1);
      ret.FixPos();

      BigInteger remain(x);
      if (l.sign_ < 0) {
        remain.sign_ = -remain.sign_;
      }
      return std::make_tuple(std::move(ret), std::move(remain));
    }
  }

  template <typename T>
  friend inline REQUIRES(
      (is_native_integer<T>::value &&
       !std::is_same<typename std::remove_cvref<T>::type, BigInteger>::value &&
       sizeof(T) <= 8)) RETURN(std::tuple<BigInteger, T>)
      DivImpl(const BigInteger& l, T r) {
    if (l.IsZero() && r == 0) {
      return std::make_tuple(1, 0);
    }
    if (l.IsZero() || r == 0) {
      return std::make_tuple(0, 0);
    }

    const int signl = l.sign_;
    using unsignedT = typename pe_make_unsigned<T>::type;
    unsignedT abs_value = BigInteger::GetAbsValue(r);
    unsignedT x;
    BigInteger ret(l);
    BigInteger::AbsDivInplace(ret, abs_value, x);
    ret.sign_ = signl * (r > 0 ? 1 : -1);
    ret.FixPos();
    if (l.sign_ < 0) {
      PE_ASSERT(x == 0 || !pe_is_unsigned<T>::value);
      x = BigInteger::GetAbsValue(x);
    }

    return std::make_tuple(std::move(ret), static_cast<T>(x));
  }

  template <typename T>
  friend inline REQUIRES(
      (is_native_integer<T>::value &&
       !std::is_same<typename std::remove_cvref<T>::type, BigInteger>::value))
      RETURN(void) DivInplace(BigInteger& l, T r, T& remain) {
    if (l.IsZero() && r == 0) {
      l = 1;
      remain = 0;
      return;
    }

    if (l.IsZero() || r == 0) {
      if (!l.IsZero()) {
        l.pos_ = 0;
        l.data_[0] = 0;
        l.sign_ = 0;
      }
      remain = 0;
      return;
    }
    using unsignedT = typename pe_make_unsigned<T>::type;
    unsignedT abs_value = BigInteger::GetAbsValue(r);
    unsignedT tmp_remain;
    const int signl = l.sign_;
    BigInteger::AbsDivInplace(l, abs_value, tmp_remain);
    l.sign_ = signl * (r > 0 ? 1 : -1);
    l.FixPos();
    remain = static_cast<T>(tmp_remain);
    if (signl < 0) {
      PE_ASSERT(remain == 0 || !pe_is_unsigned<T>::value);
      remain = BigInteger::GetNegValue(remain);
    }
  }

  friend inline BigInteger operator%(const BigInteger& l, const BigInteger& r) {
    BigInteger u, v;
    std::tie(u, v) = DivImpl(l, r);
    return v;
  }

  template <typename T>
  friend inline REQUIRES(
      (is_native_integer<T>::value &&
       !std::is_same<typename std::remove_cvref<T>::type, BigInteger>::value &&
       sizeof(T) <= 8)) RETURN(BigInteger)
  operator%(const BigInteger& l, T r) {
    BigInteger u;
    T v;
    std::tie(u, v) = DivImpl(l, r);
    if (l.sign() < 0) {
      v = BigInteger::GetNegValue(v);
    }
    return v;
  }

  friend inline BigInteger operator&(const BigInteger& l, const BigInteger& r) {
    if (l.size() <= 2 && r.size() <= 2) {
      return l.ToInt<uint64>() & r.ToInt<uint64>();
    }

    const int min_pos = std::min(l.pos_, r.pos_);
    BigInteger ret(min_pos + 1, pe_internal::alloc_mem_tag);
    for (int i = 0; i <= min_pos; ++i) {
      ret[i] = l[i] & r[i];
    }
    ret.pos_ = min_pos;
    ret.sign_ = 1;
    ret.FixPos();
    return ret;
  }
  friend inline BigInteger operator^(const BigInteger& l, const BigInteger& r) {
    if (l.size() <= 2 && r.size() <= 2) {
      return l.ToInt<uint64>() ^ r.ToInt<uint64>();
    }

    const int max_pos = std::max(l.pos_, r.pos_);
    BigInteger ret(max_pos + 1, pe_internal::alloc_mem_tag);
    for (int i = 0; i <= max_pos; ++i) {
      unsigned int t = 0;
      if (i <= l.pos_) t ^= l[i];
      if (i <= r.pos_) t ^= r[i];
      ret[i] = t;
    }
    ret.pos_ = max_pos;
    ret.sign_ = 1;
    ret.FixPos();
    return ret;
  }
  friend inline BigInteger operator|(const BigInteger& l, const BigInteger& r) {
    if (l.size() <= 2 && r.size() <= 2) {
      return l.ToInt<uint64>() | r.ToInt<uint64>();
    }

    const int max_pos = std::max(l.pos_, r.pos_);
    BigInteger ret(max_pos + 1, pe_internal::alloc_mem_tag);
    for (int i = 0; i <= max_pos; ++i) {
      unsigned int t = 0;
      if (i <= l.pos_) t |= l[i];
      if (i <= r.pos_) t |= r[i];
      ret[i] = t;
    }
    ret.pos_ = max_pos;
    ret.sign_ = 1;
    ret.FixPos();
    return ret;
  }

  template <typename T>
  friend inline REQUIRES(
      (is_native_integer<T>::value &&
       !std::is_same<typename std::remove_cvref<T>::type, BigInteger>::value))
      RETURN(BigInteger)
      operator<<(const BigInteger& l, T n) {
    if (l.sign() == 0) {
      return 0;
    }
    if (n == 0) {
      return l;
    }
    const int bit_cnt = l.BitHeight();
    std::vector<unsigned int> v(n + bit_cnt, 0);
    for (int i = 0, j = n; i < bit_cnt; ++i, ++j) {
      const int x = i >> BigInteger::div32_bit;
      const int y = i & BigInteger::mod32_mask;
      v[j] = (l[x] >> y) & 1;
    }
    BigInteger ret(v);
    ret.sign_ = l.sign_;
    ret.FixPos();
    return ret;
  }

  template <typename T>
  friend inline REQUIRES(
      (is_native_integer<T>::value &&
       !std::is_same<typename std::remove_cvref<T>::type, BigInteger>::value))
      RETURN(BigInteger)
      operator>>(const BigInteger& l, T n) {
    if (l.sign() == 0) {
      return 0;
    }
    if (n == 0) {
      return l;
    }
    const int bit_cnt = l.BitHeight();
    if (n >= bit_cnt) {
      return 0;
    }

    std::vector<unsigned int> v(bit_cnt - n, 0);
    for (int i = n, j = 0; i < bit_cnt; ++i, ++j) {
      const int x = i >> BigInteger::div32_bit;
      const int y = i & BigInteger::mod32_mask;
      v[j] = (l[x] >> y) & 1;
    }

    BigInteger ret(v);
    ret.sign_ = l.sign_;
    ret.FixPos();

    return ret;
  }

  friend std::ostream& operator<<(std::ostream& o, const BigInteger& bi) {
    return o << bi.ToString();
  }

 private:
  unsigned int* data_;
  int buffer_length_;
  mutable int pos_;
  mutable int sign_;
};

using bi = BigInteger;

template <>
struct Gbi<BigInteger> {
  template <typename T,
            typename TT = REQUIRES((is_native_integer<T>::value)) RETURN(T)>
  static BigInteger Of(T value) {
    return BigInteger(value);
  }

  static BigInteger Of(const std::string& s) { return BigInteger(s); }
};

SL int IsZero(const BigInteger& x) { return x.IsZero(); }

SL int IntSign(const BigInteger& x) { return x.sign(); }

SL int IsEven(const BigInteger& x) { return x.IsEven(); }

SL int IsOdd(const BigInteger& x) { return x.IsOdd(); }

SL unsigned int LowerBits(const BigInteger& x) {
  return x.LowerBits();
}

SL std::tuple<BigInteger, BigInteger> Div(const BigInteger& l,
                                          const BigInteger& r) {
  return DivImpl(l, r);
}

template <typename T>
SL T ToInt(const BigInteger& x) {
  return x.ToInt<T>();
}

template <typename T>
SL T ToFloat(const BigInteger& x) {
  return x.ToFloat<T>();
}

// Power operation has a default implementation

SL std::string ToString(const BigInteger& x) { return x.ToString(); }

SL std::string to_string(const BigInteger& x) { return ToString(x); }

#if PE_HAS_CPP20
static_assert(PeGbi<BigInteger>);
static_assert(PeFraction<Fraction<BigInteger>>);
#endif
}  // namespace pe

inline pe::BigInteger operator"" _bi(const char* sv, size_t /*sc*/) {
  return pe::BigInteger(std::string(sv));
}

inline pe::BigInteger operator"" _bi(unsigned long long v) {
  return pe::BigInteger(v);
}
#endif
