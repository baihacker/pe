#ifndef PE_ALGO_
#define PE_ALGO_

#include "pe_base"
#include "pe_int"
#include "pe_span"
#include "pe_nt"
#include "pe_fraction"
#include "pe_poly_algo"
#include "pe_tree"
#include "pe_array"
#include "pe_parallel_algo"
#include "pe_ntf"

namespace pe {
// Finds the first x value in [l, r] such that f(x) is true.
// Returns r + 1 if failed.
// It is assumed that if f(x) is true then f(x+1) is true.
// It is required that l - 1 <= r, i.e. l <= r or l - 1 = r.
template <typename T, typename F>
SL constexpr T BinarySearchFirst(T l, T r, const F& f) {
  ++r;
  PE_ASSERT(l <= r);
  auto len = r - l;
  while (len > 0) {
    const auto half = len >> 1;
    const T mid = l + half;
    if (f(mid)) {
      len = half;
    } else {
      l = mid + 1;
      len = len - half - 1;
    }
  }
  return l;
}

// Finds the last x value in [l, r] such that f(x) is true.
// Returns l - 1 if failed.
// It is assumed that if f(x) is true then f(x-1) is true.
// It is required that l - 1 <= r, i.e. l <= r or l - 1 = r.
template <typename T, typename F>
SL constexpr T BinarySearchLast(T l, T r, const F& f) {
  --l;
  PE_ASSERT(l <= r);
  auto len = r - l;
  while (len > 0) {
    const auto half = len >> 1;
    const T mid = r - half;
    if (f(mid)) {
      len = half;
    } else {
      r = mid - 1;
      len = len - half - 1;
    }
  }
  return r;
}

// Calculates n! % p.
// Algorithm source: https://min-25.hatenablog.com/entry/2017/04/10/215046
// Complexity: M(p^(1/2))
template <typename T = int64>
struct FactModer {
  FactModer(uint64 p) : p_(p) { Init(); }

  // Evaluate (x+v*0+1)*(x+v*1+1)*(x+v*2+1)*...*(x+v*(d-1)+1) at 0, 1, 2, ..., d
  void Evaluate(int d, uint64* result, uint64 v) {
    if (d == 1) {
      result[0] = 1;
      result[1] = p_ == 2 ? 0 : 2;
      return;
    }

    const int half_d = d >> 1;
    Evaluate(half_d, result, v);
    std::copy(result, result + half_d + 1, std::data(g0_));
#if ENABLE_OPENMP
#pragma omp parallel sections if (d >= 10000)
#endif
    {
#if ENABLE_OPENMP
#pragma omp section
#endif
      PolyOffsetEvaluate<uint64>(half_d, result, std::data(g1_), half_d + 1,
                                 std::data(ifac_), p_);
#if ENABLE_OPENMP
#pragma omp section
#endif
      PolyOffsetEvaluate<uint64>(half_d, result, std::data(g2_), v * half_d,
                                 std::data(ifac_), p_);
#if ENABLE_OPENMP
#pragma omp section
#endif
      PolyOffsetEvaluate<uint64>(half_d, result, std::data(g3_),
                                 v * half_d + half_d, std::data(ifac_), p_);
    }

    for (int i = 0; i <= half_d; ++i) {
      result[i] = MulMod(g0_[i], g2_[i], p_);
    }
    for (int i = half_d + 1, j = 0; i <= half_d * 2; ++i, ++j) {
      result[i] = MulMod(g1_[j], g3_[j + 1], p_);
    }

    if (d & 1) {
      uint64 tmp = (v * (d - 1) + 1) % p_;
      for (int i = 0; i <= 2 * half_d; ++i) {
        result[i] = MulMod(result[i], tmp++, p_);
        if (tmp >= p_) tmp -= p_;
      }
      uint64 t = 1;
      uint64 c = d + 1;
      for (int i = 0; i < d; ++i) {
        t = MulMod(t, c, p_);
        c += v;
        if (c >= p_) c -= p_;
      }
      result[d] = t;
    }
  }

  T operator()(uint64 n) { return Cal(n); }

  T Cal(uint64 n) {
    if (n >= p_) return 0;
    if (n < q_) return fac_[n];

    uint64 m = static_cast<int64>(std::sqrt(n));
    uint64 ret = 1;

    for (uint64 i = m * m + 1; i <= n; ++i) {
      ret = MulMod(ret, i, p_);
    }

    Evaluate(static_cast<int>(m), std::data(v_), m);

    for (int i = 0; i < m; ++i) {
      ret = MulMod(ret, v_[i], p_);
    }
    return static_cast<int64>(ret);
  }

  void Init() {
    q_ = static_cast<uint64>(std::sqrt(p_));
    while (q_ * q_ < p_) ++q_;
    q_ <<= 1;
    q_ += 1;
    fac_.resize(q_);
    ifac_.resize(q_);
    InitSeqProd2<uint64>(std::data(fac_), std::data(ifac_), 1, q_ - 1, p_);
    g0_.resize(q_);
    g1_.resize(q_);
    g2_.resize(q_);
    g3_.resize(q_);
    v_.resize(q_);
  }

 private:
  uint64 p_;
  uint64 q_;
  std::vector<uint64> fac_, ifac_;
  std::vector<uint64> g0_, g1_, g2_, g3_;
  std::vector<uint64> v_;
};

// Calculates: (0! + 1! + 2! + ... + n!) % p
// Complexity: M(p^(1/2))
// Example result: f(4e8)%99999999907 = 16815920030
/*
m = 5

YP = 1+(5x+1)+(5x+1)(5x+2)+(5x+1)(5x+2)(5x+3)+(5x+1)(5x+2)(5x+3)(5x+4)
YP(0) = (0! + 1! + 2! + 3! + 4!) / 0!
YP(1) = (5! + 6! + 7! + 8! + 9!) / 5!
YP(2) = (10! + 11! + 12! + 13! + 14!) / 10!
YP(3) = (15! + 16! + 17! + 18! + 19!) / 15!
YP(4) = (20! + 21! + 22! + 23! + 24!) / 10!

YQ = (5x+1)(5x+2)(5x+3)(5x+4)(5x+5)
YQ(0) = 1*2*3*4*5
YQ(1) = 6*7*8*9*10
YQ(2) = 11*12*13*14*15
YQ(3) = 16*17*18*19*20
YQ(4) = 21*22*23*24*25
YQ(5) = 26*27*28*29*30
*/
template <typename T = int64>
struct FactSumModer {
  FactSumModer(uint64 p) : p_(p) { Init(); }

  T operator()(uint64 n) { return Cal(n); }

  T Cal(uint64 n) {
    if (n >= p_) n = p_ - 1;
    if (n < q_) return fac_sum_[n];

    const int64 m = static_cast<int64>(std::sqrt(n));
    uint64 ret = 1;

    // Prepare data for computing P
    std::vector<uint64> X((m - 1) * 2);
    for (int i = 0; i < m - 1; ++i) {
      X[i * 2] = i + 1;
      X[i * 2 + 1] = m;
    }

    std::vector<uint64> V(m);
    for (int i = 0; i < m; ++i) {
      V[i] = i;
    }

    // Compute P
    std::vector<uint64> YQ;
    std::vector<uint64> YP = PolyBatchMulAcc(X, YQ, p_);
    YP[0] = AddMod(YP[0], 1, p_);
    std::vector<uint64> P = PolyMultipointEvaluate(YP, V, p_);

    // Prepare data for computing Q
    // YQ *= (m + xm)
    YQ.resize(m + 1);
    YQ[m] = YQ[m - 1];
    for (int i = static_cast<int>(m - 1); i >= 1; --i) {
      YQ[i] = AddMod(YQ[i], YQ[i - 1], p_);
    }
    for (uint64& i : YQ) i = MulMod(i, m, p_);

    // V.extend(m)
    V.push_back(m);

    // Compute Q
    std::vector<uint64> Q = PolyMultipointEvaluate(YQ, V, p_);
    for (int i = 1; i <= m; ++i) {
      Q[i] = MulMod(Q[i], Q[i - 1], p_);
    }

    // Compute P
    // X.resize((m - 1) * 2);
    // V.resize(m);
    // deg y = m - 1

    // Compute result
    int64 result = P[0];
    for (int i = 1; i < m; ++i) {
      uint64 t = MulMod(P[i], Q[i - 1], p_);
      result = AddMod(result, t, p_);
    }

    uint64 last = Q[m - 1];
    for (int64 i = m * m; i <= static_cast<int64>(n); ++i) {
      result = AddMod(result, last, p_);
      last = MulMod(last, i + 1, p_);
    }
    return result;
  }

  void Init() {
    q_ = static_cast<uint64>(std::sqrt(p_));
    while (q_ * q_ < p_) ++q_;
    q_ <<= 1;
    q_ += 1;
    fac_.resize(q_);
    fac_sum_.resize(q_);
    InitSeqProd2<uint64>(std::data(fac_), nullptr, q_ - 1, p_);
    fac_sum_[0] = fac_[0];
    for (int i = 1; i < q_; ++i) {
      fac_sum_[i] = AddMod(fac_sum_[i - 1], fac_[i], p_);
    }
  }

 private:
  uint64 p_;
  uint64 q_;
  std::vector<uint64> fac_;
  std::vector<uint64> fac_sum_;
};

// Calculates x^n % mod using pre-computed x^(2^(i))
template <typename T = int64>
struct PowerModer {
  PowerModer(int64 x, int64 mod, int64 f = 0) { Init(x, mod, f); }

  ~PowerModer() = default;

  void Init(int64 f) { Init(x_, mod_, f); }

  void Init(int64 x, int64 mod, int64 f) {
    x_ = x;
    mod_ = mod;
    f_ = std::max<int64>(100000LL, f);
    powers_.resize(f_ + 1);
    powers_[0] = 1 % mod_;
    for (int64 i = 1; i <= f_; ++i) {
      powers_[i] = MulMod<int64, int64, int64>(powers_[i - 1], x_, mod_);
    }
    ppowers_.resize(128);
    ppowers_[0] = x_ % mod_;
    for (int i = 1; i < 128; ++i) {
      ppowers_[i] = MulMod(ppowers_[i - 1], ppowers_[i - 1], mod_);
    }
  }

  T operator()(int64 n) { return Cal(n); }

  T Cal(int64 n) {
    if (n <= f_) {
      return powers_[n];
    }
    int64 r = 1 % mod_;
    for (int i = 0; n; n >>= 1, ++i) {
      if (n & 1) {
        r = MulMod(r, ppowers_[i], mod_);
      }
    }
    return r;
  }

 private:
  int64 x_, mod_, f_;
  std::vector<int64> powers_, ppowers_;
};

// Calculates x^n % mod.
// Unlike using pre-computed x^(2^(i)), this implementation extends 2 to 2^k.
// (k = lgf_, f is aligned to the power of 2).
// In most cases, it is not necessary to specify f.
template <typename T = int64>
struct PowerModerEx {
  PowerModerEx(int64 x, int64 mod, int64 f = 0) { Init(x, mod, f); }

  ~PowerModerEx() = default;

  void Init(int64 f) { Init(x_, mod_, f); }

  void Init(int64 x, int64 mod, int64 f) {
    x_ = x;
    mod_ = mod;
    f_ = std::max<int64>(512LL, f);
    lgf_ = pe_lgll(f_);
    if (1LL << lgf_ <= f_) {
      ++lgf_;
    }
    f_ = 1LL << lgf_;
    mask_ = f_ - 1;
    powers_.resize(f_);
    powers_[0] = 1 % mod_;
    for (int64 i = 1; i < f_; ++i) {
      powers_[i] = MulMod<int64, int64, int64>(powers_[i - 1], x_, mod_);
    }
    c_ = MulMod(powers_.back(), x_, mod_);

    const int64 size = (128 + lgf_ - 1) / lgf_;
    ppowers_.resize(size);
    ppowers_[0] = powers_;

    for (int64 i = 1; i < size; ++i) {
      const int64 base = PowerMod(ppowers_[i - 1][1], f_, mod_);
      ppowers_[i].push_back(1 % mod_);
      for (int64 j = 1; j < f_; ++j) {
        ppowers_[i].push_back(PowerMod<int64, int64, int64>(base, j, mod_));
      }
    }
  }

  T operator()(int64 n) { return Cal(n); }

  T Cal(int64 n) {
    if (n <= f_) {
      return powers_[n];
    }
    int64 r = 1 % mod_;
    for (int i = 0; n; n >>= lgf_, ++i) {
      const int64 now = n & mask_;
      if (now) {
        r = MulMod(r, ppowers_[i][now], mod_);
      }
    }
    return r;
  }

 private:
  int64 x_, mod_, f_, lgf_, mask_, c_;
  std::vector<int64> powers_;
  std::vector<std::vector<int64>> ppowers_;
};

// Calculates Binomial(n, m) % p where p is prime
template <typename T = int64>
struct CombModer {
  CombModer(int64 p, int64 f = 0) { Init(p, f == 0 ? p : f); }

  ~CombModer() = default;

  void Init(int64 f) { Init(p_, f); }

  void Init(int64 p, int64 f) {
    p_ = p;
    f_ = std::min(f, p_ - 1);
    fac_.resize(f_ + 1);
    ifac_.resize(f_ + 1);
    InitSeqProd2<int64>(std::data(fac_), std::data(ifac_), 1, f_, p_);
  }

  int64 Sign(int64 x) const { return x & 1 ? p_ - 1 : 1; }

  T operator()(int64 n, int64 m) const { return Cal(n, m); }

  T Comb(int64 n, int64 m) const { return Cal(n, m); }

  T Cal(int64 n, int64 m) const {
    if (n < 0 || m > n) return 0;
    if (m == n || m == 0) return 1;
    if (m == 1 || m == n - 1) return n % p_;

    if (n <= f_) {
      return MulMod(MulMod(fac_[n], ifac_[m], p_), ifac_[n - m], p_);
    }

    // It's required that x % p_ <= f_ in the following code.

    int64 pp = 0;
    int64 dist = n - m;

    for (int64 nn = n / p_, mm = m / p_, dd = dist / p_; nn;
         nn /= p_, mm /= p_, dd /= p_) {
      pp += nn - mm - dd;
    }
    if (pp) return 0;
    int64 l = 1, r = 1;
    for (int64 x = n; x; x /= p_) {
      l = MulMod(l, Sign(x / p_), p_);
      l = MulMod(l, fac_[x % p_], p_);
    }
    for (int64 x = m; x; x /= p_) {
      r = MulMod(r, Sign(x / p_), p_);
      r = MulMod(r, fac_[x % p_], p_);
    }
    for (int64 x = dist; x; x /= p_) {
      r = MulMod(r, Sign(x / p_), p_);
      r = MulMod(r, fac_[x % p_], p_);
    }
    return MulMod(ModInv(r, p_), l, p_);
  }

 private:
  int64 p_, f_;
  std::vector<int64> fac_, ifac_;
};

// Calculates Binomial(n, m) % mod
SL int64 ShortCombMod(int64 n, int64 m, int64 mod) {
  if (m > n || m < 0) return 0;
  if (n - m < m) m = n - m;
  std::vector<int64> data;
  for (int64 i = n; i >= n - m + 1; --i) data.push_back(i);
  const int size = static_cast<int>(std::size(data));
  for (int i = 2; i <= m; ++i) {
    int64 a = i;
    for (int j = 0; j < size && a > 1; ++j) {
      if (data[j] > 1) {
        const int64 t = Gcd(a, data[j]);
        a /= t;
        data[j] /= t;
      }
    }
  }
  int64 ret = 1;
  for (int i = 0; i < size; ++i) {
    ret = MulMod(ret, data[i], mod);
  }
  return ret;
}

template <typename T>
SL T ShortComb(int64 n, int64 m) {
  if (m > n || m < 0) return 0;
  if (n - m < m) m = n - m;
  T ret = 1;
  for (int64 i = 0; i < m; ++i) {
    ret *= n - i;
    ret /= i + 1;
  }
  return ret;
}

// Calculates C(n, m) % p where p is a large prime.
// Complexity: log(m) M(p^(1/2))
template <typename T = int64>
struct CombModerEx {
  CombModerEx(int64 p) : p_(p), fmoder_(p) {}

  int64 Sign(int64 x) const { return x & 1 ? p_ - 1 : 1; }

  T Comb(int64 n, int64 m) { return Cal(n, m); }

  T Cal(int64 n, int64 m) {
    if (n < 0 || m > n) return 0;
    if (m == n || m == 0) return 1;
    if (m == 1 || m == n - 1) return n % p_;

    int64 pp = 0;
    int64 dist = n - m;

    for (int64 nn = n / p_, mm = m / p_, dd = dist / p_; nn;
         nn /= p_, mm /= p_, dd /= p_) {
      pp += nn - mm - dd;
    }
    if (pp) return 0;
    int64 l = 1, r = 1;
    for (int64 x = n; x; x /= p_) {
      l = MulMod(l, Sign(x / p_), p_);
      l = MulMod(l, fmoder_.Cal(x % p_), p_);
    }
    for (int64 x = m; x; x /= p_) {
      r = MulMod(r, Sign(x / p_), p_);
      r = MulMod(r, fmoder_.Cal(x % p_), p_);
    }
    for (int64 x = dist; x; x /= p_) {
      r = MulMod(r, Sign(x / p_), p_);
      r = MulMod(r, fmoder_.Cal(x % p_), p_);
    }

    return MulMod(ModInv(r, p_), l, p_);
  }

 private:
  int64 p_;
  FactModer<int64> fmoder_;
};

// Computes Binomial(a, b) mod p^e
template <typename T>
struct CombModerPrimePower {
  CombModerPrimePower(const T p, const T e) : p_(p), e_(e) {
    T pe = p_ * e_;
    mod_ = Power(T(p_), e_);
    phi_ = Power(T(p_), (e_ - 1)) * (p_ - 1);
    f_.resize(pe + 1, 1);
    for (int i = 1; i <= pe; ++i) {
      if (i % p_ == 0) {
        f_[i] = f_[i - 1];
      } else {
        f_[i] = MulMod(f_[i - 1], i, mod_);
      }
    }

    ppower_.resize(e_);
    ppower_[0] = 1;
    for (int i = 1; i < e_; ++i) {
      ppower_[i] = MulMod(ppower_[i - 1], p, mod_);
    }
  }

  // Note: if i % p == 0, then the contribution of i is 1.
  T FactorialModInternal(const T& n) const {
    T u = n / p_;
    T v = n % p_;
    T r = (e_ + 1) >> 1;

    T ret = 1;
    const T u2 = u * u;

    for (int j = 1; j <= r; ++j) {
      T beta_numer = u;
      T beta_denom = j;
      const int j2 = j * j;
      for (int i = 1; i <= r; ++i) {
        if (i != j) {
          beta_numer *= u2 - i * i;
          beta_denom *= j2 - i * i;
        }
      }
      T beta = beta_numer / beta_denom % phi_;
      if (IntSign(beta) < 0) {
        beta += phi_;
      }
      ret = MulMod(ret, PowerMod(f_[j * p_], beta, mod_), mod_);
    }

    if (p_ == 2) {
      T left_mod4 = ((LowerBits(u * p_ + 1) & 4) >> 1) + 1;
      T right_mod4 = LowerBits(ret) & 3;
      if (left_mod4 != right_mod4) {
        ret = (mod_ - ret) % mod_;
      }
    }

    ret = MulMod(ret, f_[v], mod_);

    for (int j = 1; j < e_; ++j) {
      T base = MulMod(f_[j * p_ + v],
                      ModInv(MulMod(f_[v], f_[j * p_], mod_), mod_), mod_);
      T alpha_numer = u;
      T alpha_denom = j;
      for (int i = 1; i < e_; ++i) {
        if (i != j) {
          alpha_numer *= u - i;
          alpha_denom *= j - i;
        }
      }
      T alpha = alpha_numer / alpha_denom % phi_;
      if (IntSign(alpha) < 0) alpha += phi_;
      ret = MulMod(ret, PowerMod(base, alpha, mod_), mod_);
    }

    return ret;
  }

  // Note: if i = p^a q where (p, q) = 1, then the contribution of i is q.
  T FactorialMod(T n) const {
    T result = FactorialModInternal(n);
    for (n /= p_; n; n /= p_) {
      result = MulMod(result, FactorialModInternal(n), mod_);
    }
    return result;
  }

  T operator()(T n, T m) const { return Cal(n, m); }

  T Comb(T n, T m) const { return Cal(n, m); }

  T Cal(T n, T m) const {
    if (m < 0 || m > n) return 0;
    if (m == 0 || n == m) return 1;
    T pp = 0;
    for (T nn = n / p_, mm = m / p_, dd = (n - m) / p_; nn;
         nn /= p_, mm /= p_, dd /= p_) {
      pp += nn - mm - dd;
    }
    if (pp >= e_) return 0;
    T u = FactorialMod(n);
    T v = MulMod(FactorialMod(m), FactorialMod(n - m), mod_);
    if (pp) u = MulMod(u, ppower_[pp], mod_);
    return MulMod(u, ModInv(v, mod_), mod_);
  }

 private:
  std::vector<T> f_;
  std::vector<T> ppower_;
  T p_;
  T e_;
  T mod_;
  T phi_;
};

// Computes Binomial(a, b) mod p^2
template <typename T>
struct CombModerPrimeSquare {
  CombModerPrimeSquare(const T p) : p_(p) {
    mod_ = p_ * p_;
    f_.resize(p_);
    f_[0] = 1 % mod_;

    for (T i = 1; i < p_; ++i) {
      f_[i] = MulMod(f_[i - 1], i, mod_);
    }

    h_.resize(p_);
    InitInverse(h_.begin(), p_ - 1, p_);
    for (T i = 1; i < p_; ++i) {
      h_[i] = AddMod(h_[i - 1], h_[i], p_);
    }
  }

  // Note: if i = p^a q where (p, q) = 1, then the contribution of i is q.
  T FactorialMod(T n) const {
    T result = 1;
    for (; n; n /= p_) {
      const T t0 = Mod(n / p_, mod_);
      const T t1 = MulMod(MulMod(f_[n % p_], p_, mod_),
                          MulMod(h_[n % p_], t0, mod_), mod_);
      const T t2 = PowerMod(f_[p_ - 1], n / p_, mod_);
      const T t = MulMod(AddMod(f_[n % p_], t1, mod_), t2, mod_);
      result = MulMod(result, t, mod_);
    }
    return result;
  }

  T operator()(T n, T m) const { return Cal(n, m); }

  T Comb(T n, T m) const { return Cal(n, m); }

  T Cal(T n, T m) const {
    if (m < 0 || m > n) return 0;
    if (m == 0 || n == m) return 1;
    T pp = 0;
    for (T nn = n / p_, mm = m / p_, dd = (n - m) / p_; nn;
         nn /= p_, mm /= p_, dd /= p_) {
      pp += nn - mm - dd;
    }
    if (pp >= 2) return 0;
    T u = FactorialMod(n);
    T v = MulMod(FactorialMod(m), FactorialMod(n - m), mod_);
    if (pp) u = MulMod(u, p_, mod_);
    return MulMod(u, ModInv(v, mod_), mod_);
  }

 private:
  std::vector<T> f_;
  std::vector<T> h_;
  T p_;
  T mod_;
};

// Calculates (1^k + 2^k + ... + n^k) % mod based on k! * Stirling2.
// https://oeis.org/A019538
// https://blog.csdn.net/xianhaoming/article/details/80390426
template <typename T = int64>
struct PowerSumModer {
  PowerSumModer(int64 mod, int maxk = 128) : mod_(mod), maxk_(maxk) {
    Init(maxk);
  }

  ~PowerSumModer() = default;

  void Init(int maxk = 128) {
    maxk_ = maxk;

    p_ = std::vector<std::vector<int64>>(maxk_ + 1);
    for (int i = 0; i <= maxk_; ++i) {
      p_[i] = std::vector<int64>(maxk_ + 1);
    }

    invs_ = std::vector<int64>(maxk_ + 2);

    InitInverse(std::data(invs_), maxk_ + 1, mod_);
    for (int i = 0; i <= maxk_; ++i) {
      for (int j = 0; j <= maxk_; ++j) {
        p_[i][j] = 0;
      }
    }
    for (int i = 0; i <= maxk_; ++i) p_[i][1] = 1;
    for (int i = 1; i <= maxk_; ++i) {
      for (int j = 1; j < i; ++j) {
        int64 t = p_[i - 1][j - 1] + p_[i - 1][j];
        if (t >= mod_) t -= mod_;
        p_[i][j] = MulMod(j, t, mod_);
      }
      p_[i][i] = 1;
      for (int j = 1; j <= i; ++j) {
        p_[i][i] = MulMod(p_[i][i], j, mod_);
      }
    }
  }

  T operator()(int64 n, int64 k) const { return Cal(n, k); }

  // n + 1, n, ..., n-k+1 is not divisible by mod
  // 2, 3, ..., k+1 is not divisible by mod
  T Cal(int64 n, int64 k) const {
    PE_ASSERT(k <= maxk_);
    if (k == 0) {
      return n % mod_;
    }

    int64 ret = 0;
    int64 c = (n + 1) % mod_;
    for (int i = 1; i <= k; ++i) {
      // ret += P[k][i] * ShortCombMod(n + 1, i + 1, mod) % mod;
      c = MulMod(c, Mod(n + 1 - i, mod_), mod_);
      c = MulMod(c, invs_[i + 1], mod_);
      if (c == 0) {
        break;
      }
      ret += MulMod(p_[k][i], c, mod_);
      if (ret >= mod_) ret -= mod_;
    }
    return ret % mod_;
  }

  int64 CalSafe(int64 n, int64 k) {
    PE_ASSERT(k <= maxk_);
    if (k == 0) {
      return n % mod_;
    }

    auto [A, B] = ExtractFactor(n + 1, mod_);

    int64 ret = 0;
    int64 c = A;
    int64 d = B;
    for (int i = 1; i <= k; ++i) {
      // ret += P[k][i] * ShortCombMod(n + 1, i + 1, mod) % mod;
      std::tie(A, B) = ExtractFactor(n + 1 - i, mod_);
      d += B;
      c = MulMod(c, Mod(A, mod_), mod_);

      std::tie(A, B) = ExtractFactor(i + 1, mod_);
      d -= B;
      c = MulMod(c, invs_[A], mod_);

      if (c == 0) {
        break;
      }

      if (d == 0) {
        ret += MulMod(p_[k][i], c, mod_);
        if (ret >= mod_) ret -= mod_;
      }
    }
    return ret % mod_;
  }

 private:
  int64 mod_;
  int maxk_;
  std::vector<std::vector<int64>> p_;
  std::vector<int64> invs_;
};

#if PE_HAS_INT128
// Counts the number in the pattern of p1^e1 p2^e2 p3^e3... no more than n.
struct PatternNumberCounter {
  PatternNumberCounter() = default;

  ~PatternNumberCounter() { Release(); }

  void Release() {
    if (is_prime_used_ != nullptr) {
      delete[] is_prime_used_;
      is_prime_used_ = nullptr;
    }
  }

  // prime_cnt: int a given pattern, we only consider the first prime_cnt
  // primes.
  // pi_pivot: use pre-computed results in an array, if m <= pi_pivot.
  void Init(int prime_cnt, int pi_pivot = 0) {
    PE_ASSERT(prime_cnt > 0);
    Release();

    prime_cnt_ = prime_cnt;
    is_prime_used_ = new char[prime_cnt];
    if (pi_pivot == 0) {
      PE_ASSERT(pe::plist != nullptr);
      pi_pivot = pe::plist[prime_cnt - 1];
    }
    cached_pi_.Init(pi_pivot);
  }

  int128 DfsPattern(const int start, const int id, const int pattern_length,
                    const std::vector<int>& pattern, const int128 remain) {
    int128 ret = 0;
    if (id == pattern_length - 1) {
      const int64 t = RootI(remain, pattern[pattern_length - 1]);
      const int64 how_many = cached_pi_(t);
      const int64 idx = how_many - 1;
      if (idx < start) return 0;
      int64 have = idx - start + 1;
      for (int i = 0; i < top_; ++i) {
        if (used_prime_idx_[i] >= start && used_prime_idx_[i] <= idx) {
          --have;
        }
      }
      return have > 0 ? have : 0;
    }

    int e = pattern[id];
    for (int j = id + 1; j < pattern_length; ++j) {
      if (pattern[j] == pattern[id]) {
        e += pattern[id];
      } else {
        break;
      }
    }

    for (int i = start;; ++i) {
      if (is_prime_used_[i] == 0) {
        int128 tmp = remain;
        for (int j = 0; j < e; ++j) tmp /= plist[i];
        if (tmp == 0) break;

        is_prime_used_[i] = 1;
        used_prime_idx_[top_++] = i;
        const int128 v = Power<int128, int>(plist[i], pattern[id]);
        ret += DfsPattern(pattern[id + 1] == pattern[id] ? i + 1 : 0, id + 1,
                          pattern_length, pattern, remain / v);
        --top_;
        is_prime_used_[i] = 0;
      }
    }
    return ret;
  }

  int128 operator()(const std::vector<int>& pattern, int64 k) {
    return Cal(pattern, k);
  }

  int128 Cal(std::vector<int> pattern, int128 n) {
    std::sort(std::begin(pattern), std::end(pattern));
    std::reverse(std::begin(pattern), std::end(pattern));

    top_ = 0;
    return DfsPattern(0, 0, static_cast<int>(std::size(pattern)), pattern, n);
  }

  int prime_cnt_;
  int used_prime_idx_[1024];       // the index of used primes.
  char* is_prime_used_ = nullptr;  // is the ith prime used
  int top_;
  CachedPi cached_pi_;
};
#endif

struct MVVHistory {
  int64 p;   // value of a prime factor.
  int ip;    // index of a prime factor.
  int e;     // exponential of a prime rfactor.
  int64 pd;  // p^e
};

// Visit all values of x / (max primer factor of x) for x no more than n.
template <typename D, typename RT = int64, int TN = 1>
struct MValueVisitor {
  // If top = 0, then imp = -1, vmp = 1, emp = 0.
  RT Visit(int64 n, int64 val, int imp, int64 vmp, int emp, MVVHistory* his,
           int top) {
    return 0;
  }

  RT Dfs(int limit, int64 n, int64 val, int imp, int64 vmp, int emp,
         MVVHistory* history, int top) {
    RT ret = static_cast<D&>(*this).Visit(n, val, imp, vmp, emp, history, top);
    for (int i = 0; i < limit; ++i) {
      const int64 p = plist[i];
      const int next_imp = imp == -1 ? i : imp;
      const int64 next_vmp = imp == -1 ? p : vmp;
      const int64 val_limit = n / p / next_vmp;
      if (val > val_limit) break;
      history[top].ip = i;
      history[top].p = p;
      history[top].e = 1;
      history[top].pd = p;
      int& e = history[top].e;
      int64& pd = history[top].pd;
      for (int64 next_val = val * p;; ++e) {
        ret += Dfs(i, n, next_val, next_imp, next_vmp, next_vmp == p ? e : emp,
                   history, top + 1);
        if (next_val > val_limit) break;
        pd *= p;
        next_val *= p;
      }
    }
    return ret;
  }

  RT DfsLevel0(int limit, int64 n) {
    constexpr int64 val = 1;
    constexpr int imp = -1;
    constexpr int64 vmp = 1;
    constexpr int emp = 0;
#if ENABLE_OPENMP
    if constexpr (TN > 1) {
      MVVHistory history[TN][128];
      RT ret =
          static_cast<D&>(*this).Visit(n, val, imp, vmp, emp, history[0], 0);
      PSum<RT> sum_helper;
#pragma omp parallel for schedule(dynamic, 1) num_threads(TN)
      for (int i = 0; i < limit; ++i) {
        MVVHistory* his = history[tid()];
        const int64 p = plist[i];
        const int64 val_limit = n / p / p;
        if (val > val_limit) continue;
        his[0].ip = i;
        his[0].p = p;
        his[0].e = 1;
        his[0].pd = p;
        int& e = his[0].e;
        int64& pd = his[0].pd;
        for (int64 next_val = val * p;; ++e) {
          sum_helper += Dfs(i, n, next_val, i, p, e, his, 1);
          if (next_val > val_limit) break;
          pd *= p;
          next_val *= p;
        }
      }
      ret += sum_helper.value();
      return ret;
    } else
#endif
    {
      MVVHistory history[128];
      return Dfs(limit, n, val, imp, vmp, emp, history, 0);
    }
  }

  void Init(int64 n) {}
  void Done() {}

  RT Cal(int64 n) {
    static_cast<D&>(*this).Init(n);
    RT ret = DfsLevel0(FindPrimeIdxSg(n), n);
    static_cast<D&>(*this).Done();
    return ret;
  }
};

template <typename RT = int64, int TN = 1>
struct MValueVisitorHelper
    : public MValueVisitor<MValueVisitorHelper<RT, TN>, RT, TN> {
 public:
  using VisitorType = std::function<RT(int64 n, int64 val, int imp, int64 vmp,
                                       int emp, MVVHistory* his, int top)>;

  MValueVisitorHelper(const VisitorType& visitor) : visitor_(visitor) {}

  RT Visit(int64 n, int64 val, int imp, int64 vmp, int emp, MVVHistory* his,
           int top) {
    return visitor_(n, val, imp, vmp, emp, his, top);
  }

 private:
  VisitorType visitor_;
};

template <typename RT>
RT ForMValues(
    int64 n,
    const std::function<RT(int64 n, int64 val, int imp, int64 vmp, int emp,
                           MVVHistory* his, int top)>& visitor) {
  return MValueVisitorHelper<RT>(visitor).Cal(n);
}

// Visit all values of x / (max primer factor of x) for x no more than n.
template <typename D, typename RT = int64, typename AT = int64, int TN = 1>
struct MValueVisitorEx {
  // If top = 0, then imp = -1, vmp = 1, emp = 0.
  RT Visit(int64 n, int64 val, int imp, int64 vmp, int emp, MVVHistory* his,
           int top, AT now, AT now1) {
    return 0;
  }

  RT Dfs(int limit, int64 n, int64 val, int imp, int64 vmp, int emp,
         MVVHistory* history, int top, AT now, AT now1) {
    RT ret = static_cast<D&>(*this).Visit(n, val, imp, vmp, emp, history, top,
                                          now, now1);
    for (int i = 0; i < limit; ++i) {
      const int64 p = plist[i];
      const int next_imp = imp == -1 ? i : imp;
      const int64 next_vmp = imp == -1 ? p : vmp;
      const int64 val_limit = n / p / next_vmp;
      if (val > val_limit) break;
      history[top].ip = i;
      history[top].p = p;
      history[top].e = 1;
      history[top].pd = p;
      int& e = history[top].e;
      int64& pd = history[top].pd;
      for (int64 next_val = val * p;; ++e) {
        const AT next_now =
            static_cast<D&>(*this).AccumulateValue(now, p, e, pd);
        const AT next_now1 =
            p == vmp ? now1
                     : static_cast<D&>(*this).AccumulateValue(now1, p, e, pd);
        ret += Dfs(i, n, next_val, next_imp, next_vmp, next_vmp == p ? e : emp,
                   history, top + 1, next_now, next_now1);
        if (next_val > val_limit) break;
        pd *= p;
        next_val *= p;
      }
    }
    return ret;
  }

  RT DfsLevel0(int limit, int64 n) {
    constexpr int64 val = 1;
    constexpr int imp = -1;
    constexpr int64 vmp = 1;
    constexpr int emp = 0;
    const AT init_value = static_cast<D&>(*this).GetInitValue();
#if ENABLE_OPENMP
    if constexpr (TN > 1) {
      MVVHistory history[TN][128];
      RT ret = static_cast<D&>(*this).Visit(n, val, imp, vmp, emp, history[0],
                                            0, init_value, init_value);
      PSum<RT> sum_helper;
#pragma omp parallel for schedule(dynamic, 1) num_threads(TN)
      for (int i = 0; i < limit; ++i) {
        MVVHistory* his = history[tid()];
        const int64 p = plist[i];
        const int64 val_limit = n / p / p;
        if (val > val_limit) continue;
        his[0].ip = i;
        his[0].p = p;
        his[0].e = 1;
        his[0].pd = p;
        int& e = his[0].e;
        int64& pd = his[0].pd;
        for (int64 next_val = val * p;; ++e) {
          sum_helper +=
              Dfs(i, n, next_val, i, p, e, his, 1,
                  static_cast<D&>(*this).AccumulateValue(init_value, p, e, pd),
                  init_value);
          if (next_val > val_limit) break;
          pd *= p;
          next_val *= p;
        }
      }
      ret += sum_helper.value();
      return ret;
    } else
#endif
    {
      MVVHistory history[128];
      return Dfs(limit, n, val, imp, vmp, emp, history, 0, init_value,
                 init_value);
    }
  }

  void Init(int64 n) {}
  void Done() {}

  AT GetInitValue() { return 1; }
  AT AccumulateValue(AT init, int64 p, int64 e, int64 pd) { return init; }

  RT Cal(int64 n) {
    static_cast<D&>(*this).Init(n);
    RT ret = DfsLevel0(FindPrimeIdxSg(n), n);
    static_cast<D&>(*this).Done();
    return ret;
  }
};

template <typename D, typename RT = int64, int TN = 1,
          bool small_to_large = false>
struct MValueBase;

// See example/multiplicative_function_prefix_sum.c
template <typename D, typename RT, int TN>
struct MValueBase<D, RT, TN, false> {
  RT Batch(int64 n, int64 val, int imp, int64 vmp, int emp, RT now, RT now1) {
    RT ret = 0;
    int64 remain = n / val;
    // we have remain >= vmp
    // handle val * q where q > vmp
    if (remain > vmp) {
      ret += now * static_cast<D&>(*this).BatchF(imp, vmp, remain);
    }
    if (val > 1) {
      // handle val * vmp
      ret += now1 * static_cast<D&>(*this).F(vmp, emp + 1);
    } else {
      // handle f(1)
      ret += 1;
    }
    return ret;
  }  // namespace pe

  RT Dfs(int limit, int64 n, int64 val, int imp, int64 vmp, int emp, RT now,
         RT now1) {
    RT ret = static_cast<D&>(*this).Batch(n, val, imp, vmp, emp, now, now1);
#if ENABLE_OPENMP
    if (val == 1 && TN > 1) {
      PSum<RT> sum_helper;
#pragma omp parallel for schedule(dynamic, 1) num_threads(TN)
      for (int i = 0; i < limit; ++i) {
        const int64 p = plist[i];
        const int next_imp = imp == -1 ? i : imp;
        const int64 next_vmp = imp == -1 ? p : vmp;
        const int64 val_limit = n / (p * next_vmp);
        int e = 1;
        for (int64 next_val = val * p;; ++e) {
          RT t = static_cast<D&>(*this).F(p, e);
          sum_helper +=
              Dfs(i, n, next_val, next_imp, next_vmp, imp == -1 ? e : emp,
                  now * t, imp == -1 ? 1 : now1 * t);
          if (next_val > val_limit) break;
          next_val *= p;
        }
      }
      ret += sum_helper.value();
    } else
#endif
    {
      for (int i = 0; i < limit; ++i) {
        const int64 p = plist[i];
        const int next_imp = imp == -1 ? i : imp;
        const int64 next_vmp = imp == -1 ? p : vmp;
        const int64 val_limit = n / (p * next_vmp);
        if (val > val_limit) break;
        int e = 1;
        for (int64 next_val = val * p;; ++e) {
          RT t = static_cast<D&>(*this).F(p, e);
          ret += Dfs(i, n, next_val, next_imp, next_vmp, imp == -1 ? e : emp,
                     now * t, imp == -1 ? 1 : now1 * t);
          if (next_val > val_limit) break;
          next_val *= p;
        }
      }
    }
    return ret;
  }

  void Init(int64 n) {}
  void Done() {}

  RT F(int64 /*p*/, int64 /*e*/) { return 1; }
  RT BatchF(int /*imp*/, int64 /*vmp*/, int64 /*remain*/) { return 1; }

  RT Cal(int64 n) {
    static_cast<D&>(*this).Init(n);
    RT ret = Dfs(FindPrimeIdxSg(n), n, 1, -1, 1, 0, 1, 1);
    static_cast<D&>(*this).Done();
    return ret;
  }
};

template <typename D, typename RT, int TN>
struct MValueBase<D, RT, TN, true> {
  RT Batch(int64 n, int64 val, int imp, int64 vmp, int emp, RT now, RT now1) {
    RT ret = 0;
    int64 remain = n / val;
    // we have remain >= vmp
    // handle val * q where q > vmp
    if (remain > vmp) {
      ret += now * static_cast<D&>(*this).BatchF(imp, vmp, remain);
    }
    if (val > 1) {
      // handle val * vmp
      ret += now1 * static_cast<D&>(*this).F(vmp, emp + 1);
    } else {
      // handle f(1)
      ret += 1;
    }
    return ret;
  }

  RT Dfs(int start, int limit, int64 n, int64 val, int imp, int64 vmp, int emp,
         RT now, RT now1) {
    RT ret = static_cast<D&>(*this).Batch(n, val, imp, vmp, emp, now, now1);
#if ENABLE_OPENMP
    if (val == 1 && TN > 1) {
      PSum<RT> sum_helper;
#pragma omp parallel for schedule(dynamic, 1) num_threads(TN)
      for (int i = start; i < limit; ++i) {
        const int64 p = plist[i];
        const int64 val_limit = n / (p * p);
        int e = 1;
        for (int64 next_val = val * p;; ++e) {
          RT t = static_cast<D&>(*this).F(p, e);
          sum_helper += Dfs(i + 1, limit, n, next_val, i, p, e, now * t, now);
          if (next_val > val_limit) break;
          next_val *= p;
        }
      }
      ret += sum_helper.value();
    } else
#endif
    {
      for (int i = start; i < limit; ++i) {
        const int64 p = plist[i];
        const int64 val_limit = n / (p * p);
        if (val > val_limit) break;
        int e = 1;
        for (int64 next_val = val * p;; ++e) {
          RT t = static_cast<D&>(*this).F(p, e);
          ret += Dfs(i + 1, limit, n, next_val, i, p, e, now * t, now);
          if (next_val > val_limit) break;
          next_val *= p;
        }
      }
    }

    return ret;
  }

  void Init(int64 n) {}
  void Done() {}

  RT F(int64 /*p*/, int64 /*e*/) { return 1; }
  RT BatchF(int /*imp*/, int64 /*vmp*/, int64 /*remain*/) { return 1; }

  RT Cal(int64 n) {
    static_cast<D&>(*this).Init(n);
    RT ret = Dfs(0, FindPrimeIdxSg(n), n, 1, -1, 1, 0, 1, 1);
    static_cast<D&>(*this).Done();
    return ret;
  }
};

// The lite version assumes that F(p, e) is only related to e.
// In other words, F(p1, e) = F(p2, e) for two different primes p1, p2.
template <typename D, typename RT = int64, int TN = 1,
          bool small_to_large = false>
struct MValueBaseLite : public MValueBase<D, RT, TN, small_to_large> {
  RT BatchF(int imp, int64 /*vmp*/, int64 remain) {
    return static_cast<D&>(*this).F(2, 1) * RT(dva[remain] - (imp + 1));
  }
  void Init(int64 n) { dva = PrimeS0Ex<int64>(n); }
  DVA<int64> dva;
};

// Returns the number of integer solutions of
// x^2+y^2=z^2 where 0 < x < y, 0 < z <= n.
// See https://oeis.org/A101930
int64 CountPythagoreanTriple(int64 n) {
  // f(i) = 4 prod(e_i + 1, p_i%4==1) #(write i as sum of two squares)
  // s = sum(f(i^2), i=1..n)
  // return (s - 4 * n) / 8
  auto _ = PrimeS0PMod<int64>(n, 4);
  auto ps1 = std::move(_[1]);
  auto ps3 = std::move(_[3]);
  auto compute = [&](int64 n, int64 val, int /*imp*/, int64 vmp, int /*emp*/,
                     MVVHistory* his, int top) -> int64 {
    if (val == 1) {
      return 3 * ps1[n] + ps3[n] + 2;  // 2 is for 1 and 2.
    }
    int64 ret = 0;
    int64 t = 1;
    for (int i = 0; i < top; ++i) {
      if (his[i].p % 4 == 1) t *= 2 * his[i].e + 1;
    }
    if (his[0].p % 4 == 1) {
      ret += t / (2 * his[0].e + 1) * (2 * his[0].e + 3);
    } else {
      ret += t;
    }
    ret += (ps1[n / val] - ps1[vmp]) * t * 3;
    ret += (ps3[n / val] - ps3[vmp]) * t;
    return ret;
  };

  return (ForMValues<int64>(n, compute) - n) >> 1;
}

// Returns the number of integer solutions of
// x^2+y^2=z^2 where 0 < x < y, 0 < z <= n.
// See https://oeis.org/A101930
int64 CountPythagoreanTripleEx(int64 n) {
  auto _ = PrimeS0PMod<int64>(n, 4);
  auto ps1 = std::move(_[1]);
  auto ps3 = std::move(_[3]);
  std::function<int64(int, int64, int64, int64, int, int64)> dfs =
      [&](int limit, int64 n, int64 val, int64 c, int evmp,
          int64 vmp) -> int64 {
    int64 ret = 0;
    if (val == 1) {
      ret = 3 * ps1[n] + ps3[n] + 2;  // 2 is for 1 and 2.
    } else {
      ret += (ps1[n / val] - ps1[vmp]) * c * 3;
      ret += (ps3[n / val] - ps3[vmp]) * c;
      if (vmp % 4 == 1) {
        ret += c / (2 * evmp + 1) * (2 * evmp + 3);
      } else {
        ret += c;
      }
    }
    for (int i = 0; i < limit; ++i) {
      const int64 p = plist[i];
      const int64 next_vmp = vmp == 0 ? p : vmp;
      const int64 val_limit = n / p / next_vmp;
      if (val > val_limit) break;
      int e = 1;
      int should = p % 4 == 1;
      for (int64 next_val = val * p;; ++e) {
        ret += dfs(i, n, next_val, should ? c * (2 * e + 1) : c,
                   next_vmp == p ? e : evmp, next_vmp);
        if (next_val > val_limit) break;
        next_val *= p;
      }
    }
    return ret;
  };
  return (dfs(pcnt, n, 1, 1, 0, 0) - n) >> 1;
}

// Counts the perfect power no more than n.
template <typename T>
struct PerfectPowerCounter {
  PerfectPowerCounter(int pivot = 1000000) : pivot_(pivot) { Init(); }

  ~PerfectPowerCounter() { delete[] pre_; }

  void Init() {
    PE_ASSERT(pivot_ < (1 << 20));
    pre_ = new int[pivot_][20];
    std::fill(pre_[0], pre_[0] + 20, 0);
    pre_[0][0] = 1;
    for (int i = 2; i <= pivot_; ++i) {
      int d = 0;
      for (auto& iter : Factorize(i)) d = Gcd(d, iter.second);
      for (int j = 0; j <= 19; ++j) pre_[i][j] = pre_[i - 1][j];
      pre_[i][d]++;
    }
  }

  // Use f(x) to denote Gcd of exponentions of x.
  // i.e if x = p1^e1 * p2^e2 * p3^e3, then f(x) = Gcd(e1, e2, e3).
  // f(1) = 1
  // This method returns # {x | f(x) = d, 1 <= x <= n}
  // n < 2^128, d >= 0
  T Cal(T n, int d) {
    if (n <= pivot_) {
      if (d < 20) {
        return pre_[n][d];
      } else {
        return 0;
      }
    }
    if (d == 0) return n >= 1 ? 1 : 0;
    if (d > 128) return 0;

    std::pair<T, int> key = {n, d};
    auto where = mem_.find(key);
    if (where != mem_.end()) return where->second;

    if (d == 1) {
      T ret = n - 1;
      for (int i = 2; i < 128; ++i) {
        ret -= Cal(n, i);
      }
      return mem_[key] = ret;
    }

    return mem_[key] = Cal(RootI<T>(n, d), 1);
  }

 private:
  int pivot_;
  int (*pre_)[20];
  std::map<std::pair<T, int>, T> mem_;
};

// Counts #{i | i ∤ L[j] and 1 <= i <= n}.
// It's NOT required that the integers in L are pairwise coprime.
// See pe466, Lucy_Hedgehog's post.
template <typename T>
struct NotDivCounter {
  T NotDivCoprimeImpl(T n, const std::vector<int64>& L, int i) {
    T ret = n;
    for (int j = 0; j < i; ++j) {
      const int64 x = L[j];
      if (x > n) break;
      ret -= NotDivCoprimeImpl(n / x, L, j);
    }
    return ret;
  }

  // Counts #{i | i ∤ L[j] and 1 <= i <= n}.
  // It's required that the integers in L are pairwise coprime.
  T NotDivCoprime(T n, const std::vector<int64>& L) {
    const int size = static_cast<int>(std::size(L));
    if (size == 0) return n;
    if (CheckSorted(L)) return NotDivCoprimeImpl(n, L, size);

    std::vector<int64> LL(L);
    std::sort(LL.begin(), LL.end());
    return NotDivCoprimeImpl(n, LL, size);
  }

  T NotDivImpl(T n, const std::vector<int64>& L) {
    const int size = static_cast<int>(std::size(L));
    if (size == 0) return n;

    std::vector<int> flag(size, 0);
    for (int i = 0; i < size; ++i) {
      for (int j = i + 1; j < size; ++j) {
        if (L[j] % L[i] == 0) flag[j] = 1;
      }
    }
    std::vector<int64> R;
    for (int i = 0; i < size; ++i) {
      if (flag[i] == 0) R.push_back(L[i]);
    }

    for (int i = 0; i < pcnt; ++i) {
      const int64 p = plist[i];
      if (p > L[size - 1]) break;

      std::vector<int64> D;
      for (int64& iter : R) {
        if (iter % p == 0) D.push_back(iter);
      }
      if (static_cast<int64>(std::size(D)) < 2) continue;
      std::vector<int64> C;
      for (int64& iter : R) {
        if (iter % p) C.push_back(iter);
      }
      std::vector<int64> B(C);
      for (int64& iter : D) B.push_back(iter / p);
      std::sort(B.begin(), B.end());
      return NotDivImpl(n, C) - NotDivImpl(n / p, C) + NotDivImpl(n / p, B);
    }

    std::pair<T, std::vector<int64>> key = {n, R};
    auto where = mem_.find(key);
    if (where != mem_.end()) return where->second;
    return mem_[key] = NotDivCoprime(n, R);
  }

  // Counts #{i | i ∤ L[j] and 1 <= i <= n}.
  // It's NOT required that the integers in L are pairwise coprime.
  T NotDiv(T n, const std::vector<int64>& L) {
    const int size = static_cast<int>(std::size(L));
    if (size == 0) return n;
    if (CheckSorted(L)) return NotDivImpl(n, L);

    std::vector<int64> LL(L);
    std::sort(LL.begin(), LL.end());
    return NotDivImpl(n, LL);
  }

  int CheckSorted(const std::vector<int64>& L) {
    const int size = static_cast<int>(std::size(L));
    for (int i = 0; i + 1 < size; ++i) {
      if (L[i] > L[i + 1]) {
        return 0;
      }
    }
    return 1;
  }

 private:
  std::map<std::pair<T, std::vector<int64>>, T> mem_;
};

namespace internal {
// Counts #{i | i ∤ L[j] and 1 <= i <= n}.
// It's required that the integers in L are pairwise coprime.
template <typename T>
SL T CountNotDivImpl(T n, const std::vector<T>& L, T* mask, int* bc) {
  if (n <= 0) return 0;
  const int size = static_cast<int>(std::size(L));
  if (size == 0) return n;

  const int limit = 1 << size;
  T ret = 0;
  for (int i = 0; i < limit; ++i) {
    if (bc[i] & 1) {
      ret -= n / mask[i];
    } else {
      ret += n / mask[i];
    }
  }

  return ret;
}
}  // namespace internal

// Counts #{i | i ∤ L[j] and 1 <= i <= n}.
// It's required that the integers in L are pairwise coprime.
template <typename T>
SL T CountNotDiv(T n, const std::vector<T>& L, int* bc) {
  if (n <= 0) return n;
  const int size = static_cast<int>(std::size(L));
  if (size == 0) return n;

  const int limit = 1 << size;
  std::vector<T> mask(limit);
  mask[0] = 1;
  for (int i = 0; i < size; ++i) {
    mask[1 << i] = L[i];
  }
  for (int i = 1; i < limit; ++i) {
    if (i & (i - 1)) {
      const int f = i & -i;
      mask[i] = mask[i ^ f] * mask[f];
    }
  }
  return internal::CountNotDivImpl<T>(n, L, std::data(mask), bc);
}

// Counts #{i | i ∤ L[j] and 1 <= i <= n}.
// It's required that the integers in L are pairwise coprime.
template <typename T>
SL T CountNotDiv(T n, const std::vector<T>& L) {
  if (n <= 0) return n;
  const int size = static_cast<int>(std::size(L));
  if (size == 0) return n;

  const int limit = 1 << size;
  std::vector<T> mask(limit);
  std::vector<int> bc(limit);
  mask[0] = 1;
  for (int i = 0; i < size; ++i) {
    mask[1 << i] = L[i];
  }
  bc[0] = 0;
  for (int i = 1; i < limit; ++i) {
    if (i & (i - 1)) {
      const int f = i & -i;
      mask[i] = mask[i ^ f] * mask[f];
    }
    bc[i] = bc[i >> 1] + (i & 1);
  }
  return internal::CountNotDivImpl(n, L, std::data(mask), std::data(bc));
}

// Counts the number of integers accepted by a DFA.
// Case 1. Counts the numbers which are no more than a given upper bound.
// Case 2. Finds the kth number.
//
// DfaCounter<Count type> dc;
//
// Build DFA:
// dc.Init(state count, number base, max len);
// dc.AddTrans(src, dig, dest);
//
// Mark acepted status:
// dc.MarkTargetState(state);
//
// Build internal helper data structures.
// [optional] dc.Prepare();
//
// Calcuate the result:
// dc.Cal(upper bound);
// dc.FindKth(k, upper bound);
//
// Example: examples/dfa_counter.c
template <typename CT>
struct DfaCounter {
  // Call set_count_each_len(1) if the dfa doesn't count the numbers with
  // leading zeros.
  DfaCounter& set_count_each_len(int count_each_len) {
    count_each_len_ = count_each_len;
    return *this;
  }

  DfaCounter& Init(int state_count, int number_base, int max_len) {
    state_count_ = state_count;
    number_base_ = number_base;
    max_len_ = max_len;

    dfa_.Reset({state_count, number_base_});

    dp_.Reset({max_len + 1, state_count});
    acc_.resize(max_len + 1);

    target_state_.resize(state_count);
    std::fill(target_state_.begin(), target_state_.end(), 0);

    prepared_ = 0;

    return *this;
  }

  DfaCounter& AddTrans(int s, int d, int t) {
    dfa_[s][d] = t;
    return *this;
  }

  DfaCounter& MarkTargetState(int s, int v = 1) {
    target_state_[s] = v;
    return *this;
  }

  void Prepare() {
    for (int i = 0; i < state_count_; ++i) {
      dp_[0][i] = target_state_[i];
    }

    acc_[0] = 0;
    for (int i = 1; i <= max_len_; ++i) {
      for (int j = 0; j < state_count_; ++j) {
        auto to = dfa_[j];
        CT tmp = 0;
        for (int k = 0; k < number_base_; ++k) {
          tmp += dp_[i - 1][to[k]];
        }
        dp_[i][j] = tmp;
      }
      acc_[i] = dp_[i][0] + acc_[i - 1];
    }

    prepared_ = 1;
  }

  template <typename U>
  CT Cal(U n) {
    std::vector<int> dig;
    for (U x = n; !IsZero(x); x /= number_base_) {
      dig.push_back(ToInt<int>(x % number_base_));
    }
    return Cal(dig);
  }

  CT Cal(const std::vector<int>& dig) {
    if (prepared_ == 0) {
      Prepare();
      prepared_ = 1;
    }

    const int len = std::size(dig);
    PE_ASSERT(len <= max_len_);

    CT result = 0;
    if (count_each_len_) {
      for (int i = 1; i < len; ++i) {
        result += dp_[i][0];
      }
    }

    int state = 0;
    for (int curr = len - 1; curr >= 0; --curr) {
      const int me = dig[curr];
      for (int i = 0; i < me; ++i) {
        result += dp_[curr][dfa_[state][i]];
      }
      state = dfa_[state][me];
    }
    if (target_state_[state]) {
      result += 1;
    }
    return result;
  }

  int FindLen(CT k) {
    int len = 0;
    if (count_each_len_ == 0) {
      while (dp_[len][0] < k && len + 1 <= max_len_) {
        ++len;
      }
      PE_ASSERT(dp_[len][0] >= k);
    } else {
      while (acc_[len] < k && len + 1 <= max_len_) {
        ++len;
      }
      PE_ASSERT(acc_[len] >= k);
    }
    return len;
  }

  template <typename U>
  U CalKth(CT k, U unused = 0) {
    if (prepared_ == 0) {
      Prepare();
      prepared_ = 1;
    }

    U l = 1, r = 0;
    for (int len = FindLen(k); len--;) {
      r = r * number_base_ + number_base_ - 1;
    }
    while (l <= r) {
      U mid = (l + r) / 2;
      if (Cal(mid) >= k) {
        r = mid - 1;
      } else {
        l = mid + 1;
      }
    }
    return l;
  }

  template <typename U>
  U CalKthEx(CT k, U unused = 0) {
    if (prepared_ == 0) {
      Prepare();
      prepared_ = 1;
    }

    int len = FindLen(k);
    if (count_each_len_) {
      k -= acc_[len - 1];
    }

    U result = 0;
    for (int state = 0; len > 0; --len) {
      for (int i = 0; i < number_base_; ++i) {
        int now = dfa_[state][i];
        CT cnt = dp_[len - 1][now];
        if (cnt >= k) {
          result = result * number_base_ + i;
          state = now;
          break;
        } else {
          k -= cnt;
        }
      }
    }
    return result;
  }

 private:
  int count_each_len_ = 0;
  int state_count_ = 0;
  int number_base_ = 0;
  int prepared_ = 0;
  int max_len_ = 0;
  DArray<int, 2> dfa_;
  DArray<CT, 2> dp_;
  std::vector<CT> acc_;
  std::vector<int> target_state_;
};

// Calculates the sum of the power of the integers accepted by a DFA.
// See DfaCounter for more details.
// Example: examples/dfa_summer.c
template <typename CT>
struct DfaSummer {
  DfaSummer& set_count_each_len(int count_each_len) {
    count_each_len_ = count_each_len;
    return *this;
  }

  DfaSummer& Init(int state_count, int max_power, int number_base,
                  int max_len) {
    state_count_ = state_count;
    max_power_ = max_power;
    max_len_ = max_len;
    number_base_ = number_base;

    dfa_.Reset({state_count, number_base_});

    dp_.Reset({max_power_ + 1, max_len + 1, state_count});

    target_state_.resize(state_count);
    std::fill(target_state_.begin(), target_state_.end(), 0);

    base_power_.resize(max_len + 1);
    base_power_[0] = 1;
    for (int i = 1; i <= max_len; ++i) {
      base_power_[i] = base_power_[i - 1] * number_base_;
    }

    choose.Reset({max_power_ + 1, max_power_ + 1});
    for (int i = 0; i <= max_power_; ++i) {
      for (int j = 0; j <= max_power_; ++j) {
        if (j == 0 || i == j) {
          choose[i][j] = 1;
        } else {
          choose[i][j] = j > i ? 0 : choose[i - 1][j - 1] + choose[i - 1][j];
        }
      }
    }

    prepared_ = 0;

    return *this;
  }

  DfaSummer& AddTrans(int s, int d, int t) {
    dfa_[s][d] = t;
    return *this;
  }

  DfaSummer& MarkTargetState(int s, int v = 1) {
    target_state_[s] = v;
    return *this;
  }

  void Prepare() {
    for (int i = 0; i < state_count_; ++i) {
      dp_[0][0][i] = target_state_[i];
    }
    for (int i = 1; i <= max_len_; ++i) {
      for (int j = 0; j < state_count_; ++j) {
        auto to = dfa_[j];
        CT tmp = 0;
        for (int k = 0; k < number_base_; ++k) {
          tmp += dp_[0][i - 1][to[k]];
        }
        dp_[0][i][j] = tmp;
        for (int p = 1; p <= max_power_; ++p) {
          CT tmp = 0;
          for (int k = 0; k < number_base_; ++k) {
            CT a = 1;
            CT each = k * base_power_[i - 1];
            int state = to[k];
            for (int t = 0; t <= p; ++t) {
              tmp += choose[p][t] * a * dp_[p - t][i - 1][state];
              a *= each;
            }
          }
          dp_[p][i][j] = tmp;
        }
      }
    }
    prepared_ = 1;
  }

  template <typename U>
  CT Cal(U n, int target_power = 0) {
    std::vector<int> dig;
    for (U x = n; !IsZero(x); x /= number_base_) {
      dig.push_back(ToInt<int>(x % number_base_));
    }

    return Cal(dig, target_power);
  }

  CT Cal(const std::vector<int>& dig, int target_power = 0) {
    if (prepared_ == 0) {
      Prepare();
      prepared_ = 1;
    }
    if (target_power == 0) {
      target_power = max_power_;
    }

    PE_ASSERT(target_power <= max_power_);

    const int len = std::size(dig);
    PE_ASSERT(len <= max_len_);

    CT result = 0;
    if (count_each_len_) {
      for (int i = 1; i < len; ++i) {
        result += dp_[target_power][i][0];
      }
    }

    int state = 0;
    CT val = 0;
    for (int curr = len - 1; curr >= 0; --curr) {
      const int me = dig[curr];
      for (int i = 0; i < me; ++i) {
        const int next_state = dfa_[state][i];
        CT a = 1;
        CT each = (val * number_base_ + i) * base_power_[curr];
        for (int j = 0; j <= target_power; ++j) {
          result += choose[target_power][j] * a *
                    dp_[target_power - j][curr][next_state];
          a *= each;
        }
      }
      state = dfa_[state][me];
      val = val * number_base_ + me;
    }
    if (target_state_[state]) {
      CT t = 1;
      for (int i = 0; i < target_power; ++i) {
        t *= val;
      }
      result += t;
    }
    return result;
  }

 private:
  int count_each_len_ = 0;
  int state_count_ = 0;
  int max_power_ = 0;
  int number_base_ = 0;
  int prepared_ = 0;
  int max_len_ = 0;
  DArray<int, 2> dfa_;
  DArray<CT, 3> dp_;
  std::vector<int> target_state_;
  std::vector<CT> base_power_;
  DArray<CT, 2> choose;
};

// Counts the number of different words where the number of each letter is given
// by vec[0], vec[1], ...
//
// Reference: Counting words with Laguerre series
// https://arxiv.org/pdf/1306.6232.pdf
struct CarlitzWordsCounter {
  CarlitzWordsCounter(int64 mod, int64 maxf) { Init(mod, maxf); }

  void Init(const int64 mod, const int64 maxf) {
    mod_ = mod;
    maxf_ = maxf;
    fac_.resize(maxf_ + 1);
    ifac_.resize(maxf_ + 1);
    InitSeqProd2<int64>(std::data(fac_), std::data(ifac_), 1, maxf_, mod_);
  }

  int64 Comb(int64 a, int64 b) {
    if (a < 0 || b < 0 || b > a) return 0;
    int64 t = MulMod(fac_[a], ifac_[b], mod_);
    return MulMod(t, ifac_[a - b], mod_);
  }

  int64 Cal(std::vector<int64> vec) {
    if (std::size(vec) == 1) {
      return vec[0] == 1 ? 1 : 0;
    }
    vec = ToInternal(vec);
    auto where = cache_.find(vec);
    if (where != cache_.end()) {
      return where->second;
    }
    std::vector<int64> it = {1};
    const int64 vsize = static_cast<int64>(std::size(vec));
    for (int64 i = 0; i < vsize; i += 2) {
      std::vector<int64> L = MakeLaguerrePoly(vec[i], IsEven(vec[i]) ? 1 : -1);
      for (int j = 0; j < vec[i + 1]; ++j) it = PolyMul(it, L, mod_);
    }
    int64 ret = 0;
    const int64 size = static_cast<int64>(std::size(it));
    for (int64 i = 0; i < size; ++i) {
      ret = AddMod(ret, MulMod(fac_[i], it[i], mod_), mod_);
    }
    return cache_[vec] = ret;
  }

  std::vector<int64> MakeLaguerrePoly(int64 n, int sgn = 1) {
    std::vector<int64> ret(n + 1, 0);
    for (int i = 1; i <= n; ++i) {
      int64 curr = Mod(IsEven(i) ? sgn : -sgn, mod_);
      curr = MulMod(curr, Comb(n - 1, n - i), mod_);
      curr = MulMod(curr, ifac_[i], mod_);
      ret[i] = curr;
    }
    return ret;
  }

  std::vector<int64> ToInternal(const std::vector<int64>& v) {
    std::map<int64, int64> m;
    for (auto& iter : v) m[iter]++;
    std::vector<int64> t;
    for (auto& iter : m) t.push_back(iter.first), t.push_back(iter.second);
    return t;
  }

 private:
  int64 maxf_;
  int64 mod_;
  std::map<std::vector<int64>, int64> cache_;
  std::vector<int64> fac_;
  std::vector<int64> ifac_;
};

namespace internal {
// Let P(i, x) = sum(C(i, d) x^d, 0 <= d <= deg)
//
// It is assumted that
// P(order, n) A(n) + P(order-1, n-1) A(n-1) + ... + P(0, n-order) A(n-order)= 0
//
// The minimal order for a given deg is automatically determined.
//
// Source (unavailable now):
// https://min-25.hatenablog.com/entry/2018/05/10/212805
SL std::optional<std::vector<std::vector<int64>>> FindRecurrenceWithDegree(
    Span<const int64> terms, int deg, int64 mod) {
  const int64 n = static_cast<int64>(std::size(terms));
  const int64 B = (n + 2) / (deg + 2);
  const int64 C = B * (deg + 1);
  const int64 R = n - (B - 1);

  if (B < 2 || R < C - 1) {
    return std::nullopt;
  }

  // P(0, 0) A(0) + P(1, 1) A(1) + ... + P(B-1, B-1) A(B-1) = 0
  // P(0, 1) A(1) + P(1, 2) A(2) + ... + P(B-1, B) A(B) = 0
  // ...
  // P(0, R-1) A(R-1) + P(1, R) A(R) + ... + P(B-1, R+B-2) A(R+B-2) = 0
  std::vector<std::vector<int64>> mat(R, std::vector<int64>(C));
  for (int y = 0; y < R; ++y) {
    for (int b = 0; b < B; ++b) {
      int64 v = Mod(terms[y + b], mod);
      for (int d = 0; d <= deg; ++d) {
        mat[y][b * (deg + 1) + d] = v;
        v = MulMod(v, y + b, mod);
      }
    }
  }

  int rank = 0;
  for (int x = 0; x < C; ++x) {
    int pivot = -1;
    for (int y = rank; y < R; ++y)
      if (mat[y][x] != 0) {
        pivot = y;
        break;
      }
    if (pivot < 0) break;
    if (pivot != rank) {
      swap(mat[rank], mat[pivot]);
    }
    const int64 inv = ModInv(mat[rank][x], mod);
    for (int x2 = x; x2 < C; ++x2) {
      mat[rank][x2] = MulMod(mat[rank][x2], inv, mod);
    }
    for (int y = rank + 1; y < R; ++y)
      if (mat[y][x]) {
        const int64 c = mod - mat[y][x];
        for (int x2 = x; x2 < C; ++x2) {
          mat[y][x2] = AddMod(mat[y][x2], MulMod(c, mat[rank][x2], mod), mod);
        }
      }
    ++rank;
  }

  // If the rank of the coefficient matrix is full, it has 0 solution.
  if (rank == C) {
    return std::nullopt;
  }

  for (int y = rank - 1; y >= 0; --y)
    if (mat[y][rank]) {
      if (mat[y][y] != 1) return std::nullopt;
      const int64 c = mod - mat[y][rank];
      for (int y2 = 0; y2 < y; ++y2) {
        mat[y2][rank] = AddMod(mat[y2][rank], MulMod(c, mat[y2][y], mod), mod);
      }
    }

  int order = rank / (deg + 1);
  std::vector<std::vector<int64>> ret(order + 1, std::vector<int64>(deg + 1));
  // The equation has infinity solution.
  // The highest degree of P(0, x) is dertermined and the coefficient is set
  // to 1.
  ret[0][rank % (deg + 1)] = 1;
  for (int y = rank - 1; y >= 0; --y) {
    const int k = order - y / (deg + 1);
    const int d = y % (deg + 1);
    ret[k][d] = (mod - mat[y][rank]) % mod;
  }

  return ret;
}
}  // namespace internal

SL int64 RecurrenceValueNext(const std::vector<std::vector<int64>>& recurrence,
                             Span<const int64> terms, int64 m, int64 mod) {
  const int order = static_cast<int>(std::size(recurrence)) - 1;
  const int deg = static_cast<int>(std::size(recurrence[0])) - 1;
  assert(static_cast<int>(std::size(terms)) >= order);

  int64 s = 0;
  for (int i = 1; i <= order; ++i) {
    const int64 k = SubMod(Mod(m, mod), Mod(i, mod), mod);
    int64 t = terms[std::size(terms) - i];
    for (int d = 0; d <= deg; ++d) {
      s = AddMod(s, MulMod(t, recurrence[i][d], mod), mod);
      t = MulMod(t, k, mod);
    }
  }

  int64 denom = 0;
  int64 mpow = 1;
  for (int d = 0; d <= deg; ++d) {
    denom = AddMod(denom, MulMod(mpow, recurrence[0][d], mod), mod);
    mpow = MulMod(mpow, m, mod);
  }

  return MulMod(SubMod(0, s, mod), ModInv(denom, mod), mod);
}

SL int VerifyRecurrence(const std::vector<std::vector<int64>>& recurrence,
                        Span<const int64> terms, int64 mod) {
  const int64 n = static_cast<int64>(std::size(terms));
  const int order = static_cast<int>(std::size(recurrence)) - 1;
  for (int64 i = order; i < n; ++i) {
    int64 value = RecurrenceValueNext(recurrence,
                                      terms.subspan(i - order, order), i, mod);
    if (value != Mod(terms[i], mod)) {
      return 0;
    }
  }
  return 1;
}

SL std::optional<std::vector<std::vector<int64>>> FindRecurrence(
    Span<const int64> terms, int64 mod, int64 min_deg = 0, int64 max_deg = -1) {
  const int64 n = static_cast<int64>(std::size(terms));
  for (int64 deg = min_deg; max_deg == -1 || deg <= max_deg; ++deg) {
    const int64 B = (n + 2) / (deg + 2);
    const int64 C = B * (deg + 1);
    const int64 R = n - (B - 1);

    if (B < 2 || R < C - 1) {
      break;
    }

    std::optional<std::vector<std::vector<int64>>> recurrence =
        internal::FindRecurrenceWithDegree(terms, static_cast<int>(deg), mod);
    if (!recurrence.has_value()) {
      continue;
    }

    if (!VerifyRecurrence(*recurrence, terms, mod)) {
      continue;
    }

    return recurrence;
  }

  return std::nullopt;
}

SL std::optional<int64> FindRecurrenceValueAt(Span<const int64> terms, int64 n,
                                              int64 mod, int min_deg = 0,
                                              int max_deg = -1) {
  if (n < static_cast<int64>(std::size(terms))) {
    return terms[n];
  }

  std::optional<std::vector<std::vector<int64>>> recurrence =
      FindRecurrence(terms, mod, min_deg, max_deg);
  if (!recurrence.has_value()) {
    return std::nullopt;
  }

  const int64 m = static_cast<int64>(std::size(terms));
  const int order = static_cast<int>(recurrence->size()) - 1;
  std::vector<int64> data(order);
  for (int i = 0; i < order; ++i) {
    data[i] = terms[m - order + i];
  }
  for (int64 i = m; i <= n; ++i) {
    int64 value = RecurrenceValueNext(*recurrence, data, i, mod);
    data.push_back(value);
  }

  return data.back();
}

SL std::optional<std::vector<int64>> FindRecurrenceValues(
    Span<const int64> terms, int64 n, int64 mod, int min_deg = 0,
    int max_deg = -1) {
  std::optional<std::vector<std::vector<int64>>> recurrence =
      FindRecurrence(terms, mod, min_deg, max_deg);
  if (!recurrence.has_value()) {
    return std::nullopt;
  }

  const int64 m = static_cast<int64>(std::size(terms));
  std::vector<int64> data(m);
  for (int i = 0; i < m; ++i) {
    data[i] = terms[i];
  }
  for (int64 i = m; i <= n; ++i) {
    int64 value = RecurrenceValueNext(*recurrence, data, i, mod);
    data.push_back(value);
  }

  return data;
}

// https://en.wikipedia.org/wiki/Surreal_number
// https://www.infinitelymore.xyz/p/surreal-numbers
// https://math.uchicago.edu/~may/REU2016/REUPapers/Cronin.pdf
// https://web.mit.edu/sp.268/www/2010/surreal.pdf
// https://zhuanlan.zhihu.com/p/205154262
// https://kewth.github.io/2020/05/09/%E4%B8%80%E7%B1%BB%E4%B8%8D%E5%85%AC%E5%B9%B3%E5%8D%9A%E5%BC%88%E6%80%BB%E7%BB%93/
template <typename T>
std::optional<Fraction<T>> FindSurrealNumber(std::optional<Fraction<T>> u,
                                             std::optional<Fraction<T>> v) {
  if (!u.has_value() && !v.has_value()) {
    return Fraction<T>(0);
  }
  if (!v.has_value()) {
    if (u->a < 0) {
      return Fraction<T>(0);
    } else {
      return Fraction<T>(u->a / u->b + 1);
    }
  }
  if (!u.has_value()) {
    if (v->a > 0) {
      return Fraction<T>(0);
    } else {
      return Fraction<T>(u->a / u->b - 1);
    }
  }
  if (u->a < 0 && v->a > 0) {
    return Fraction<T>(0);
  }
  if (*u >= *v) {
    return std::nullopt;
  }
  if (u->a >= 0) {
    for (T d = 1;; d *= 2) {
      T tmp = u->a * d / u->b + 1;
      if (tmp < *v * d) return Fraction<T>(tmp, d);
    }
  }
  if (v->a <= 0) {
    for (T d = 1;; d *= 2) {
      T tmp = v->a * d / v->b - 1;
      if (tmp > *u * d) return Fraction<T>(tmp);
    }
  }
  PE_ASSERT(0);
  return 0;
}
}  // namespace pe
#endif