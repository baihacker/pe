#ifndef PE_ARRAY_
#define PE_ARRAY_

#include "pe_base"
#include "pe_memory"

namespace pe {
template <typename T, int D>
struct DArrayRef;

// T: element type
// D: dimention length
// A: allocator
template <typename T, int D, typename A = StdAllocator>
struct DArray : public DArrayRef<T, D> {
  template <typename TT, int DD>
  friend struct DArrayRef;

  using base = DArrayRef<T, D>;
  template <class... Args>
  DArray(const std::vector<int64>& dimension, Args&&... arg)
      : dimension_(dimension), base(nullptr, 0, nullptr, nullptr) {
    Init(arg...);
    PE_ASSERT(std::size(dimension) == D);
  }

  DArray() : base(nullptr, 0, nullptr, nullptr) {
    dimension_ = std::vector<int64>(D, 1);
    Init();
    PE_ASSERT(std::size(dimension_) == D);
  }

  DArray(const DArray&) = delete;
  DArray(DArray&&) = delete;

  DArray& operator=(const DArray&) = delete;
  DArray& operator=(DArray&&) = delete;

  ~DArray() { Clear(); }

  template <class... Args>
  void Reset(const std::vector<int64>& dimension, Args&&... arg) {
    Clear();
    this->dimension_ = dimension;
    Init(arg...);
  }

  template <class... Args>
  void Init(Args&&... arg) {
    const int d = static_cast<int>(std::size(dimension_));
    element_counts_.clear();
    element_counts_.push_back(1);
    for (int i = d - 1; i >= 0; --i) {
      element_counts_.push_back(element_counts_.back() * dimension_[i]);
    }
    std::reverse(element_counts_.begin(), element_counts_.end());
    element_count_ = element_counts_[0];
    base::dimension_ = &dimension_[0];
    base::element_counts_ = &element_counts_[0];
    base::data_ = reinterpret_cast<T*>(A::Allocate(element_count_ * sizeof(T)));
    for (int64 i = 0; i < element_count_; ++i) {
      new (base::data_ + i) T(arg...);
    }
  }

  void Clear() {
    for (int64 i = 0; i < element_count_; ++i) {
      (base::data_ + i)->~T();
    }
    A::Deallocate(base::data_);
  }

  T* data() { return base::data_; }

  DArrayRef<T, D> Ref() {
    return DArrayRef<T, D>(base::data_, 0, base::dimension_,
                           base::element_counts_);
  }

 private:
  std::vector<int64> dimension_;
  std::vector<int64> element_counts_;
  int64 element_count_;
};

template <typename T, int D>
struct DArrayRef {
  using ValueType = DArrayRef<T, D - 1>;
  using ConstValueType = DArrayRef<T, D - 1>;

  DArrayRef(T* data, int off, const int64* dimension,
            const int64* element_counts)
      : data_(data),
        off_(off),
        dimension_(dimension),
        element_counts_(element_counts) {}

  DArrayRef<T, D - 1> operator[](int64 idx) const {
    return DArrayRef<T, D - 1>(data_ + idx * element_counts_[off_ + 1],
                               off_ + 1, dimension_, element_counts_);
  }

 protected:
  T* data_;
  const int off_;
  const int64* element_counts_;
  const int64* dimension_;
};

template <typename T>
struct DArrayRef<T, 1> {
  using ValueType = T&;
  using ConstValueType = const T&;

  DArrayRef(T* data, int off, const int64* dimension,
            const int64* element_counts)
      : data_(data),
        off_(off),
        dimension_(dimension),
        element_counts_(element_counts) {}

  T& operator[](int64 idx) { return data_[idx]; }
  ConstValueType operator[](int64 idx) const { return data_[idx]; }

 protected:
  T* data_;
  const int off_;
  const int64* element_counts_;
  const int64* dimension_;
};

template <int64... X>
struct ArrayShape;

template <int64 H, int64... X>
struct ArrayShape<H, X...> {
  using Next = ArrayShape<X...>;
  const static int64 D = 1 + Next::D;
  const static int64 EC = H * Next::EC;
};

template <int64 H>
struct ArrayShape<H> {
  const static int64 D = 1;
  const static int64 EC = H;
};

template <typename T, typename S>
struct FArrayRef;

// T: element type
// S: array shape
// A: allocator
template <typename T, typename S, typename A = StdAllocator>
struct FArray : public FArrayRef<T, S> {
  using base = FArrayRef<T, S>;

  template <class... Args>
  FArray(Args&&... arg) : base(nullptr) {
    Init(arg...);
  }

  FArray(const FArray&) = delete;
  FArray(FArray&&) = delete;

  FArray& operator=(const FArray&) = delete;
  FArray& operator=(FArray&&) = delete;

  ~FArray() { Clear(); }

  template <class... Args>
  void Init(Args&&... arg) {
    base::data_ = reinterpret_cast<T*>(A::Allocate(S::EC * sizeof(T)));
    for (int64 i = 0; i < S::EC; ++i) {
      new (base::data_ + i) T(arg...);
    }
  }

  void Clear() {
    for (int64 i = 0; i < S::EC; ++i) {
      (base::data_ + i)->~T();
    }
    A::Deallocate(base::data_);
  }

  T* data() { return base::data_; }

  FArrayRef<T, S> Ref() { return FArrayRef<T, S>(base::data_); }
};

template <typename T, typename S>
struct FArrayRef {
  using NextShape = typename S::Next;
  using ValueType = FArrayRef<T, NextShape>;
  using ConstValueType = FArrayRef<T, NextShape>;

  FArrayRef(T* data) : data_(data) {}

  FArrayRef<T, NextShape> operator[](int64 idx) const {
    return FArrayRef<T, NextShape>(data_ + idx * NextShape::EC);
  }

 protected:
  T* data_;
};

template <typename T, int64 H>
struct FArrayRef<T, ArrayShape<H>> {
  using ValueType = T&;
  using ConstValueType = const T&;

  FArrayRef(T* data) : data_(data) {}

  ValueType operator[](int64 idx) { return data_[idx]; }
  ConstValueType operator[](int64 idx) const { return data_[idx]; }

 protected:
  T* data_;
};

// T: element type
// X: the count of each dimention
template <typename T, int64... X>
using Array = FArray<T, ArrayShape<X...>>;

// T: element type
// A: allocator
// X: the count of each dimention
template <typename T, typename A, int64... X>
using AArray = FArray<T, ArrayShape<X...>, A>;
}  // namespace pe
#endif