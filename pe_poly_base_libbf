#ifndef PE_POLY_BASE_LIBBF_
#define PE_POLY_BASE_LIBBF_

#if ENABLE_LIBBF && LIMB_BITS == 64

#include "pe_poly_base_common"

#define HAS_POLY_LIBBF 1
#define HAS_POLY_MUL_LIBBF 1

extern "C" {
void* pe_bf_realloc(void*, void* ptr, size_t size) {
  return realloc(ptr, size);
}
}

namespace poly_libbf {
template <typename T>
SL void bf_ntt_init(const T* X, int64 n, bf_context_t* context, bf_t* target) {
  bf_init(context, target);

  bf_set_ui(target, 1);

  bf_resize(target, 2 * n);
  target->expn = pe_clzll(X[n - 1]);

  const int64 len = target->len;
  auto* data = target->tab;
  for (int64 i = 0; i < n; ++i) {
    data[i << 1] = (limb_t)X[i];
    data[(i << 1) | 1] = 0;
  }
}

SL void bf_ntt_deinit(bf_t* target) { bf_delete(target); }

template <typename T>
SL void poly_mul_internal(const T* X, int64 n, const T* Y, int64 m, T* result,
                          int64 mod) {
  bf_t x, y;
  bf_context_t bf_context;
  bf_context_init(&bf_context, pe_bf_realloc, nullptr);

  bf_ntt_init(X, n, &bf_context, &x);
  bf_ntt_init(Y, m, &bf_context, &y);

  bf_t z0, z1, toadd;
  bf_init(&bf_context, &z0);
  bf_init(&bf_context, &z1);
  bf_init(&bf_context, &toadd);

  int offset = x.expn + y.expn;
  bf_set_ui(&toadd, 1);

  toadd.expn = 128 + offset;

  bf_mul(&z0, &x, &y, BF_PREC_MAX, 0);
  bf_add(&z1, &z0, &toadd, BF_PREC_MAX, 0);

  const int64 size = n + m - 1;
  const auto* data = z1.tab;
#if !PE_HAS_INT128
  const auto magic1 = (1LL << 32) % mod;
  const auto magic2 = mul_mod_ex(magic1, magic1, mod);
#endif
  for (int64 i = 0; i < size; ++i) {
    const uint64 low = data[i << 1];
    const uint64 hi = data[(i << 1) | 1];
    if (hi == 0) {
      result[i] = mod > 0 ? low % mod : low;
    } else {
#if PE_HAS_INT128
      const uint128 t = (static_cast<uint128>(hi) << 64) | low;
      result[i] = mod > 0 ? t % mod : t;
#else
      PE_ASSERT(mod > 0);
      const auto A = mul_mod_ex(hi % mod, magic2, mod);
      result[i] = add_mod(A, low % mod, mod);
#endif
    }
  }

  bf_delete(&toadd);
  bf_delete(&z1);
  bf_delete(&z0);
  bf_ntt_deinit(&y);
  bf_ntt_deinit(&x);

  bf_context_end(&bf_context);
}

POLY_MUL_IMPL(poly_mul, poly_libbf::poly_mul_internal)

}  // namespace poly_libbf
#else
#define HAS_POLY_LIBBF 0
#define HAS_POLY_MUL_LIBBF 0
#endif

#endif
