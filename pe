#ifndef PE_
#define PE_

// Base
#include "pe_base"
#include "pe_type_traits"
#include "pe_bit"
#include "pe_int"
#include "pe_extended_int"
#include "pe_float"
#include "pe_span"

// Modular arithmetic
#include "pe_mod"

// General util
#include "pe_io"
#include "pe_time"
#include "pe_persistance"
#include "pe_tree"
#include "pe_rand"

// Range
#include "pe_range"

// Matrix arithmetic
#include "pe_mat"

// Number theory arithmetic
#include "pe_nt_base"
#include "pe_nt"

// Fraction arithmetic
#include "pe_fraction"

// Polynomial
#include "pe_poly_base"
#include "pe_poly"
#include "pe_poly_algo"

// fft
#include "pe_fft"

// Big integer
#include "pe_gbi"
#include "pe_bi32"
#include "pe_mpz"

// Geometry
#include "pe_geometry"

// Large memory support (windows)
#include "pe_memory"

// Parallel support
#include "pe_parallel"
#include "pe_parallel_algo"

// MP extension
#include "pe_mpf"

// Misc
#include "pe_misc"
#include "pe_mma"

#include "pe_array"
#include "pe_algo"
#include "pe_sym_poly"
#include "pe_db"

#include "pe_dpe"

#include "pe_initializer"

namespace std {
  using pe::operator<<;
}

#endif
