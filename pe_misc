#ifndef PE_MISC_
#define PE_MISC_

#include "pe_base"
#include "pe_int128"
#include "pe_bit"
#include "pe_nt"

namespace pe {
class GaussianEliminationMod2 {
 public:
  void Init(int r, int c) {
    row = r;
    col = c;
    data.resize(row);
    colex = (col + 63) >> 6;
    for (int i = 0; i < row; ++i) {
      std::vector<uint64>(colex, 0).swap(data[i]);
    }
  }

  void FillZero() {
    for (auto& iter : data) {
      std::fill(iter.begin(), iter.end(), 0);
    }
  }

  int At(int i, int j) const {
    const int idx = j >> 6;
    const int offset = j & 63;
    return (data[i][idx] >> offset) & 1;
  }

  void Set(int i, int j, int v) {
    const int idx = j >> 6;
    const int offset = j & 63;
    if (v) {
      data[i][idx] |= 1ULL << offset;
    } else {
      data[i][idx] &= ~(1ULL << offset);
    }
  }

  void Change(int i, int j) { Set(i, j, At(i, j) ^ 1); }

  int Reduce() {
    x = y = 0;
    while (x < row && y < col) {
      int id = x;
      while (id < row && At(id, y) == 0) ++id;
      if (id == row) {
        ++y;
        continue;
      }
      if (id != x) {
        data[id].swap(data[x]);
      }
      for (int i = x + 1; i < row; ++i) {
        if (At(i, y) == 0) continue;
        for (int j = y >> 6; j < colex; ++j) data[i][j] ^= data[x][j];
      }
      ++x, ++y;
    }
    return Rank();
  }

  int Rank() const { return x; }

  std::vector<std::vector<uint64>> data;
  int row, col, colex;
  int x, y;
};

class GaussianEliminationSolver {
 public:
  void Init(int r, int c) {
    row = r;
    col = c;
    data.resize(row);
    for (int i = 0; i < r; ++i) {
      std::vector<double>(col + 1, 0).swap(data[i]);
    }
  }

  void FillZero() { Fill(0); }

  void Fill(double v) {
    for (auto& iter : data) {
      std::fill(iter.begin(), iter.end(), v);
    }
  }

  double& At(int i, int j) { return data[i][j]; }

  std::vector<double>& RowData(int i) { return data[i]; }

  static int DbSgn(double x) {
    if (FAbs(x) < 1e-10) {
      return 0;
    }
    return x > 0 ? 1 : -1;
  }

  int reduce(int select_row = 1) {
    x = y = 0;
    while (x < row && y < col) {
      int bestId = x;
      if (select_row) {
        double bestV = FAbs(At(x, y));
        for (int i = x + 1; i < row; ++i) {
          auto now = FAbs(At(i, y));
          if (now > bestV) {
            bestId = i;
            bestV = now;
          }
        }
        if (DbSgn(bestV) == 0) {
          ++y;
          continue;
        }
        if (bestId != x) {
          data[bestId].swap(data[x]);
        }
      }
      for (int i = x + 1; i < row; ++i) {
        if (DbSgn(At(i, y)) == 0) continue;
        const double coe = -At(i, y) / At(x, y);
        for (int j = y; j <= col; ++j) data[i][j] += data[x][j] * coe;
      }
      ++x, ++y;
    }
    return Rank();
  }

  const std::vector<double>& Solve() {
    reduce(0);
    PE_ASSERT(Rank() == row);
    ans.resize(row);
    for (int i = row - 1; i >= 0; --i) {
      data[i][col] /= data[i][i];
      data[i][i] = 1;
      const double v = data[i][col];
      ans[i] = v;
      for (int j = i - 1; j >= 0; --j) {
        data[j][col] -= v * data[j][i];
      }
    }
    return ans;
  }

  int Rank() const { return x; }

  std::vector<std::vector<double>> data;
  std::vector<double> ans;

  int row, col;
  int x, y;
};

// Returns the number of (x, y) where
// x^2+y^2<=n and x >= 0 and y >= 0
SL int64 CountPtInCircleQ1(int64 n) {
  struct Pt {
    int64 x, y;
  };
  const int64 m = SqrtI(n);
  std::stack<Pt> stk;
  stk.push({0, 1});
  int64 vx = 1, vy = 0;
  int64 A = 0, B = 0;
  int64 x = 0, y = m;
  int64 iter = 0;
  while (!stk.empty()) {
    while (x + vx <= m && y - vy >= 0 && sq(x + vx) + sq(y - vy) <= n) {
      x += vx;
      y -= vy;
      A += vx * (2 * y + vy);
      ++B;
      ++iter;
    }
    if (x >= m) break;
    int64 cx, cy;
    cx = stk.top().x;
    cy = stk.top().y;
    stk.pop();
    int fnd = 0;
    while (!fnd) {
      while (x + cx <= m && y - cy >= 0 && sq(x + cx) + sq(y - cy) <= n) {
        stk.push({cx, cy});
        cx += vx, cy += vy;
        ++iter;
      }
      vx = cx, vy = cy;
      if (stk.empty()) {
        fnd = 1;
        break;
      }

      cx = stk.top().x;
      cy = stk.top().y;
      stk.pop();
      int64 lastV = -1;
      for (;; ++iter) {
        if (x + vx + cx <= m && y - vy - cy >= 0 &&
            sq(x + vx + cx) + sq(y - vy - cy) <= n) {
          stk.push({cx, cy});
          cx += vx, cy += vy;
          break;
        }
        int64 currV = sq(x + vx + 2 * cx) + sq(y - vy - 2 * cy);
        // auto f0 = Abs((y-vy)*cx + (x+vx)*cy) > (m + 1) *
        // sqrt((sq(cx)+sq(cy)));
        auto f1 = cx * (x + vx + cx) >= cy * (y - vy - cy);
        // auto f2 = x + vx + 2 * cx > m || y - vy - 2*cy < 0 || lastV != -1 &&
        // currV > lastV;
        if (f1) {
          // if (f2) {
          vx = cx, vy = cy;
          fnd = 1;
          break;
        }
        lastV = currV;
        int64 delta = 1;
#if 0
        {
          double A = x + vx, B = y - vy, C = cx, D = cy;
          double E = sq(B) + sq(D);
          double tmp = E * n - sq(B*C+A*D);
          if (tmp >= 0) {
            double x1 = (-A*B-C*D-sqrt(tmp)) / E;
            double x2 = (-A*B+C*D+sqrt(tmp)) / E;
            delta = x1;
            if (delta <= 0) delta = 1;
          }
        }
#endif
        vx += delta * cx;
        vy += delta * cy;
      }
    }
  }
  // dbg(iter);
  const int64 BD = B + m + x + (y - 1) + 1;
  const int64 I = (A - BD + 2) / 2;
  int64 ret = I + BD;
  for (int64 i = x + 1; i <= m; ++i) {
    ret += SqrtI(n - sq(i)) + 1;
  }
  return ret;
}

SL int64 CountPtInCircle(int64 n) {
  const int64 m = SqrtI(n);
  const int64 t = CountPtInCircleQ1(n);
  return (t - m - 1) * 4 + 1;
}

SL int64 CountPtInCircleQ1Bf(int64 n) {
  const int64 m = SqrtI(n);
  int64 ret = 0;
  for (int64 i = 0; i <= m; ++i) {
    ret += SqrtI(n - sq(i)) + 1;
  }
  return ret;
}

SL int64 CountPtInCircleBf(int64 n) {
  const int64 m = SqrtI(n);
  const int64 t = CountPtInCircleQ1Bf(n);
  return (t - m - 1) * 4 + 1;
}

#if PE_HAS_INT128
// Returns sum(sigma0(i), i=1..n)
SL int128 SumSigma0(int64 n) {
  struct Pt {
    int64 x, y;
  };

  const int64 PIVOT = n > 1e15 ? 10000000 : 1000000;
  const int64 m = SqrtI(n);
  std::stack<Pt> stk;
  stk.push({0, 1});

  int64 vx = 1, vy = 0;
  int128 A = 0, B = 0;
  int64 x = m, y = n / m;
  int64 lx = x, ly = y;
  while (!stk.empty()) {
    while (x > vx && y + vy >= n / (x - vx)) {
      x -= vx;
      y += vy;
      lx = x;
      ly = y;
      A += static_cast<int128>(vx) * ((n - y) * 2 + 2 + vy);
      ++B;
    }
    if (lx < PIVOT || x <= vx) break;
    int fnd = 0;
    int64 cx = stk.top().x, cy = stk.top().y;
    stk.pop();

    while (!fnd) {
      while (x > cx && y + cy >= n / (x - cx)) {
        stk.push({cx, cy});
        cx += vx;
        cy += vy;
      }
      vx = cx, vy = cy;
      if (stk.empty()) {
        fnd = 1;
        break;
      }
      cx = stk.top().x, cy = stk.top().y;
      stk.pop();
      int128 lastV = -0x123456789;
      for (;;) {
        if (x > vx + cx && y + vy + cy >= n / (x - vx - cx)) {
          stk.push({cx, cy});
          cx += vx;
          cy += vy;
          break;
        }
        int128 currV = static_cast<int128>(y + 2 * cy + vy) * (x - 2 * cx - vx);
        if (x < 2 * cx + vx || currV > n ||
            lastV != -0x123456789 && currV < lastV) {
          vx = cx, vy = cy;
          fnd = 1;
          break;
        }
        lastV = currV;
        int64 delta = 1;
        if (cx == 0) {
          delta = n / (x - vx) - vy - y - 1;
        } else if (cx > 0 && cy > 0) {
          int128 TA = y + vy + 1, TB = x - vx;
          int128 test = (cy * TB - cx * TA) * (cy * TB - cx * TA) +
                        4 * cx * cy * (TA * TB - n);
          if (test > 0) {
            delta = (floor)(((1. * cy * TB - 1. * cx * TA) - sqrt(1. * test)) /
                            cx / cy / 2);
          }
        }
        if (delta < 1) {
          delta = 1;
        }
        vx += 1 * cx;
        vy += 1 * cy;
      }
    }
  }
  const int64 side = n - n / m + 1;
  const auto xcnt = m - lx + 1;
  const auto ycnt = n - ly;
  const auto BD = B + xcnt + ycnt + side;
  const auto I = (A - BD + 2) / 2;
  int128 tmp =
      static_cast<int128>(xcnt) * n - (side - 1) - I + (xcnt - 1 - B) - ycnt;
  for (int64 i = 1; i < lx; ++i) tmp += n / i;
  return 2 * tmp - m * m;
}

SL int128 SumSigma0Bf(int64 n) {
  int64 m = SqrtI(n);
  int128 ret = 0;
  for (int64 i = 1; i <= m; ++i) {
    ret += n / i;
  }
  return 2 * ret - m * m;
}
#endif

// Generate set partitions.
// The number of partitions of n elements is Bell number
// See: http://oeis.org/A000110
struct Partition {
  // e.g. {0, 0, 1, 1, 0, 2, 2}
  vi colors;

  // 2, 2, 3
  vi parts;

  // compressed parts
  // e.g. {2:2, 3:1}
  std::vector<std::pair<int, int>> partsC;

  void GenParts() {
    std::map<int, int> mem, mem1;
    parts.resize(0);
    for (auto& iter : colors) ++mem[iter];
    for (auto& iter : mem) ++mem1[iter.second], parts.push_back(iter.second);
    std::sort(parts.begin(), parts.end());

    partsC.resize(0);
    for (auto& iter : mem1) partsC.emplace_back(iter.first, iter.second);
  }

  int operator<(const Partition& o) const { return colors < o.colors; }

  int operator>(const Partition& o) const { return colors > o.colors; }

  int operator==(const Partition& o) const { return colors == o.colors; }

  static void GenPartitionsImpl(int now, int n, int maxv, int* his,
                                std::vector<Partition>& result) {
    if (now == n) {
      Partition t;
      t.colors = vi(his, his + n);
      t.GenParts();
      result.push_back(std::move(t));
    } else {
      for (int i = 0; i <= maxv + 1; ++i) {
        his[now] = i;
        GenPartitionsImpl(now + 1, n, std::max(maxv, i), his, result);
      }
    }
  }

  static std::vector<Partition> GenPartitions(int n) {
    std::vector<Partition> result;
    int his[64];
    GenPartitionsImpl(0, n, -1, his, result);
    return result;
  }
};

struct PartitionMobius {
  PartitionMobius(int64 mod = 1) : mod_(mod) { Init(mod); }

  void Init(int64 mod) {
    mod_ = mod;
    InitSeqProd2<int64>(fac_, nullptr, 127, mod_);
  }

  int64 Cal(const Partition& partition) {
    int64 ret =
        partition.colors.size() + partition.parts.size() & 1 ? mod_ - 1 : 1;
    for (auto& iter : partition.parts) {
      ret = MulMod(ret, fac_[iter - 1], mod_);
    }
    return ret;
  }

 private:
  int64 mod_;
  int64 fac_[128];
};

// Perfect hash for permutation.
// PermHashA has a better encoding speed.
// PermHashB has a better decoding speed.
struct PermHashA {
  PermHashA() {
    fac_[0] = 1;
    for (int i = 1; i <= 20; ++i) fac_[i] = i * fac_[i - 1];
  }

  int64 Encode(const std::vector<int>& perm) {
    int64 ret = 0;
    const int len = static_cast<int>(perm.size());
    for (int i = 0, flag = 0; i < len; ++i) {
      int t = pe_bitcnt(flag & ((1 << perm[i]) - 1));
      ret += t * fac_[perm[i]];
      flag |= 1 << perm[i];
    }
    return ret;
  }

  std::vector<int> Decode(int64 id, int len) {
    int64 base = fac_[len - 1];
    std::vector<int> ret(len, -1);
    for (int i = 0, j = len - 1; i < len - 1; ++i, base = fac_[--j]) {
      int64 value = id / base;
      id = id % base;
      for (int k = 0, cnt = 0;; ++k) {
        if (ret[k] == -1 && ++cnt == value + 1) {
          ret[k] = j;
          break;
        }
      }
    }
    for (int i = 0; i < len; ++i) {
      if (ret[i] == -1) ret[i] = 0;
    }
    return ret;
  }

 private:
  int64 fac_[21];
};

struct PermHashB {
  PermHashB() {
    fac_[0] = 1;
    for (int i = 1; i <= 20; ++i) fac_[i] = i * fac_[i - 1];
  }

  int64 Encode(const std::vector<int>& perm) {
    int64 ret = 0;
    const int len = static_cast<int>(perm.size());
    for (int i = 0, flag = 0; i < len; ++i) {
      int v = perm[i];
      int k = 0;
      for (int j = 0; j < i; ++j) k += perm[j] > v;
      ret += fac_[i] * k;
    }
    return ret;
  }

  std::vector<int> Decode(int64 id, int len) {
    int64 base = fac_[len - 1];
    std::vector<int> numbers(len);
    for (int i = 0; i < len; ++i) numbers[i] = i;
    std::vector<int> ret(len);
    for (int i = 0, j = len - 1; i < len - 1; ++i, base = fac_[--j]) {
      int64 value = id / base;
      id = id % base;
      ret[j] = numbers[j - value];
      numbers.erase(numbers.begin() + j - value);
    }
    ret[0] = numbers[0];
    return ret;
  }

 private:
  int64 fac_[21];
};

template <typename T>
struct MultiSet {
  struct Node {
    int64 pre{0}, ch[2], size{1};
    T key;
    Node(T key) : key(key) { ch[0] = ch[1] = 0; }
    Node() { ch[0] = ch[1] = 0; }
  };

  struct Iterator {
    Iterator(int64 idx, std::vector<Node>& data) : idx_(idx), data_(&data) {}

    T operator*() { return (*data_)[idx_].key; }

    Node* operator->() { return &(*data_)[idx_]; }

    int operator==(const Iterator& o) const { return idx_ == o.idx_; }

    int operator!=(const Iterator& o) const { return !(this->operator==(o)); }

    Iterator& operator++() {
      auto& data = *data_;
      if (idx_ == 0) {
        while (data[idx_].ch[0]) idx_ = data[idx_].ch[0];
        return *this;
      }
      if (data[idx_].ch[1]) {
        idx_ = data[idx_].ch[1];
        while (data[idx_].ch[0]) idx_ = data[idx_].ch[0];
      } else {
        while (idx_ != 0 && idx_ == data[data[idx_].pre].ch[1]) {
          idx_ = data[idx_].pre;
        }
        if (idx_ != 0) {
          idx_ = data[idx_].pre;
        }
      }
      return *this;
    }

    Iterator operator++(int) {
      Iterator ret(idx_, *data_);
      ++*this;
      return ret;
    }

    Iterator& operator--() {
      auto& data = *data_;
      if (data[idx_].ch[0]) {
        idx_ = data[idx_].ch[0];
        while (data[idx_].ch[1]) idx_ = data[idx_].ch[1];
      } else {
        while (idx_ != 0 && idx_ == data[data[idx_].pre].ch[0]) {
          idx_ = data[idx_].pre;
        }
        if (idx_ != 0) {
          idx_ = data[idx_].pre;
        }
      }
      return *this;
    }

    Iterator operator--(int) {
      Iterator ret(idx_, *data_);
      --*this;
      return ret;
    }

    int64 idx_;
    std::vector<Node>* data_;
  };

  MultiSet() {
    data_.emplace_back();
    data_.back().size = 0;
  }

  Iterator begin() {
    auto t = end();
    return ++t;
  }

  Iterator end() { return Iterator(0, data_); }

  Iterator rbegin() {
    auto t = end();
    return --t;
  }

  Iterator rend() { return Iterator(0, data_); }

  int LessEqual(T a, T b) { return a <= b; }

  int Less(T a, T b) { return a < b; }

  void insert(T value) {
    int64 curr = data_[0].ch[0], p = 0;
    ++data_[0].size;
    for (p = 0; curr;) {
      T t = data_[curr].key;
      ++data_[curr].size;
      p = curr;
      if (LessEqual(value, t)) {
        curr = data_[curr].ch[0];
      } else {
        curr = data_[curr].ch[1];
      }
    }
    const int64 top = data_.size();
    if (p == 0) {
      data_[0].ch[0] = top;
    } else if (value <= data_[p].key) {
      data_[p].ch[0] = top;
    } else {
      data_[p].ch[1] = top;
    }
    data_.emplace_back(value);
    data_.back().pre = p;
    Splay(data_.size() - 1, 0);
  }

  void erase(Iterator iter) {
    if (iter == end()) {
      return;
    }
    --data_[0].size;

    int64 p = iter->pre;
    if (iter->ch[0] == 0 && iter->ch[1] == 0) {
      if (iter.idx_ == data_[p].ch[0]) {
        data_[p].ch[0] = 0;
      } else {
        data_[p].ch[1] = 0;
      }
      Update(p);
      return;
    }
    if (iter->ch[0] == 0) {
      int64 t = iter->ch[1];
      if (iter.idx_ == data_[p].ch[0]) {
        data_[p].ch[0] = t;
      } else {
        data_[p].ch[1] = t;
      }
      data_[t].pre = p;
      Update(p);
      return;
    }
    if (iter->ch[1] == 0) {
      int64 t = iter->ch[0];
      if (iter.idx_ == data_[p].ch[0]) {
        data_[p].ch[0] = t;
      } else {
        data_[p].ch[1] = t;
      }
      data_[t].pre = p;
      Update(p);
      return;
    }
    auto x = iter;
    --x;
    Splay(x.idx_, 0);
    int64 t = iter->ch[1];
    data_[x.idx_].ch[1] = t;
    data_[t].pre = x.idx_;
    Update(x.idx_);
  }

  void erase(T value) {
#if 0
    for (;;) {
      auto where = find_one(value);
      if (where == end()) break;
      erase(where);
    }
#endif
    auto last = FindLast(value);
    if (last == end()) {
      return;
    }
    auto first = FindFirst(value);
    if (first == last) {
      erase(first);
      return;
    }
    // note: first is at root position.
    Splay(last.idx_, first.idx_);
    int64 t = data_[last.idx_].ch[0];
    if (t != 0) {
      data_[0].size -= data_[t].size;
      data_[last.idx_].ch[0] = 0;
    }
    erase(last);
    erase(first);
  }

  Iterator FindKth(int64 k) {
    if (k > size() || k <= 0) {
      return end();
    }
    int64 curr = data_[0].ch[0];
    for (;;) {
      int64 c = data_[curr].ch[0];
      int64 cnt = 0;
      if (c) {
        cnt = data_[c].size;
      }
      if (cnt + 1 == k) {
        break;
      }
      if (k <= cnt) {
        curr = c;
      } else {
        k -= cnt + 1;
        curr = data_[curr].ch[1];
      }
    }
    Splay(curr, 0);
    return Iterator(curr, data_);
  }

  Iterator FindOne(T value) {
    int64 curr = data_[0].ch[0], p = 0;
    for (p = 0; curr;) {
      T t = data_[curr].key;
      p = curr;
      if (value == t) {
        Splay(curr, 0);
        return Iterator(curr, data_);
      }
      if (Less(value, t)) {
        curr = data_[curr].ch[0];
      } else {
        curr = data_[curr].ch[1];
      }
    }
    return end();
  }

  Iterator FindFirst(T value) {
    int64 curr = data_[0].ch[0], p = 0;
    int64 found = 0;
    for (p = 0; curr;) {
      T t = data_[curr].key;
      p = curr;
      if (value == t) {
        found = curr;
      }
      if (LessEqual(value, t)) {
        curr = data_[curr].ch[0];
      } else {
        curr = data_[curr].ch[1];
      }
    }
    if (found != 0) {
      Splay(found, 0);
    }
    return Iterator(found, data_);
  }

  Iterator FindLast(T value) {
    int64 curr = data_[0].ch[0], p = 0;
    int64 found = 0;
    for (p = 0; curr;) {
      T t = data_[curr].key;
      p = curr;
      if (value == t) {
        found = curr;
      }
      if (Less(value, t)) {
        curr = data_[curr].ch[0];
      } else {
        curr = data_[curr].ch[1];
      }
    }
    if (found != 0) {
      Splay(found, 0);
    }
    return Iterator(found, data_);
  }

  int64 FindCount(T value) {
    auto it = FindFirst(value);
    if (it == end()) {
      return 0;
    }
    int64 size1 = 0;
    if (it->ch[0]) {
      size1 = data_[it->ch[0]].size;
    }
    int64 size2 = 0;
    it = FindLast(value);
    if (it->ch[1]) {
      size2 = data_[it->ch[1]].size;
    }
    return data_[0].size - size1 - size2;
  }

  int64 QueryGreater(T value) {
    int64 curr = data_[0].ch[0], p = 0;
    int64 ret = 0;
    for (p = 0; curr;) {
      T t = data_[curr].key;
      p = curr;
      if (Less(value, t)) {
        ++ret;
        if (data_[curr].ch[1]) {
          ret += data_[data_[curr].ch[1]].size;
        }
        curr = data_[curr].ch[0];
      } else {
        curr = data_[curr].ch[1];
      }
    }
    if (p != 0) Splay(p, 0);
    return ret;
  }

  int64 QueryGreaterEqual(T value) {
    int64 curr = data_[0].ch[0], p = 0;
    int64 ret = 0;
    for (p = 0; curr;) {
      T t = data_[curr].key;
      p = curr;
      if (LessEqual(value, t)) {
        ++ret;
        if (data_[curr].ch[1]) {
          ret += data_[data_[curr].ch[1]].size;
        }
        curr = data_[curr].ch[0];
      } else {
        curr = data_[curr].ch[1];
      }
    }
    if (p != 0) Splay(p, 0);
    return ret;
  }

  int64 QueryLess(T value) {
    int64 curr = data_[0].ch[0], p = 0;
    int64 ret = 0;
    for (p = 0; curr;) {
      T t = data_[curr].key;
      p = curr;
      if (Less(t, value)) {
        ++ret;
        if (data_[curr].ch[0]) {
          ret += data_[data_[curr].ch[0]].size;
        }
        curr = data_[curr].ch[1];
      } else {
        curr = data_[curr].ch[0];
      }
    }
    if (p != 0) Splay(p, 0);
    return ret;
  }

  int64 QueryLessEqual(T value) {
    int64 curr = data_[0].ch[0], p = 0;
    int64 ret = 0;
    for (p = 0; curr;) {
      T t = data_[curr].key;
      p = curr;
      if (LessEqual(t, value)) {
        ++ret;
        if (data_[curr].ch[0]) {
          ret += data_[data_[curr].ch[0]].size;
        }
        curr = data_[curr].ch[1];
      } else {
        curr = data_[curr].ch[0];
      }
    }
    if (p != 0) Splay(p, 0);
    return ret;
  }

  void Update(int64 x) {
    if (x == 0) return;
    Node& nd = data_[x];
    Node &l = data_[nd.ch[0]], &r = data_[nd.ch[1]];
    nd.size = 1;
    if (nd.ch[0]) nd.size += l.size;
    if (nd.ch[1]) nd.size += r.size;
  }

  void Rotate(int64 x, int c) {
    int64 y = data_[x].pre;
    data_[y].ch[c ^ 1] = data_[x].ch[c];
    if (data_[x].ch[c]) {
      data_[data_[x].ch[c]].pre = y;
    }
    data_[x].pre = data_[y].pre;
    if (data_[data_[y].pre].ch[0] == y) {
      data_[data_[y].pre].ch[0] = x;
    } else {
      data_[data_[y].pre].ch[1] = x;
    }
    data_[x].ch[c] = y, data_[y].pre = x, Update(y);
  }

  void Splay(int64 x, int64 f) {
    for (; data_[x].pre != f;) {
      if (data_[data_[x].pre].pre == f) {
        if (data_[data_[x].pre].ch[0] == x) {
          Rotate(x, 1);
        } else {
          Rotate(x, 0);
        }
      } else {
        int64 y = data_[x].pre, z = data_[y].pre;
        if (data_[z].ch[0] == y) {
          if (data_[y].ch[0] == x) {
            Rotate(y, 1), Rotate(x, 1);
          } else {
            Rotate(x, 0), Rotate(x, 1);
          }
        } else if (data_[y].ch[1] == x) {
          Rotate(y, 0), Rotate(x, 0);
        } else {
          Rotate(x, 1), Rotate(x, 0);
        }
      }
    }
    Update(x);
  }

  std::vector<Node>& data() { return data_; }
  int64 size() { return data_[0].size; }

 private:
  std::vector<Node> data_;
};

namespace min25 {
#if PE_HAS_INT128

using i64 = long long;
using u64 = unsigned long long;
using u128 = __uint128_t;

// sigma0 sum copied from
// https://github.com/min-25/algorithms/blob/master/math/sigma0_sum.cpp
u128 sigma0_sum_fast(const u64 N) {
  auto out = [N](u64 x, u64 y) { return x * y > N; };
  auto cut = [N](u64 x, u64, int ldx, int ldy) {
    return u128(x) * (x * ldy) >= u128(N) * ldx;
  };
  u64 v = sqrtl(N);
  u64 w = 4.0 * cbrtl(N);
  u64 x = N / v;
  u64 y = N / x + 1;

  using T = std::tuple<int, int>;
  std::stack<T> stac;
  stac.emplace(1, 0);
  stac.emplace(1, 1);

  u128 ret = 0;
  while (true) {
    int ldx, ldy;
    std::tie(ldx, ldy) = stac.top();
    stac.pop();
    while (out(x + ldx, y - ldy)) {
      ret += x * ldy + (u64(ldy + 1) * (ldx - 1) >> 1);
      x += ldx, y -= ldy;
    }
    if (y <= w) break;
    int udx = ldx, udy = ldy;
    while (true) {
      std::tie(ldx, ldy) = stac.top();
      if (out(x + ldx, y - ldy)) break;
      udx = ldx, udy = ldy;
      stac.pop();
    }
    while (true) {
      int mdx = ldx + udx, mdy = ldy + udy;
      if (out(x + mdx, y - mdy)) {
        stac.emplace(mdx, mdy);
        ldx = mdx, ldy = mdy;
      } else {
        if (cut(x + mdx, y - mdy, ldx, ldy)) break;
        udx = mdx, udy = mdy;
      }
    }
  }
  for (u64 i = 1; i < y; i += 2) {
    for (u64 M = N / i, k = i; k < y; M >>= 1, k <<= 1) ret += M;
  }
  return 2 * ret - u64(v) * v;
}

// sigma1 sum copifed from
// https://github.com/min-25/algorithms/blob/master/math/sigma1_sum.cpp
u128 sigma1_sum_fast(const u64 N) {
  // about O(N^{1/3} log(N))
  auto out = [N](u64 x, u64 y) { return x * y > N; };
  auto cut = [N](u64 x, u64, int ldx, int ldy) {
    return u128(x) * (x * ldy) >= u128(N) * ldx;
  };
  const u64 v = sqrtl(N);
  const u64 w = 4.0 * cbrtl(N);
  u64 x = v + 1;
  u64 y = v + 1;

  using T = std::tuple<int, int, u64, u64>;
  std::stack<T> stac;
  stac.emplace(1, 0, 0, 0);
  stac.emplace(0, 1, 0, 0);

  u128 ret = 0;
  while (true) {
    int ldx, ldy;
    u64 ls1, ls2;
    std::tie(ldx, ldy, ls1, ls2) = stac.top();
    stac.pop();
    while (out(x + ldx, y - ldy)) {
      y -= ldy;
      ret += ls1 + ls2;
      ret += (u128(x + y) * (u64(ldx - 1) * (ldy - 1)) +
              u128(y * ldx) * (2 * x + ldx + 1) +
              u128(x * ldy) * (2 * y + ldy + 1)) >>
             1;
      ret -= y + ldy + x + ldx;
      x += ldx;
    }
    if (y <= w) break;
    int udx = ldx, udy = ldy;
    u64 us1 = ls1, us2 = ls2;
    while (true) {
      std::tie(ldx, ldy, ls1, ls2) = stac.top();
      if (out(x + ldx, y - ldy)) break;
      udx = ldx, udy = ldy, us1 = ls1, us2 = ls2;
      stac.pop();
    }
    while (true) {
      int mdx = ldx + udx, mdy = ldy + udy;
      u64 ms1 =
          us1 + ls1 + u64(udx) * (udx + 1 + u64(ldy - 1) * (ldx + udx)) / 2;
      u64 ms2 =
          ls2 + us2 + u64(ldy) * (ldy + 1 + u64(udx - 1) * (udy + ldy)) / 2;
      if (out(x + mdx, y - mdy)) {
        stac.emplace(mdx, mdy, ms1, ms2);
        ldx = mdx, ldy = mdy, ls1 = ms1, ls2 = ms2;
      } else {
        if (cut(x + mdx, y - mdy, ldx, ldy)) break;
        udx = mdx, udy = mdy, us1 = ms1, us2 = ms2;
      }
    }
  }

  u128 s = 0;
  for (u64 i = 1; i < y; i += 2) {
    for (u64 M = N / i, k = i; k < y; M >>= 1, k <<= 1) {
      s += u128(M) * (M + 1);
      ret += k * M;
    }
  }
  ret += y * (N / y) + s / 2;
  ret -= u128(y - 1) * x * (x + 1) / 2;
  return ret - u128(N) * (N + 1) / 2;
}
#endif
}  // namespace min25

// https://www.cs.helsinki.fi/u/tpkarkka/publications/jacm05-revised.pdf
namespace dc3 {
SL bool leq(int a1, int a2, int b1, int b2)  // lexicographic order
{
  return (a1 < b1 || a1 == b1 && a2 <= b2);
}  // for pairs

SL bool leq(int a1, int a2, int a3, int b1, int b2, int b3) {
  return (a1 < b1 || a1 == b1 && leq(a2, a3, b2, b3));
}  // and triples

// stably sort a[0..n-1] to b[0..n-1] with keys in 0..K from r
SL void RadixPass(int* a, int* b, int* r, int n,
                  int K) {                   // count occurrences
  int* c = new int[K + 1];                   // counter array
  for (int i = 0; i <= K; i++) c[i] = 0;     // reset counters
  for (int i = 0; i < n; i++) c[r[a[i]]]++;  // count occurrences
  for (int i = 0, sum = 0; i <= K; i++)      // exclusive prefix sums
  {
    int t = c[i];
    c[i] = sum;
    sum += t;
  }
  for (int i = 0; i < n; i++) b[c[r[a[i]]]++] = a[i];  // sort
  delete[] c;
}

// find the suffix array SA of T[0..n-1] in {1..K}^n
// require T[n]=T[n+1]=T[n+2]=0, n>=2
SL void BuildSuffixArray(int* T, int* SA, int n, int K) {
  int n0 = (n + 2) / 3, n1 = (n + 1) / 3, n2 = n / 3, n02 = n0 + n2;
  int* R = new int[n02 + 3];
  R[n02] = R[n02 + 1] = R[n02 + 2] = 0;
  int* SA12 = new int[n02 + 3];
  SA12[n02] = SA12[n02 + 1] = SA12[n02 + 2] = 0;
  int* R0 = new int[n0];
  int* SA0 = new int[n0];
  // ******* Step 0: Construct sample ********
  // generate positions of mod 1 and mod 2 suffixes
  // the "+(n0-n1)" adds a dummy mod 1 suffix if n%3 == 1
  for (int i = 0, j = 0; i < n + (n0 - n1); i++) {
    if (i % 3 != 0) R[j++] = i;
  }
  // ******* Step 1: Sort sample suffixes ********
  // lsb radix sort the mod 1 and mod 2 triples
  RadixPass(R, SA12, T + 2, n02, K);
  RadixPass(SA12, R, T + 1, n02, K);
  RadixPass(R, SA12, T, n02, K);
  // find lexicographic names of triples and
  // write them to correct places in R
  int name = 0, c0 = -1, c1 = -1, c2 = -1;
  for (int i = 0; i < n02; i++) {
    if (T[SA12[i]] != c0 || T[SA12[i] + 1] != c1 || T[SA12[i] + 2] != c2) {
      name++;
      c0 = T[SA12[i]];
      c1 = T[SA12[i] + 1];
      c2 = T[SA12[i] + 2];
    }
    if (SA12[i] % 3 == 1) {
      R[SA12[i] / 3] = name;
    }  // write to R1
    else {
      R[SA12[i] / 3 + n0] = name;
    }  // write to R2
  }
  // recurse if names are not yet unique
  if (name < n02) {
    BuildSuffixArray(R, SA12, n02, name);
    // store unique names in R using the suffix array
    for (int i = 0; i < n02; i++) R[SA12[i]] = i + 1;
  } else {  // generate the suffix array of R directly
    for (int i = 0; i < n02; i++) SA12[R[i] - 1] = i;
  }
  // ******* Step 2: Sort nonsample suffixes ********
  // stably sort the mod 0 suffixes from SA12 by their first character
  for (int i = 0, j = 0; i < n02; i++) {
    if (SA12[i] < n0) R0[j++] = 3 * SA12[i];
  }
  RadixPass(R0, SA0, T, n0, K);
  // ******* Step 3: Merge ********
  // merge sorted SA0 suffixes and sorted SA12 suffixes
  for (int p = 0, t = n0 - n1, k = 0; k < n; k++) {
#define GetI() (SA12[t] < n0 ? SA12[t] * 3 + 1 : (SA12[t] - n0) * 3 + 2)
    int i = GetI();     // pos of current offset 12 suffix
    int j = SA0[p];     // pos of current offset 0 suffix
    if (SA12[t] < n0 ?  // different compares for mod 1 and mod 2 suffixes
            leq(T[i], R[SA12[t] + n0], T[j], R[j / 3])
                     : leq(T[i], T[i + 1], R[SA12[t] - n0 + 1], T[j], T[j + 1],
                           R[j / 3 + n0])) {  // suffix from SA12 is smaller
      SA[k] = i;
      t++;
      if (t == n02) {  // done --- only SA0 suffixes left
        for (k++; p < n0; p++, k++) SA[k] = SA0[p];
      }
    } else {  // suffix from SA0 is smaller
      SA[k] = j;
      p++;
      if (p == n0) {  // done --- only SA12 suffixes left
        for (k++; t < n02; t++, k++) SA[k] = GetI();
      }
    }
  }
#undef GetI
  delete[] R;
  delete[] SA12;
  delete[] SA0;
  delete[] R0;
}

template <typename EleType>
SL int GetLCP(EleType* a, EleType* b) {
  int l = 0;
  while (*a && *b && *a == *b) {
    l++;
    a++;
    b++;
  }
  return l;
}

template <typename EleType>
SL void GetLCP(EleType* text, int n, int* SA, int* rank, int* lcp) {
  lcp[0] = 0;
  if (rank[0]) {
    lcp[rank[0]] = GetLCP(text, text + SA[rank[0] - 1]);
  }
  for (int i = 1; i < n; i++) {
    if (!rank[i]) continue;
    if (lcp[rank[i - 1]] <= 1) {
      lcp[rank[i]] = GetLCP(text + i, text + SA[rank[i] - 1]);
    } else {
      const int L = lcp[rank[i - 1]] - 1;
      lcp[rank[i]] = L + GetLCP(text + i + L, text + SA[rank[i] - 1] + L);
    }
  }
}

template <typename EleType>
SL void BuildSuffixArray(EleType* T, int n, int* SA, int* rank, int* lcp,
                         int k) {
  int* text = new int[n + 3];
  std::copy(T, T + n, text);
  text[n] = text[n + 1] = text[n + 2] = 0;
  if (n == 1) {
    SA[0] = 0;
  } else if (n == 2) {
    if (text[1] <= text[0]) {
      SA[0] = 1;
      SA[1] = 0;
    } else {
      SA[0] = 0;
      SA[1] = 1;
    }
  } else {
    BuildSuffixArray(text, SA, n, k);
  }
  bool delete_rank = false;
  if (!rank && lcp) {
    rank = new int[n];
    delete_rank = true;
  }
  if (rank) {
    for (int i = 0; i < n; ++i) {
      rank[SA[i]] = i;
    }
  }
  if (lcp) {
    GetLCP(text, n, SA, rank, lcp);
  }
  if (delete_rank) {
    delete[] rank;
  }
  delete[] text;
}

SL void BuildSuffixArray(const std::string& T, int* SA, int* rank, int* lcp) {
  const int n = static_cast<int>(T.size());
  int char_set[256] = {0};
  int k = 0;
  for (auto c : T) {
    if (char_set[c] == 0) {
      ++k;
    }
    char_set[c] = 1;
  }
  for (int i = 1; i < 256; ++i) {
    char_set[i] += char_set[i - 1];
  }
  int* text = new int[n + 3];
  for (int i = 0; i < n; ++i) {
    text[i] = char_set[T[i]];
  }
  text[n] = text[n + 1] = text[n + 2] = 0;
  if (n == 1) {
    SA[0] = 0;
  } else if (n == 2) {
    if (text[1] <= text[0]) {
      SA[0] = 1;
      SA[1] = 0;
    } else {
      SA[0] = 0;
      SA[1] = 1;
    }
  } else {
    BuildSuffixArray(text, SA, n, k);
  }
  bool delete_rank = false;
  if (!rank && lcp) {
    rank = new int[n];
    delete_rank = true;
  }
  if (rank) {
    for (int i = 0; i < n; ++i) {
      rank[SA[i]] = i;
    }
  }
  if (lcp) {
    GetLCP(text, n, SA, rank, lcp);
  }
  if (delete_rank) {
    delete[] rank;
  }
  delete[] text;
}
}  // namespace dc3

// Suffix automaton copied from https://oi-wiki.org/string/sam/#_8
struct SAM {
  struct State {
    int len, link;
    std::map<char, int> next;
  };

  SAM(int maxn) { Init(maxn); }

  void Init(int maxn) {
    maxn_ = maxn;
    state_ = std::vector<State>(2 * maxn_);
    Reset();
  }

  void Reset() {
    state_[0].len = 0;
    state_[0].link = -1;
    top_ = 1;
    last_ = 0;
  }

  void Extend(char c) {
    const int cur = top_++;
    state_[cur].len = state_[last_].len + 1;
    int p = last_;
    while (p != -1 && !state_[p].next.count(c)) {
      state_[p].next[c] = cur;
      p = state_[p].link;
    }
    if (p == -1) {
      state_[cur].link = 0;
    } else {
      const int q = state_[p].next[c];
      if (state_[p].len + 1 == state_[q].len) {
        state_[cur].link = q;
      } else {
        const int clone = top_++;
        state_[clone].len = state_[p].len + 1;
        state_[clone].next = state_[q].next;
        state_[clone].link = state_[q].link;
        while (p != -1 && state_[p].next[c] == q) {
          state_[p].next[c] = clone;
          p = state_[p].link;
        }
        state_[q].link = state_[cur].link = clone;
      }
    }
    last_ = cur;
  }

  std::vector<State>& data() { return state_; };

  State& operator[](int idx) { return state_[idx]; };

  State& state(int idx) { return state_[idx]; }

  int StateCount() const { return top_; }

  int top() const { return top_; }

  int last() const { return last_; }

  std::vector<State>::iterator begin() { return state_.begin(); }

  std::vector<State>::iterator end() { return state_.begin() + top_; }

  int IdxOf(State& state) { return static_cast<int>(&state - &state_[0]); }

 private:
  std::vector<State> state_;
  int maxn_;
  int top_;
  int last_;
};

struct TableFormatter {
  enum ColumnAlign { NO_ALIGN = 0, LEFT = 1, MIDDLE = 2, RIGHT = 3 };
  struct ColumnContext {
    int max_row_width = 0;
    int column_idx = 0;
    int column_count = 0;
  };

  struct ColumnFormat {
    ColumnAlign align = LEFT;
    int width_base = 0;
    int width_inc = 0;

    std::string Render(const std::string& str, const ColumnContext& cc) {
      if (align == NO_ALIGN) {
        return str;
      }
      int width = width_base;
      const int str_size = static_cast<int>(str.size());
      if (width_base == 0) {
        width = cc.max_row_width >= 0 ? cc.max_row_width : str_size;
      }
      width += width_inc;
      if (width < str_size) {
        return str.substr(0, width);
      } else if (width == str_size) {
        return str;
      } else {
        const int diff = width - str_size;
        int left_padding = 0, right_padding = 0;
        if (align == LEFT) {
          right_padding = diff;
        } else if (align == RIGHT) {
          left_padding = diff;
        } else {
          left_padding = diff >> 1;
          right_padding = width - left_padding;
        }
        auto result = str;
        if (left_padding > 0) {
          std::string t;
          for (int i = 0; i < left_padding; ++i) {
            t.append(" ");
          }
          result += t;
        }
        for (int i = 0; i < right_padding; ++i) {
          result.append(" ");
        }
        return result;
      }
    }
  };

  static ColumnFormat NoAlign() { return {NO_ALIGN}; }

  TableFormatter() { default_format_.width_inc = 4; }

  TableFormatter& SetDefaultFormat(const ColumnFormat& format) {
    default_format_ = format;
    return *this;
  }

  TableFormatter& SetDefaultFormat(int idx, const ColumnFormat& format) {
    column_format_map_[idx] = format;
    return *this;
  }

  TableFormatter& SetSeparator(const std::string& separator = "") {
    separator_ = separator;
    return *this;
  }

  TableFormatter& Push(const std::vector<std::string>& line) {
    raw_lines_.push_back(line);
    return *this;
  }

  TableFormatter& Prepare() {
    column_widths_.clear();
    int idx = 0;
    for (auto& iter : raw_lines_) {
      int t = static_cast<int>(iter.size());
      while (column_widths_.size() < t) {
        column_widths_.push_back(0);
      }
      for (int i = 0; i < t; ++i) {
        int t = static_cast<int>(iter[i].size());
        if (t > column_widths_[i]) {
          column_widths_[i] = t;
        }
      }
    }
    return *this;
  }

  std::vector<std::string> Render() {
    Prepare();
    std::vector<std::string> result;
    for (auto& iter : raw_lines_) {
      const int column_size = static_cast<int>(iter.size());
      std::stringstream ss;
      for (int i = 0; i < column_size; ++i) {
        if (i > 0 && separator_.size() > 0) {
          ss << separator_;
        }
        ss << RenderColumn(i, iter[i]);
      }
      result.push_back(ss.str());
    }
    return result;
  }

  void Render(std::ostream& o) {
    Prepare();
    for (auto& iter : raw_lines_) {
      const int column_size = static_cast<int>(iter.size());
      for (int i = 0; i < column_size; ++i) {
        if (i > 0 && separator_.size() > 0) {
          o << separator_;
        }
        o << RenderColumn(i, iter[i]);
      }
      o << std::endl;
    }
  }

  std::string RenderColumn(int idx, const std::string& content) {
    return GetFormat(idx).Render(
        content, {idx < column_widths_.size() ? column_widths_[idx] : -1, idx,
                  static_cast<int>(column_widths_.size())});
  }

  ColumnFormat GetFormat(int idx) {
    auto where = column_format_map_.find(idx);
    if (where != column_format_map_.end()) {
      return where->second;
    }
    return default_format_;
  }

  std::vector<std::string>& AppendLine() {
    raw_lines_.emplace_back();
    return raw_lines_.back();
  }

  std::vector<std::string>& AtLine(int idx) { return raw_lines_[idx]; }

 public:
  ColumnFormat default_format_;
  std::vector<std::vector<std::string>> raw_lines_;
  std::vector<int> column_widths_;
  std::map<int, ColumnFormat> column_format_map_;
  std::string separator_;
};

template <typename T>
struct IntegerRange {
  static_assert(pe_is_signed_v<T>);
  static const T inf = std::numeric_limits<T>::max() / 4;

  T x1, x2;

  IntegerRange(T x1 = 0, T x2 = 0) : x1(x1), x2(x2) {}

  int operator==(const IntegerRange& o) const {
    return x1 == o.x1 && x2 == o.x2;
  }

  int operator!=(const IntegerRange& o) const { return !(*this == o); }

  int operator<(const IntegerRange& o) const {
    return x1 < o.x1 || x1 == o.x1 && x2 < o.x2;
  }

  int operator<=(const IntegerRange& o) const { return !(*this > o); }

  int operator>(const IntegerRange& o) const {
    return x1 > o.x1 || x1 == o.x1 && x2 > o.x2;
  }

  int operator>=(const IntegerRange& o) const { return !(*this < o); }

  const IntegerRange& Print() const {
    std::cout << "[" << x1 << ", " << x2 << "]";
    return *this;
  }

  const IntegerRange& PrintLn() const {
    std::cout << "[" << x1 << ", " << x2 << "]" << std::endl;
    return *this;
  }

  friend std::ostream& operator<<(std::ostream& o, const IntegerRange& p) {
    return o << "[" << p.x1 << ", " << p.x2 << "]";
  }
};

using IntegerRange64 = IntegerRange<int64>;

#if PE_HAS_INT128
using IntegerRange128 = IntegerRange<int128>;
#endif

template <typename T>
void AppendRange(std::vector<IntegerRange<T>>& ranges, IntegerRange<T> r) {
  if (ranges.empty() || ranges.back().x2 + 1 < r.x1) {
    ranges.push_back(r);
  } else {
    ranges.back().x2 = std::max(ranges.back().x2, r.x2);
  }
}

template <typename T>
SL void AppendRange(std::vector<IntegerRange<T>>& ranges, T A, T B) {
  if (ranges.empty() || ranges.back().x2 + 1 < A) {
    ranges.emplace_back(A, B);
  } else {
    ranges.back().x2 = std::max(ranges.back().x2, B);
  }
}

template <typename T>
SL std::vector<IntegerRange<T>> IntersectRanges(
    const std::vector<IntegerRange<T>>& a,
    const std::vector<IntegerRange<T>>& b) {
  const int n = static_cast<int>(a.size());
  const int m = static_cast<int>(b.size());
  if (n == 0 || m == 0) return {};

  std::vector<IntegerRange<T>> result;
  for (int i = 0, j = 0; i < n; ++i) {
    while (j < m && b[j].x2 < a[i].x1) ++j;
    while (j < m && b[j].x1 <= a[i].x2) {
      AppendRange(result, std::max(a[i].x1, b[j].x1),
                  std::min(a[i].x2, b[j].x2));
      ++j;
    }
  }
  return result;
}

template <typename T>
SL std::vector<IntegerRange<T>> IntersectRanges(
    const std::vector<IntegerRange<T>>& a, IntegerRange<T>& b) {
  return IntersectRanges({b}, a);
}

template <typename T>
SL std::vector<IntegerRange<T>> UniteRanges(
    const std::vector<IntegerRange<T>>& a,
    const std::vector<IntegerRange<T>>& b) {
  const int n = static_cast<int>(a.size());
  const int m = static_cast<int>(b.size());
  if (n == 0) return b;
  if (m == 0) return a;

  std::vector<IntegerRange<T>> result;
  int i = 0, j = 0;
  while (i < n || j < m) {
    if (i == n) {
      AppendRange(result, b[j++]);
    } else if (j == m) {
      AppendRange(result, a[i++]);
    } else if (a[i].x1 <= b[j].x1) {
      AppendRange(result, a[i++]);
    } else {
      AppendRange(result, b[j++]);
    }
  }
  return result;
}

template <typename T>
SL std::vector<IntegerRange<T>> UniteRanges(
    const std::vector<IntegerRange<T>>& a, IntegerRange<T>& b) {
  return UniteRanges(a, {b});
}

// Solve A >= 0
template <typename T>
SL std::vector<IntegerRange<T>> SolveInequatilityGE0(T A) {
  using RangeT = IntegerRange<T>;
  return A >= 0 ? std::vector<RangeT>{{-RangeT::inf, RangeT::inf}}
                : std::vector<RangeT>{};
}

// Solve A > 0
template <typename T>
SL std::vector<IntegerRange<T>> SolveInequatilityG0(T A) {
  using RangeT = IntegerRange<T>;
  return A > 0 ? std::vector<RangeT>{{-RangeT::inf, RangeT::inf}}
               : std::vector<RangeT>{};
}

// Solve A <= 0
template <typename T>
SL std::vector<IntegerRange<T>> SolveInequatilityLE0(T A) {
  using RangeT = IntegerRange<T>;
  return A <= 0 ? std::vector<RangeT>{{-RangeT::inf, RangeT::inf}}
                : std::vector<RangeT>{};
}

// Solve A < 0
template <typename T>
SL std::vector<IntegerRange<T>> SolveInequatilityL0(T A) {
  using RangeT = IntegerRange<T>;
  return A < 0 ? std::vector<RangeT>{{-RangeT::inf, RangeT::inf}}
               : std::vector<RangeT>{};
}

template <typename T>
SL std::vector<IntegerRange<T>> SolveInequatilityGE1(T A, T B);

template <typename T>
SL std::vector<IntegerRange<T>> SolveInequatilityG1(T A, T B);

template <typename T>
SL std::vector<IntegerRange<T>> SolveInequatilityLE1(T A, T B);

template <typename T>
SL std::vector<IntegerRange<T>> SolveInequatilityL1(T A, T B);

// Solve A x + B >= 0
template <typename T>
SL std::vector<IntegerRange<T>> SolveInequatilityGE1(T A, T B) {
  using RangeT = IntegerRange<T>;
  if (A == 0) return SolveInequatilityGE0(B);
  if (A < 0) return SolveInequatilityLE1(-A, -B);
  T t = -B / A;
  while (A * t + B < 0) ++t;
  while (A * (t - 1) + B >= 0) --t;
  return {{t, RangeT::inf}};
}

// Solve A x + B > 0
template <typename T>
SL std::vector<IntegerRange<T>> SolveInequatilityG1(T A, T B) {
  using RangeT = IntegerRange<T>;
  if (A == 0) return SolveInequatilityG0(B);
  if (A < 0) return SolveInequatilityL1(-A, -B);
  T t = -B / A;
  while (A * t + B <= 0) ++t;
  while (A * (t - 1) + B > 0) --t;
  return {{t, RangeT::inf}};
}

// Solve A x + B <= 0
template <typename T>
SL std::vector<IntegerRange<T>> SolveInequatilityLE1(T A, T B) {
  using RangeT = IntegerRange<T>;
  if (A == 0) return SolveInequatilityLE0(B);
  if (A < 0) return SolveInequatilityGE1(-A, -B);
  T t = -B / A;
  while (A * t + B > 0) --t;
  while (A * (t + 1) + B <= 0) ++t;
  return {{-RangeT::inf, t}};
}

// Solve A x + B < 0
template <typename T>
SL std::vector<IntegerRange<T>> SolveInequatilityL1(T A, T B) {
  using RangeT = IntegerRange<T>;
  if (A == 0) return SolveInequatilityL0(B);
  if (A < 0) return SolveInequatilityG1(-A, -B);
  T t = -B / A;
  while (A * t + B >= 0) --t;
  while (A * (t + 1) + B < 0) ++t;
  return {{-RangeT::inf, t}};
}

template <typename T>
SL std::vector<IntegerRange<T>> SolveInequatilityGE2(T A, T B, T C);

template <typename T>
SL std::vector<IntegerRange<T>> SolveInequatilityG2(T A, T B, T C);

template <typename T>
SL std::vector<IntegerRange<T>> SolveInequatilityLE2(T A, T B, T C);

template <typename T>
SL std::vector<IntegerRange<T>> SolveInequatilityL2(T A, T B, T C);

// Solve A x^2 + B x + C >= 0
template <typename T>
SL std::vector<IntegerRange<T>> SolveInequatilityGE2(T A, T B, T C) {
  using RangeT = IntegerRange<T>;
  if (A == 0) return SolveInequatilityGE1(B, C);
  if (A < 0) return SolveInequatilityLE2(-A, -B, -C);
  T delta = B * B - 4 * A * C;
  if (delta <= 0) return {{-RangeT::inf, RangeT::inf}};

  T t1 = (-B - sqrt(delta)) / (2 * A);
  T t2 = (-B + sqrt(delta)) / (2 * A);

  while ((A * t1 + B) * t1 + C < 0) --t1;
  while ((A * t2 + B) * t2 + C < 0) ++t2;
  while (t1 <= t2 && (A * (t1 + 1) + B) * (t1 + 1) + C >= 0) ++t1;
  while (t1 <= t2 && (A * (t2 - 1) + B) * (t2 - 1) + C >= 0) --t2;

  if (t1 >= t2) return {{-RangeT::inf, RangeT::inf}};
  return {{-RangeT::inf, t1}, {t2, RangeT::inf}};
}

// Solve A x^2 + B x + C > 0
template <typename T>
SL std::vector<IntegerRange<T>> SolveInequatilityG2(T A, T B, T C) {
  using RangeT = IntegerRange<T>;
  if (A == 0) return SolveInequatilityG1(B, C);
  if (A < 0) return SolveInequatilityL2(-A, -B, -C);
  T delta = B * B - 4 * A * C;
  if (delta < 0) return {{-RangeT::inf, RangeT::inf}};

  T t1 = (-B - sqrt(delta)) / (2 * A);
  T t2 = (-B + sqrt(delta)) / (2 * A);

  while ((A * t1 + B) * t1 + C <= 0) --t1;
  while ((A * t2 + B) * t2 + C <= 0) ++t2;
  while (t1 <= t2 && (A * (t1 + 1) + B) * (t1 + 1) + C > 0) ++t1;
  while (t1 <= t2 && (A * (t2 - 1) + B) * (t2 - 1) + C > 0) --t2;

  if (t1 >= t2) return {{-RangeT::inf, RangeT::inf}};
  return {{-RangeT::inf, t1}, {t2, RangeT::inf}};
}

// Solve A x^2 + B x + C <= 0
template <typename T>
SL std::vector<IntegerRange<T>> SolveInequatilityLE2(T A, T B, T C) {
  using RangeT = IntegerRange<T>;
  if (A == 0) return SolveInequatilityLE1(B, C);
  if (A < 0) return SolveInequatilityGE2(-A, -B, -C);
  T delta = B * B - 4 * A * C;
  if (delta < 0) return {};

  T t1 = (-B - sqrt(delta)) / (2 * A);
  T t2 = (-B + sqrt(delta)) / (2 * A);

  while ((A * (t1 - 1) + B) * (t1 - 1) + C <= 0) --t1;
  while ((A * (t2 + 1) + B) * (t2 + 1) + C <= 0) ++t2;
  while (t1 <= t2 && (A * t1 + B) * t1 + C > 0) ++t1;
  while (t1 <= t2 && (A * t2 + B) * t2 + C > 0) --t2;

  if (t1 > t2) return {};
  return {{t1, t2}};
}

// Solve A x^2 + B x + C < 0
template <typename T>
SL std::vector<IntegerRange<T>> SolveInequatilityL2(T A, T B, T C) {
  using RangeT = IntegerRange<T>;
  if (A == 0) return SolveInequatilityL1(B, C);
  if (A < 0) return SolveInequatilityG2(-A, -B, -C);
  T delta = B * B - 4 * A * C;
  if (delta <= 0) return {};

  T t1 = (-B - sqrt(delta)) / (2 * A);
  T t2 = (-B + sqrt(delta)) / (2 * A);

  while ((A * (t1 - 1) + B) * (t1 - 1) + C < 0) --t1;
  while ((A * (t2 + 1) + B) * (t2 + 1) + C < 0) ++t2;
  while (t1 <= t2 && (A * t1 + B) * t1 + C >= 0) ++t1;
  while (t1 <= t2 && (A * t2 + B) * t2 + C >= 0) --t2;

  if (t1 > t2) return {};
  return {{t1, t2}};
}
}  // namespace pe
#endif
