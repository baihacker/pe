#ifndef PE_NT_
#define PE_NT_

#include "pe_base"
#include "pe_int128"
#include "pe_mod"
#include "pe_nt_base"
#include "pe_type_traits"

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(int) IsZero(T v) {
  return v ? 0 : 1;
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(int) IntSign(T v) {
  return v < 0 ? -1 : (v > 0);
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(int) IsEven(T v) {
  return (v & 1) == 0 ? 1 : 0;
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(int) IsOdd(T v) {
  return (v & 1) == 0 ? 0 : 1;
}

template <typename T0, typename T1>
SL REQUIRES((is_native_integer<T0>::value && is_native_integer<T1>::value))
    RETURN(int) SameParity(T0 v0, T1 v1) {
  const int x = static_cast<int>(v0 & 1);
  const int y = static_cast<int>(v1 & 1);
  return x == y ? 1 : 0;
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(unsigned int) LowerBits(T x) {
  return static_cast<unsigned int>(x);
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(T) Abs(const T n) {
  return n >= 0 ? n : -n;
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(T) FAbs(const T n) {
  return n >= 0 ? n : -n;
}

SL float FAbs(const float n) { return fabs(n); }

SL double FAbs(const double n) { return fabs(n); }

SL long double FAbs(const long double n) { return fabs(n); }

template <typename T1, typename T2>
SL REQUIRES((is_native_integer<T1>::value && is_native_integer<T2>::value))
    RETURN(T1) Power(T1 x, T2 n) {
  T1 ret = 1;
  for (; n > 0; n >>= 1) {
    if (n & 1) ret = ret * x;
    if (n > 1) x = x * x;
  }
  return ret;
}

template <typename TARGET, typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(TARGET) ToInt(T v) {
  return static_cast<TARGET>(v);
}

template <typename TARGET, typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(TARGET) ToFloat(T v) {
  return static_cast<TARGET>(v);
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(string) ToString(T v) {
  return std::to_string(v);
}

SL string ToString(double v) { return std::to_string(v); }

SL string ToString(long double v) { return std::to_string(v); }

SL string ToString(float v) { return std::to_string(v); }

// PowerMod is in pe_mod

// 90000000599999991

#if 0
// Legacy implementation
SL int64 SqrtI(int64 d) {
  const auto result = static_cast<int64>(sqrt(d));
  return result * result > d ? result - 1 : result;
}

#if PE_HAS_INT128
SL int64 SqrtI(int128 d) {
  const int64 result = sqrt(static_cast<long double>(d));
  return static_cast<int128>(result) * result > d ? result - 1 : result;
}
#endif
#endif

#if defined(COMPILER_MSVC)
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(T) SqrtI(T d) {
  const auto result = static_cast<T>(sqrt((long double)d));
  return result * result > d ? result - 1 : result;
}
#else
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(T) SqrtI(T v) {
  return static_cast<T>(sqrt(static_cast<long double>(v)));
}
#endif

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(T)
    NRootIInternal(T v, int n) {
  // n > 2 && v > 1
  T r = static_cast<T>(
      pow(static_cast<long double>(v), static_cast<long double>(1.) / n));
#if defined(COMPILER_MSVC)
  // Avoid floating round error when the compiler is msvc.
  if (r > 2) {
    --r;
  }
#endif
  // If r is 0, the for loop may take a long time.
  if (r < 1) {
    r = 1;
  }
  for (T nextr = r + 1;; ++nextr) {
    T t = v;
    for (int i = 0; i < n; ++i) {
      t /= nextr;
      if (t == 0) {
        return r;
      }
    }
    r = nextr;
  }
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(T) RootI(T v, int n) {
  PE_ASSERT(n >= 0);
  if (n == 0) {
    return 1;
  }
  if (n == 1) {
    return v;
  }
  if (v == 0 || v == 1) {
    return v;
  }
  if (v == -1) {
    PE_ASSERT(n % 2 == 1);
    return v;
  }
  if (n == 2) {
    PE_ASSERT(v > 0);
    return SqrtI(v);
  }
  return v > 0 ? NRootIInternal(v, n) : -NRootIInternal(-v, n);
}

SL int64 SquareRootSafe(int64 n) {
  if (n <= 0) return 0;
  if (n == 1) return 1;
  for (int64 test = SqrtI(n);; ++test) {
    const int64 t = test * test;
    if (t == n) return test;
    if (t > n) return 0;
  }
  return 0;
}

SL int64 SquareRootUnsafe(int64 n) {
  if (n <= 0) return 0;
  if (n == 1) return 1;
  int64 ret = SqrtI(n);
  return ret * ret == n ? ret : 0;
}

SL int64 SquareRoot(int64 n) {
  if (n <= 0) return 0;
  if (n == 1) return 1;
  // see Donald L. Graham, Donald E. Knuth, Oren Patashnik, CONCRETE
  // MATHEMATICS, pp 70-72
  // int64 ret = static_cast<int64>(sqrt(n + 0.5));
  int64 ret = SqrtI(n);
  return ret * ret == n ? ret : 0;
}

template <typename T1, typename T2>
SL tuple<T1, int64> ExtractFactor(T1 A, T2 B) {
  int64 c = 0;
  while (A && A % B == 0) A = static_cast<T1>(A / B), ++c;
  return tuple<T1, int64>{A, c};
}

// Greatest common divisor and extend greatest common divisor
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(T) Gcd(T __m, T __n) {
  while (__n != 0) {
    T __t = __m % __n;
    __m = __n;
    __n = __t;
  }
  return __m;
}

// #if !defined(COMPILER_MSVC) && !PE_HAS_CPP17
template <typename T0, typename T1>
SL REQUIRES((is_native_integer<T0>::value && is_native_integer<T1>::value))
    RETURN_T(IntPromotionT(T0, T1)) Gcd(T0 __m, T1 __n) {
  using ResultType = typename BiggerIntegralN<T0, T1>::type;
  return Gcd(static_cast<ResultType>(__m), static_cast<ResultType>(__n));
}
// #endif

template <typename T>
SL T Gcd(T a) {
  return a;
}

template <typename TH, typename... TT>
SL IntPromotion(TH, TT...) Gcd(TH a, TT... b) {
  return Gcd(a, Gcd(b...));
}

template <typename T>
SL REQUIRES(is_native_integer<T>::value) RETURN(T)
    Gcd(std::initializer_list<T> init) {
  T ret = 0;
  for (auto& v : init) {
    if (ret == 0) {
      ret = v;
    } else {
      ret = Gcd(ret, v);
    }
  }
  return ret;
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value && is_signed<T>::value)) RETURN(T)
    ExGcdImpl(T a, T b, T& x, T& y) {
  if (b == 0) {
    x = 1;
    y = 0;
    return a;
  }

  T x1 = 0, y1 = 0;
  const T ret = ExGcdImpl(b, a % b, x1, y1);
  // b * x1 + (a%b) * y1 = ret
  // b * x1 + (a - a / b * b) * y1 = ret
  // b * x1 + a * y1 - a / b * b * y1 = ret
  // y1 * a + (x1 - a / b * y1) b = ret
  x = y1;
  y = x1 - a / b * y1;
  return ret;
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value && is_signed<T>::value)) RETURN(T)
    ExGcd(T a, T b, T& x, T& y) {
  PE_ASSERT(a != 0 || b != 0);
  const T r = ExGcdImpl(a, b, x, y);
  PE_ASSERT(a * x + b * y == r);
  return r;
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value && is_signed<T>::value))
    RETURN(tuple<T, T, T>) ExGcd(T a, T b) {
  PE_ASSERT(a != 0 || b != 0);
  T x = 0, y = 0;
  const T r = ExGcdImpl(a, b, x, y);
  PE_ASSERT(a * x + b * y == r);
  return tuple<T, T, T>{r, x, y};
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value && is_signed<T>::value)) RETURN(T)
    ModInv(T a, T mod) {
  T b = mod, s = 1, t = 0, old_a = a;
  while (b > 0) {
    swap(s -= t * (a / b), t);
    swap(a %= b, b);
  }
  if (a > 1) {
    cerr << "mod inv error: " << old_a << " " << mod << endl;
    exit(1);
  }
  return T(s) < 0 ? s + mod : s;
}

// p is prime
SL int64 InvOf(int64 x, int64 p) { return PowerModEx(x, p - 2, p); }

// solve equation a x = b (mod m)
// return 0 and set u = -1 and v = 0 if failed
// return 1, x = v (mod u)
template <typename T>
SL REQUIRES((is_native_integer<T>::value && is_signed<T>::value)) RETURN(int)
    SolveLinearEquation(T a, T b, T m, T& v, T& u) {
  v = 0;
  u = 0;

  PE_ASSERT(m);

  if (m < 0) m = -m;

  if (sizeof(T) <= 8) {
    PE_ASSERT(m <= PE_SOI63);
  }

  a %= m;
  b %= m;

  if (a < 0) a += m;
  if (b < 0) b += m;

  T xx = 0, yy = 0, d = ExGcd(a, m, xx, yy);

  if (b % d) return 0;

  xx = (xx % m + m) % m;
  xx = xx * (b / d) % m;

  u = m / d;
  v = xx % u;

  return 1;
}

// solve equation x = a (mod m1) x = b (mod m2)
// return 0 and set u = 0 and t = 0 if failed
// return 1, x = v (mod u)
template <typename T>
SL REQUIRES((is_native_integer<T>::value && is_signed<T>::value)) RETURN(int)
    Crt2(T a, T m1, T b, T m2, T& v, T& u) {
  v = 0;
  u = 0;

  PE_ASSERT(m1 != 0 && m2 != 0);
  if (m1 < 0) m1 = -m1;
  if (m2 < 0) m2 = -m2;
  // x = a (mod m1)
  // x = b (mod m2)
  // x = k0 m1 + a
  // k0 m1 + a = b (mod m2)
  // k0 m1 = b - a (mod m2)
  a %= m1;
  b %= m2;
  if (a < 0) a = -a;
  if (b < 0) b = -b;

  T s = 0, t = 0;
  if (!SolveLinearEquation(m1, b - a, m2, t, s)) return 0;
  // k0 = k1 * s + t
  // x = (k1 * s + t) * m1 + a
  // x = k1 * s * m1 + (a + t * m1)

  u = s * m1;
  v = ((a + t * m1) % u + u) % u;
  return 1;
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value && is_signed<T>::value))
    RETURN(tuple<int, T, T>) Crt2(T a, T m1, T b, T m2) {
  T v = 0, u = 0;
  int r = Crt2(a, m1, b, m2, v, u);
  return tuple<int, T, T>{r, v, u};
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value && is_signed<T>::value))
    RETURN(tuple<int, T, T>) CrtN(const T* val, const T* mod, int n) {
  PE_ASSERT(val != NULL && mod != NULL);
  T v = 0, u = 1;
  int have = 1;
  for (int i = 0; i < n; ++i) {
    tie(have, v, u) = Crt2(v, u, val[i], mod[i]);
    if (!have) {
      return tuple<int, T, T>{0, 0, 0};
    }
  }
  return tuple<int, T, T>{have, v, u};
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value && is_signed<T>::value))
    RETURN(tuple<int, T, T>) CrtN(const vector<T>& val, const vector<T>& mod) {
  return CrtN<T>(&val[0], &mod[0], val.size());
}

SL int IsSquareFreeNormal(int64 n) {
  for (auto& iter : Factorize(n))
    if (iter.second > 1) {
      return 0;
    }
  return 1;
}

SL int IsSquareFreeByPmask(int64 n) {
  while (n != 1) {
    int now = pmask[n];
    int c = 0;
    while (n % now == 0) n /= now, ++c;
    if (c > 1) return 0;
  }
  return 1;
}

SL int IsSquareFree(int64 n) {
  if (n <= 0) {
    return 0;
  }

  for (int i = 0; i < pcnt; ++i) {
    if (n <= maxp) {
      return IsSquareFreeByPmask(n);
    }
    const int64 p = plist[i];
    const int64 test = p * p;
    if (test > n) break;
    int c = 0;
    while (n % p == 0) n /= p, ++c;
    if (c > 1) return 0;
  }
  return 1;
}

/**
 * dest[0] = 0
 * dest[1] = 1
 * dest[2] = 1 / 2
 * dest[n-1] = 1 / (n-1)
 * dest[n] = 1 / n
 *
 * n can be greater than or equal to mod
 */
template <typename T, typename M>
SL void InitInv(T* dest, int64 n, M mod) {
  PE_ASSERT(n >= 1);
  dest[0] = 0;
  if (n >= 1) {
    dest[1] = 1;
  }
  auto maxi = min(n, static_cast<int64>(mod) - 1);
  for (int i = 2; i <= maxi; ++i) {
    const auto t = mod / i;
    const auto k = mod % i;
    const auto v = MulModEx(t, t, mod);
    const auto u = MulModEx(dest[k], dest[k], mod);
    dest[i] = static_cast<T>(MulModEx(i, MulModEx(v, u, mod), mod));
  }
  for (auto i = mod; i <= n; ++i) {
    dest[i] = dest[i - mod];
  }
}

#if 0
/**
 * dest[0] = 1
 * dest[1] = s
 * dest[2] = s(s+1)
 * dest[e-s+1]=s(s+1)...e
 */
template <typename T>
SL void InitSeqProd(T* dest, T s, T e, int64 mod) {
  dest[0] = 1;

  const int cnt = (int)(e - s + 1);
  T i = s;
  for (int j = 1; j <= cnt; ++i, ++j) {
    dest[j] = MulModEx(dest[j - 1], i, mod);
  }
}

template <typename T>
SL void InitSeqProd(T* dest, T e, int64 mod) {
  InitSeqProd<T>(dest, 1, e, mod);
}

/**
 * dest[0] = 1
 * dest[1] = 1/s
 * dest[2] = 1/(s(s+1))
 * dest[e-s+1]=1/(s(s+1)...e)
 * lastv = 1/(s*(s+1)...e)
 */
template <typename T>
SL void InitSeqProdInvLastv(T* dest, T s, T e, T mod, T lastv = 0) {
  if (lastv == 0) {
    lastv = 1;
    for (T i = s; i <= e; ++i) {
      lastv = MulModEx(lastv, i, mod);
    }
    lastv = PowerModEx(lastv, mod - 2, mod);
  }
  const int cnt = (int)(e - s + 1);
  dest[0] = 1;
  dest[cnt] = lastv;

  T i = e;
  for (int j = cnt - 1; j > 0; --j) {
    dest[j] = MulModEx(dest[j + 1], i--, mod);
  }
}

template <typename T>
SL void InitSeqProdInv(T* dest, T s, T e, T mod) {
  InitSeqProdInvLastv<T>(dest, s, e, mod, 0);
}

template <typename T>
SL void InitSeqProdInv(T* dest, T e, T mod) {
  InitSeqProdInvLastv<T>(dest, 1, e, mod, 0);
}
#endif

/**
 * dest[0] = 1
 * dest[1] = s
 * dest[2] = s(s+1)
 * dest[e-s+1]=s(s+1)...e
 * idest[0] = 1
 * idest[1] = 1/s
 * idest[2] = 1/(s(s+1))
 * idest[e-s+1]=1/(s(s+1)...e)
 */
template <typename T>
SL void InitSeqProd2(T* dest, T* idest, T s, T e, T mod) {
  if (dest == nullptr && idest == nullptr) {
    return;
  }
  const int cnt = static_cast<int>(e - s + 1);
  T lastv = 0;
  if (dest == nullptr) {
    lastv = 1;
    for (T i = s; i <= e; ++i) {
      lastv = MulModEx(lastv, i, mod);
    }
  } else {
    dest[0] = lastv = 1;
    for (T i = s, j = 1; i <= e; ++i, ++j) {
      dest[j] = lastv = MulModEx(lastv, i, mod);
    }
  }
  if (idest == nullptr) {
    return;
  }
  lastv = PowerModEx(lastv, mod - 2, mod);
  idest[0] = 1;
  idest[cnt] = lastv;

  T i = e;
  for (int j = cnt - 1; j > 0; --j) {
    idest[j] = MulModEx(idest[j + 1], i--, mod);
  }
}

template <typename T>
SL void InitSeqProd2(T* dest, T* idest, T e, T mod) {
  InitSeqProd2<T>(dest, idest, 1, e, mod);
}

template <typename T, int D>
SL void InitComb(T (*comb)[D], int n, int64 mod) {
  const int64 ONE = 1 % mod;
  for (int i = 0; i <= n; ++i) {
    for (int j = 1; j < i; ++j)
      comb[i][j] =
          j == 0 ? ONE : AddMod(comb[i - 1][j - 1], comb[i - 1][j], mod);
    comb[i][0] = comb[i][i] = ONE;
  }
}

// Primitive Root
namespace pr {

/*
  test, find the primitive of a prime
*/
SL bool IsPr(int64 x, int64 p, const vector<pair<int64, int>>& f) {
  return std::none_of(std::begin(f), std::end(f),
                      [=](const pair<int64, int>& it) {
                        return PowerModEx(x, (p - 1) / it.first, p) == 1;
                      });
}

SL bool IsPr(int64 x, int64 p) { return IsPr(x, p, Factorize(p - 1)); }

SL int64 FindPr(int64 p) {
  if (p <= 1) return -1;
  if (p == 2) return 1;
  auto fp1 = Factorize(p - 1);
  for (int64 i = 2;; ++i)
    if (IsPr(i, p, fp1)) return i;
  return -1;
}

SL int64 FindPr(int64 p, const vector<pair<int64, int>>& fp1) {
  if (p <= 1) return -1;
  if (p == 2) return 1;
  for (int64 i = 2;; ++i)
    if (IsPr(i, p, fp1)) return i;
  return -1;
}

SL int64 Ind(int64 a, int64 pr, int64 p) {
  using map_t = unordered_map<int64, int>;
  PE_ASSERT(a > 0);
  int64 inv_pr = InvOf(pr, p);
  auto mx = static_cast<int64>(sqrt(double(p - 1) + 0.5));
  if (mx * mx != p - 1) ++mx;
  map_t mem;
  int64 t1 = 1, t2 = a;
  for (unsigned int i = 0; i <= mx - 1; ++i) {
    mem[t2] = i;
    t2 = t2 * inv_pr % p;
  }
  int64 temp = PowerModEx(pr, mx, p);
  for (unsigned int i = 0; i <= mx - 1; ++i) {
    auto where = mem.find(t1);
    if (where != mem.end()) {
      return i * mx + where->second;
    }
    t1 = t1 * temp % p;
  }
  return -1;
}

class IndSolver {
  using map_t = unordered_map<int64, int>;
  static int64 SquareRootForInd(int64 x) {
    auto ret = static_cast<int64>(sqrt(double(x)));
    if (ret * ret < x) ++ret;
    PE_ASSERT(ret * ret >= x);
    return ret;
  }

 public:
  IndSolver(const int64 p, int64 pr = -1)
      : p_(p), pr_(pr < 0 ? FindPr(p) : pr), mx_(SquareRootForInd(p_ - 1)) {
    const int64 inv_pr = InvOf(pr_, p);
    int64 t = 1;
    for (int i = 0; i <= mx_ - 1; ++i) {
      mem_[t] = i;
      t = t * inv_pr % p_;
    }
  }

  int64 operator()(int64 a) const {
    PE_ASSERT(a > 0);
    a %= p_;

    const int64 temp = PowerModEx(pr_, mx_, p_);
    const int64 inv_a = InvOf(a, p_);
    int64 t = 1;

    for (int i = 0; i <= mx_ - 1; ++i) {
      auto where = mem_.find(MulMod(t, inv_a, p_));
      if (where != mem_.end()) {
        return i * mx_ + where->second;
      }
      t = t * temp % p_;
    }

    return -1;
  }

  int64 pr() const { return pr_; }

 private:
  const int64 p_;
  const int64 pr_;
  const int64 mx_;
  map_t mem_;
};
}  // namespace pr

// returns x where x^2 = n mod p
// if no solution, return -1.
// https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm
int64 SquareRootModImpl(int64 n, int64 p) {
  if (p == 2) {
    return n;
  }
  if (n == 0) {
    return 0;
  }
  if (PowerModEx(n, (p - 1) / 2, p) == p - 1) {
    return -1;
  }
  if (p % 4 == 3) {
    return PowerModEx(n, (p + 1) >> 2, p);
  }
  int64 Q = p - 1, S = 0;
  while (Q % 2 == 0) Q >>= 1, ++S;
  int64 z = 1;
  while (PowerModEx(z, (p - 1) >> 1, p) == 1) ++z;
  int64 M = S, c = PowerModEx(z, Q, p);
  int64 t = PowerModEx(n, Q, p), R = PowerModEx(n, (Q + 1) >> 1, p);
  for (;;) {
    if (t == 0) return -1;
    if (t == 1) return R;
    int64 i = 0, tt = t;
    while (tt != 1) tt = MulModEx(tt, tt, p), ++i;
    int64 b = PowerModEx(c, 1 << (M - i - 1), p);
    M = i;
    c = MulModEx(b, b, p);
    t = MulModEx(t, c, p);
    R = MulModEx(R, b, p);
  }
}

vector<int64> SquareRootMod(int64 n, int64 p) {
  const int64 x = SquareRootModImpl(n, p);
  if (x != -1) {
    const int64 y = x == 0 ? 0 : p - x;
    return x == y ? vector<int64>{x} : vector<int64>{x, y};
  } else {
    return vector<int64>{};
  }
}

vector<int64> RootMod(int64 a, int64 n, int64 p, int64 retCnt = -1) {
  if (p == 2) {
    return vector<int64>{a};
  }
  if (a == 0) {
    return vector<int64>{0};
  }
  pr::IndSolver sv(p);
  const int64 r = sv(a);
  if (r == -1) return vector<int64>{};
  // x^n = a mod p
  // n log_x = r mod q
  const int64 q = p - 1;
  int64 u, v;
  if (SolveLinearEquation(n % q, r % q, q, u, v) == 0) {
    return vector<int64>{};
  }
  vector<int64> result;
  int64 coe = PowerModEx(sv.pr(), v, p);
  int64 x = PowerModEx(sv.pr(), u, p);
  int64 oldx = x;
  do {
    if (retCnt < 0 || static_cast<int64>(result.size()) < retCnt) {
      result.push_back(x);
    } else {
      break;
    }
    x = MulModEx(x, coe, p);
  } while (oldx != x);
  return result;
}

#if PE_HAS_INT128
namespace two_squares_internal {
SL void FactorizeByPmask(int64 n, vector<pair<int64, int>>& ret) {
  while (n != 1) {
    int now = pmask[n];
    int c = 0;
    while (n % now == 0) n /= now, ++c;
    if (c) {
      if ((now & 3) == 3) {
        if (IsOdd(c)) {
          vector<pair<int64, int>>{}.swap(ret);
          return;
        }
      }
      ret.emplace_back(static_cast<int64>(now), c);
    }
  }
}

// n > 2
SL vector<pair<int64, int>> Factorize(int64 n) {
  vector<pair<int64, int>> ret;

  int p2 = 0;
  while (IsEven(n)) n >>= 1, ++p2;
  if (p2 > 0) {
    ret.emplace_back(2LL, p2);
  }

  for (int i = 1; i < pcnt; ++i) {
    if (n <= maxp) {
      two_squares_internal::FactorizeByPmask(n, ret);
      return ret;
    }
    const int64 p = plist[i];
    const int64 test = p * p;
    if (test > n) break;
    int c = 0;
    while (n % p == 0) n /= p, ++c;
    if (c) {
      if ((p & 3) == 3) {
        if (IsOdd(c)) {
          return vector<pair<int64, int>>();
        }
      }
      ret.emplace_back(p, c);
    }
  }
  if (n != 1) {
    if ((n & 3) == 3) {
      return vector<pair<int64, int>>();
    }
    ret.emplace_back(n, 1);
  }
  return ret;
}

// (x+yi)(a+bi)
SL void GaussMul(int64& x, int64& y, int64 a, int64 b) {
  const int64 xx = x * a - b * y;
  const int64 yy = x * b + a * y;
  x = xx, y = yy;
}
}  // namespace two_squares_internal

// 4k+1 primes p = x^2+y^2 (x >= 0, y >= 0)
// 2 = 1^2 + 1^2
// 0, 1 are handled as special case.
SL vector<pair<int64, int64>> PrimeTwoSquares(const int64 p) {
  if (p == 0) {
    return vector<pair<int64, int64>>{{0LL, 0LL}};
  } else if (p == 1) {
    return vector<pair<int64, int64>>{{0LL, 1LL}};
  } else if (p == 2) {
    return vector<pair<int64, int64>>{{1LL, 1LL}};
  }
  if ((p & 3) != 1) {
    return vector<pair<int64, int64>>{};
  }
  int128 y = 1, x = 2;
  for (x = 2; PowerModEx(x, (p - 1) >> 1, p) != p - 1; ++x)
    ;
  x = PowerModEx(x, (p - 1) >> 2, p);

  for (int128 s = x * x + y * y; s != p;) {
    const int128 k = s / p, k2 = k >> 1;
    int128 a = (x % k + k) % k, b = (y % k + k) % k;
    if (a > k2) a = k - a;
    if (b > k2) b = k - b;
    if ((x * a + y * b) % k) swap(a, b);
    const int128 u = (x * a + y * b) / k, v = (b * x - a * y) / k;
    x = u, y = v;
    s = x * x + y * y;
  }
  if (y < 0) y = -y;
  if (x < 0) x = -x;
  if (x > y) swap(x, y);
  return vector<pair<int64, int64>>{{x, y}};
}

SL void TwoSquaresImpl(int now, const vector<pair<int64, int>>& f, int64 u,
                       int64 v, vector<pair<int64, int64>>& result) {
  if (now == sz(f)) {
    u = Abs(u), v = Abs(v);
    if (u > v) swap(u, v);
    result.emplace_back(u, v);
  } else {
    const auto& item = f[now];
    if (item.first == 2) {
      for (int i = 0; i < item.second; ++i) {
        two_squares_internal::GaussMul(u, v, 1, 1);
      }
      TwoSquaresImpl(now + 1, f, u, v, result);
    } else if ((item.first & 3) == 3) {
      const int64 t = item.first;
      int64 me = 1;
      for (int i = 0, j = item.second >> 1; i < j; ++i) me *= t;
      TwoSquaresImpl(now + 1, f, u * me, v * me, result);
    } else {
      auto t = PrimeTwoSquares(item.first);
      const int64 a = t[0].first, b = t[0].second;
      vector<pair<int64, int64>> U, V;
      {
        int64 x = 1, y = 0;
        for (int i = 0; i <= item.second; ++i) {
          U.emplace_back(x, y);
          two_squares_internal::GaussMul(x, y, a, b);
        }
        x = 1, y = 0;
        for (int i = 0; i <= item.second; ++i) {
          V.emplace_back(x, y);
          two_squares_internal::GaussMul(x, y, a, -b);
        }
      }
      for (int i = 0, j = item.second; i <= item.second; ++i, --j) {
        int64 uu = u, vv = v;
        two_squares_internal::GaussMul(uu, vv, U[i].first, U[i].second);
        two_squares_internal::GaussMul(uu, vv, V[j].first, V[j].second);
        TwoSquaresImpl(now + 1, f, uu, vv, result);
      }
    }
  }
}

SL vector<pair<int64, int64>> TwoSquaresImpl(
    const vector<pair<int64, int>>& f) {
  vector<pair<int64, int64>> ret;
  TwoSquaresImpl(0, f, 1, 0, ret);
  sort(all(ret));
  ret.resize(unique(ret.begin(), ret.end()) - ret.begin());
  return ret;
}

SL vector<pair<int64, int64>> TwoSquares(const vector<pair<int64, int>>& f) {
  for (auto& iter : f) {
    if ((iter.first & 3) == 3) {
      if (IsOdd(iter.second)) {
        return vector<pair<int64, int64>>{};
      }
    }
  }
  return TwoSquaresImpl(f);
}

// Represent n as two squares: n = x^2 + y^2 where 0 <= x <= y.
SL vector<pair<int64, int64>> TwoSquares(const int64 n) {
  if (n == 0) {
    return vector<pair<int64, int64>>{{0LL, 0LL}};
  } else if (n == 1) {
    return vector<pair<int64, int64>>{{0LL, 1LL}};
  } else if (n == 2) {
    return vector<pair<int64, int64>>{{1LL, 1LL}};
  }
  auto f = two_squares_internal::Factorize(n);
  if (sz(f) == 0) {
    return vector<pair<int64, int64>>{};
  }
  return TwoSquaresImpl(f);
}

SL void ExpandTwoSquares(vector<pair<int64, int64>>& ret,
                         pair<int64, int64> p) {
  ret.emplace_back(p.first, p.second);
  if (p.first != 0) {
    ret.emplace_back(-p.first, p.second);
  }
  if (p.second != 0) {
    ret.emplace_back(p.first, -p.second);
  }
  if (p.first != 0 && p.second != 0) {
    ret.emplace_back(-p.first, -p.second);
  }
}

SL vector<pair<int64, int64>> TwoSquaresFull(const int64 n) {
  if (n == 0) {
    return vector<pair<int64, int64>>{{0LL, 0LL}};
  }
  auto tmp = TwoSquares(n);
  vector<pair<int64, int64>> ret;
  ret.reserve(tmp.size() * 4);
  for (auto& iter : tmp) {
    ExpandTwoSquares(ret, iter);
    if (iter.first != iter.second) {
      ExpandTwoSquares(ret, {iter.second, iter.first});
    }
  }
  return ret;
}
#endif

template <typename T>
SL std::vector<int> ToBaseK(T n, int k, int width = 0) {
  if (n == 0) {
    return width <= 1 ? vector<int>{0} : vector<int>(width, 0);
  }
  PE_ASSERT(n >= 0 || k < 0);
  PE_ASSERT(Abs(k) >= 2);
  if (width <= 0) {
    std::vector<int> ret;
    while (n != 0) {
      int m = n % k;
      n /= k;
      if (m < 0) {
        m -= k;
        ++n;
      }
      ret.push_back(m);
    }
    return ret;
  } else {
    std::vector<int> ret(width, 0);
    for (int i = 0; i < width; ++i) {
      int m = n % k;
      n /= k;
      if (m < 0) {
        m -= k;
        ++n;
      }
      ret[i] = m;
    }
    return ret;
  }
}

template <typename T>
SL T FromBaseK(const std::vector<int>& vec, int k) {
  T ret = 0;
  const int size = static_cast<int>(vec.size());
  for (int i = size - 1; i >= 0; --i) ret = ret * k + vec[i];
  return ret;
}

// 65701
#endif
/*

*/
