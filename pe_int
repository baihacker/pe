#ifndef PE_INT_
#define PE_INT_

#include "pe_base"
#include "pe_int128"
#include "pe_type_traits"
#include "pe_bit"

namespace pe {
// Operation on builtin integers
template <typename T>
SL constexpr REQUIRES((is_builtin_integer_v<T>)) RETURN(int) IsZero(T v) {
  return v ? 0 : 1;
}

template <typename T>
SL constexpr REQUIRES((is_builtin_integer_v<T>)) RETURN(int) IntSign(T v) {
  return v < 0 ? -1 : (v > 0);
}

template <typename T>
SL constexpr REQUIRES((is_builtin_integer_v<T>)) RETURN(int) IsEven(T v) {
  return (v & 1) == 0 ? 1 : 0;
}

template <typename T>
SL constexpr REQUIRES((is_builtin_integer_v<T>)) RETURN(int) IsOdd(T v) {
  return (v & 1) == 0 ? 0 : 1;
}

template <typename T0, typename T1>
SL constexpr REQUIRES((is_builtin_integer_v<T0> && is_builtin_integer_v<T1>))
    RETURN(int) SameParity(T0 v0, T1 v1) {
  const int x = static_cast<int>(v0 & 1);
  const int y = static_cast<int>(v1 & 1);
  return x == y ? 1 : 0;
}

template <typename T>
SL constexpr REQUIRES((is_builtin_integer_v<T>)) RETURN(unsigned int)
    LowerBits(T x) {
  return static_cast<unsigned int>(x);
}

template <typename T>
SL constexpr REQUIRES((is_builtin_integer_v<T>)) RETURN(T) Abs(const T n) {
  return n >= 0 ? n : -n;
}

template <typename T>
SL constexpr REQUIRES((is_builtin_integer_v<T>)) RETURN(T) FAbs(const T n) {
  return n >= 0 ? n : -n;
}

SL float FAbs(const float n) { return std::fabs(n); }

SL double FAbs(const double n) { return std::fabs(n); }

SL long double FAbs(const long double n) { return std::fabs(n); }

template <typename T, typename TN>
SL constexpr REQUIRES((is_builtin_integer_v<T> && is_builtin_integer_v<TN>))
    RETURN(T) Power(T x, TN n) {
  PE_ASSERT(n >= 0);
  T ret = 1;
  for (; n > 0; n >>= 1) {
    if (n & 1) ret = ret * x;
    if (n > 1) x = x * x;
  }
  return ret;
}

template <typename TARGET, typename T>
SL constexpr REQUIRES((is_builtin_integer_v<T>)) RETURN(TARGET) ToInt(T v) {
  return static_cast<TARGET>(v);
}

template <typename TARGET, typename T>
SL constexpr REQUIRES((is_builtin_integer_v<T>)) RETURN(TARGET) ToFloat(T v) {
  return static_cast<TARGET>(v);
}

template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(std::string) ToString(T v) {
  return pe::to_string(v);
}

SL std::string ToString(double v) { return pe::to_string(v); }

SL std::string ToString(long double v) { return pe::to_string(v); }

SL std::string ToString(float v) { return pe::to_string(v); }

template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(std::string)
    ToBinString(T v, int width = 0) {
  static const char* bin_char = "01";
  if (width == 0) {
    width = sizeof(T) * 8;
  }
  using UnsignedT = typename pe_make_unsigned<T>::type;
  UnsignedT unsigned_v = v;
  // TODO(baihacker): initialize it with characters in c++20
  std::string result;
  for (int i = 0; i < width; ++i, unsigned_v >>= 1) {
    result += bin_char[static_cast<int>(unsigned_v & 1)];
  }
  std::reverse(result.begin(), result.end());
  return result;
}

template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(std::string)
    ToHexString(T v, int width = 0) {
  static const char* hex_char = "0123456789ABCDEF";
  if (width == 0) {
    width = sizeof(T) * 2;
  }
  using UnsignedT = typename pe_make_unsigned<T>::type;
  UnsignedT unsigned_v = v;
  // TODO(baihacker): initialize it with characters in c++20
  std::string result;
  for (int i = 0; i < width; ++i, unsigned_v >>= 4) {
    result += hex_char[static_cast<int>(unsigned_v & 15)];
  }
  std::reverse(result.begin(), result.end());
  return result;
}

template <typename T>
SL std::tuple<T, T> Div(const T& l, const T& r) {
  return {l / r, l % r};
}

#if PE_HAS_CPP20
template <class T>
concept PeComparable = requires(T v) {
  v < v;
  v <= v;
  v > v;
  v >= v;
  v == v;
  v != v;
  v <=> v;
};
template <class T>
concept PeNumberUtil = requires(T v) {
  requires PeComparable<T>;
  IsZero(v);
  IntSign(v);
  IsEven(v);
  IsOdd(v);
  SameParity(v, v);
  LowerBits(v);
  Abs(v);
  FAbs(v);
  Power(v, 10);
  ToInt<char>(v);
  ToInt<unsigned char>(v);
  ToInt<signed char>(v);
  ToInt<int>(v);
  ToInt<unsigned int>(v);
  ToInt<signed int>(v);
  ToInt<short int>(v);
  ToInt<unsigned short int>(v);
  ToInt<long int>(v);
  ToInt<signed long int>(v);
  ToInt<unsigned long int>(v);
  ToInt<long long int>(v);
  ToInt<signed long long int>(v);
  ToInt<unsigned long long int>(v);
#if PE_HAS_INT128
  ToInt<int128>(v);
  ToInt<uint128>(v);
#endif
  ToFloat<float>(v);
  ToFloat<double>(v);
  ToFloat<long double>(v);
  ToString(v);
  Div(v, v);
};
static_assert(PeNumberUtil<char>);
static_assert(PeNumberUtil<unsigned char>);
static_assert(PeNumberUtil<signed char>);
static_assert(PeNumberUtil<int>);
static_assert(PeNumberUtil<unsigned int>);
static_assert(PeNumberUtil<signed int>);
static_assert(PeNumberUtil<short int>);
static_assert(PeNumberUtil<unsigned short int>);
static_assert(PeNumberUtil<long int>);
static_assert(PeNumberUtil<signed long int>);
static_assert(PeNumberUtil<unsigned long int>);
static_assert(PeNumberUtil<long long int>);
static_assert(PeNumberUtil<signed long long int>);
static_assert(PeNumberUtil<unsigned long long int>);
#if PE_HAS_INT128
static_assert(PeNumberUtil<int128>);
static_assert(PeNumberUtil<uint128>);
#endif
#endif

// Modular arithmetic is implemented in pe_mod.
// Other utilities are implemented in pe_nt_base and pe_nt.

namespace internal {
template <typename T>
SL void FixSize(std::vector<T>& v) {
  if (std::empty(v)) v.push_back(0);
  int now = static_cast<int>(std::size(v)) - 1;
  while (now > 0 && v[now] == 0) --now;
  v.resize(now + 1);
}

template <typename T>
SL std::vector<T> AbsDivide(const std::vector<T>& l, const std::vector<T>& r,
                            std::vector<T>& remain) {
  std::vector<T> result;
  remain = l;

  const int r_size = static_cast<int>(std::size(r));
  int pos = static_cast<int>(std::size(l)) - 1;
  int end = pos - r_size + 1;
  for (; end >= 0;) {
    if (pos - end + 1 < r_size) {
      result.push_back(0);
      --end;
      continue;
    }
    if (remain[pos] == 0) {
      --pos;
      continue;
    }
    int gt = 1;
    if (pos - end + 1 == r_size) {
      for (int i = pos, j = r_size - 1; i >= end; --i, --j) {
        if (remain[i] < r[j]) {
          gt = 0;
          break;
        } else if (remain[i] > r[j]) {
          break;
        }
      }
    }
    result.push_back(gt);
    if (gt == 0) {
      --end;
      continue;
    }

    int borrow = 0;
    int i = end, j = 0;
    for (; j < r_size; ++i, ++j) {
      int next_borrow = 0;
      T t = remain[i];
      while (t < r[j] + borrow) {
        t += 2;
        ++next_borrow;
      }
      remain[i] = t - r[j] - borrow;
      borrow = next_borrow;
    }

    for (; i <= pos; ++i) {
      int next_borrow = 0;
      int t = remain[i];
      while (t < borrow) {
        t += 2;
        ++next_borrow;
      }
      remain[i] = t - borrow;
      borrow = next_borrow;
    }
    --end;
  }

  if (std::empty(result)) result.push_back(0);
  std::reverse(result.begin(), result.end());
  FixSize(result);
  FixSize(remain);
  return result;
}

template <typename T>
SL std::vector<T> AbsDivide(const int k, const std::vector<T>& l,
                            const std::vector<T>& r, std::vector<T>& remain) {
  if (k == 1) {
    return AbsDivide(l, r, remain);
  }

  const T mask = (1U << k) - 1;

  std::vector<std::vector<T>> tdata;
  tdata.push_back({0});
  tdata.push_back(r);
  for (int i = 2; i < 1 << k; ++i) {
    const std::vector<T>& a = tdata[i - 1];
    const std::vector<T>& b = r;
    const int sizea = static_cast<int>(std::size(a));
    const int sizeb = static_cast<int>(std::size(b));
    const int size = std::max(sizea, sizeb);
    std::vector<T> result;
    T inc = 0;
    for (int j = 0; j < size; ++j) {
      T x = inc;
      if (j < sizea) x += a[j];
      if (j < sizeb) x += b[j];
      result.push_back(x & mask);
      inc = x >> k;
    }
    while (inc > 0) {
      result.push_back(inc & mask);
      inc >>= k;
    }
    tdata.push_back(result);
  }

  std::vector<T> result;
  remain = l;

  const int r_size = static_cast<int>(std::size(r));
  int pos = static_cast<int>(std::size(l)) - 1;
  int end = pos - r_size + 1;

  for (; end >= 0;) {
    if (pos - end + 1 < r_size) {
      result.push_back(0);
      --end;
      continue;
    }
    if (remain[pos] == 0) {
      --pos;
      continue;
    }
    int idx = remain[pos] / (r[r_size - 1] + 1);
    int is_equal = 0;
    while (idx < (1 << k)) {
      const std::vector<T>& who = tdata[idx];
      int cmp = 0;
      if (std::size(who) < pos - end + 1) {
        ++idx;
        continue;
      }
      if (std::size(who) > pos - end + 1) {
        break;
      }
      for (int i = pos, j = static_cast<int>(std::size(who)) - 1; i >= end;
           --i, --j) {
        if (who[j] > remain[i]) {
          cmp = 1;
          break;
        } else if (who[j] < remain[i]) {
          cmp = -1;
          break;
        }
      }
      if (cmp == 1 || cmp == 0) {
        if (cmp == 0) {
          is_equal = 1;
        }
        break;
      }
      ++idx;
    }
    if (is_equal) {
      result.push_back(idx);
      for (int i = pos; i >= end; --i) {
        remain[i] = 0;
      }
      --end;
    } else {
      --idx;
      result.push_back(idx);
      std::vector<T>& who = tdata[idx];
      const int size = static_cast<int>(std::size(who));
      int borrow = 0;
      int i = end, j = 0;
      for (; j < size; ++i, ++j) {
        int next_borrow = 0;
        T t = remain[i];
        while (t < who[j] + borrow) {
          t += 1 << k;
          ++next_borrow;
        }
        remain[i] = t - who[j] - borrow;
        borrow = next_borrow;
      }

      for (; i <= pos; ++i) {
        int next_borrow = 0;
        int t = remain[i];
        while (t < borrow) {
          t += 1 << k;
          ++next_borrow;
        }
        remain[i] = t - borrow;
        borrow = next_borrow;
      }
      --end;
    }
  }

  if (std::empty(result)) result.push_back(0);
  std::reverse(result.begin(), result.end());
  FixSize(result);
  FixSize(remain);
  return result;
}
}  // namespace internal
}  // namespace pe
#endif
