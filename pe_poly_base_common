#ifndef PE_POLY_BASE_COMMON_
#define PE_POLY_BASE_COMMON_

#include "pe_base"
#include "pe_int128"
#include "pe_mod"
#include "pe_type_traits"
#include "pe_nt"

template <typename T>
SL void PolyMulWrapper(const T* X, int64 n, const T* Y, int64 m, T* result,
                       int64 mod,
                       void (*impl)(const T*, int64, const T*, int64, T*,
                                    int64)) {
  int64 s1 = 0, s2 = 0;
  int64 e1 = n, e2 = m;
  while (s1 < e1 && X[s1] == 0) ++s1;
  while (s1 < e1 && X[e1 - 1] == 0) --e1;
  while (s2 < e2 && Y[s2] == 0) ++s2;
  while (s2 < e2 && Y[e2 - 1] == 0) --e2;

  if (s1 >= e1 || s2 >= e2) {
    std::fill(result, result + n + m - 1, 0);
    return;
  }

  impl(X + s1, e1 - s1, Y + s2, e2 - s2, result + s1 + s2, mod);
  std::fill(result, result + s1 + s2, 0);
  std::fill(result + e1 + e2 - 1, result + n + m - 1, 0);
}

template <typename T>
SL void AdjustPolyLeadingZero(vector<T>& v) {
  int64 now = static_cast<int64>(v.size()) - 1;
  while (now > 0 && v[now] == 0) --now;
  v.resize(now + 1);
}

#define POLY_MUL_IMPL(PolyMul, PolyMulInternal)                             \
  template <typename T>                                                     \
  SL void PolyMul(const T* X, int64 n, const T* Y, int64 m, T* result,      \
                  int64 mod) {                                              \
    using unsignedT = typename pe_make_unsigned<T>::type;                   \
    PolyMulWrapper<unsignedT>(reinterpret_cast<const unsignedT*>(X), n,     \
                              reinterpret_cast<const unsignedT*>(Y), m,     \
                              reinterpret_cast<unsignedT*>(result), mod,    \
                              &PolyMulInternal<unsignedT>);                 \
  }                                                                         \
                                                                            \
  template <typename T>                                                     \
  SL vector<T> PolyMul(const vector<T>& X, const vector<T>& Y, int64 mod) { \
    const int64 n = static_cast<int64>(X.size());                           \
    const int64 m = static_cast<int64>(Y.size());                           \
    const int64 ret_size = n + m - 1;                                       \
    vector<T> result(ret_size);                                             \
    PolyMul(&X[0], n, &Y[0], m, &result[0], mod);                           \
    return result;                                                          \
  }

// For input:
// size q >= std::max(deg X - deg Y + 1, 1)
// size r >= m
// For output:
// deg q = std::max(deg X - deg Y + 1, 1)
// For C-style method: deg r = deg Y (with possible leading zeros)
// For C++ style method: deg r <= deg Y (the leading zeros are ignored)
#define POLY_DIV_AND_MOD_IMPL(PolyDivAndMod, PolyDivAndModInternal)            \
  template <typename T>                                                        \
  SL REQUIRES((is_native_integer<T>::value)) RETURN(void)                      \
      PolyDivAndMod(const T* X, const int64 n, const T* Y, const int64 m,      \
                    T* q, T* r, int64 mod) {                                   \
    using unsignedT = typename pe_make_unsigned<T>::type;                      \
    PolyDivAndModInternal<unsignedT>(reinterpret_cast<const unsignedT*>(X), n, \
                                     reinterpret_cast<const unsignedT*>(Y), m, \
                                     reinterpret_cast<unsignedT*>(q),          \
                                     reinterpret_cast<unsignedT*>(r), mod);    \
  }                                                                            \
                                                                               \
  template <typename T>                                                        \
  SL REQUIRES((is_native_integer<T>::value))                                   \
      RETURN(tuple<vector<T>, vector<T>>)                                      \
          PolyDivAndMod(const vector<T>& X, const vector<T>& Y, int64 mod) {   \
    const int64 n = static_cast<int64>(X.size());                              \
    const int64 m = static_cast<int64>(Y.size());                              \
                                                                               \
    vector<T> q(std::max<int64>(n - m + 1, 1LL));                              \
    vector<T> r(m);                                                            \
    PolyDivAndMod(&X[0], n, &Y[0], m, &q[0], &r[0], mod);                      \
                                                                               \
    r[m] = 0;                                                                  \
    AdjustPolyLeadingZero(r);                                                  \
    return std::make_tuple(std::move(q), std::move(r));                        \
  }

#define POLY_DIV_IMPL(PolyDiv, PolyDivAndMod)                                  \
  template <typename T>                                                        \
  SL REQUIRES((is_native_integer<T>::value)) RETURN(void) PolyDiv(             \
      const T* X, const int64 n, const T* Y, const int64 m, T* q, int64 mod) { \
    PolyDivAndMod(X, n, Y, m, q, reinterpret_cast<T*>(0), mod);                \
  }                                                                            \
                                                                               \
  template <typename T>                                                        \
  SL REQUIRES((is_native_integer<T>::value)) RETURN(vector<T>)                 \
      PolyDiv(const vector<T>& X, const vector<T>& Y, int64 mod) {             \
    const int64 n = static_cast<int64>(X.size());                              \
    const int64 m = static_cast<int64>(Y.size());                              \
                                                                               \
    vector<T> q(std::max<int64>(n - m + 1, 1LL));                              \
    PolyDiv(&X[0], n, &Y[0], m, &q[0], mod);                                   \
    return std::move(q);                                                       \
  }

#define POLY_MOD_IMPL(PolyMod, PolyDivAndMod)                                  \
  template <typename T>                                                        \
  SL REQUIRES((is_native_integer<T>::value)) RETURN(void) PolyMod(             \
      const T* X, const int64 n, const T* Y, const int64 m, T* r, int64 mod) { \
    PolyDivAndMod(X, n, Y, m, reinterpret_cast<T*>(0), r, mod);                \
  }                                                                            \
                                                                               \
  template <typename T>                                                        \
  SL REQUIRES((is_native_integer<T>::value)) RETURN(vector<T>)                 \
      PolyMod(const vector<T>& X, const vector<T>& Y, int64 mod) {             \
    const int64 n = static_cast<int64>(X.size());                              \
    const int64 m = static_cast<int64>(Y.size());                              \
                                                                               \
    vector<T> r(m);                                                            \
    PolyMod(&X[0], n, &Y[0], m, &r[0], mod);                                   \
    AdjustPolyLeadingZero(r);                                                  \
    return std::move(r);                                                       \
  }

#endif