#ifndef PE_INT128_
#define PE_INT128_

#include "pe_base"

#if PE_HAS_INT128
SL void PrintInt128(int128 x) {
  char buff[64];
  int top = 0;
  if (x != 0) {
    uint128 y = reinterpret_cast<uint128&>(x);
    uint128 z = (~y) + 1;
    if (x < 0 || y == z) buff[top++] = '-', y = z;
    int last = top;
    while (y > 0) buff[top++] = y % 10 + '0', y /= 10;
    reverse(buff + last, buff + top);
  } else {
    buff[top++] = '0';
  }
  buff[top] = 0;
  printf(buff);
}

SL void PrintInt128(uint128 x) {
  char buff[64];
  int top = 0;
  if (x != 0) {
    uint128 y = const_cast<uint128&>(x);
    while (y > 0) buff[top++] = y % 10 + '0', y /= 10;
    reverse(buff, buff + top);
  } else {
    buff[top++] = '0';
  }
  buff[top] = 0;
  printf(buff);
}

SL ostream& operator<<(ostream& o, int128 x) {
  char buff[64];
  int top = 0;
  if (x != 0) {
    uint128 y = reinterpret_cast<uint128&>(x);
    uint128 z = (~y) + 1;
    if (x < 0 || y == z) buff[top++] = '-', y = z;
    int last = top;
    while (y > 0) buff[top++] = y % 10 + '0', y /= 10;
    reverse(buff + last, buff + top);
  } else {
    buff[top++] = '0';
  }
  buff[top] = 0;
  return o << buff;
}

SL ostream& operator<<(ostream& o, uint128 x) {
  char buff[64];
  int top = 0;
  if (x != 0) {
    uint128 y = const_cast<uint128&>(x);
    while (y > 0) buff[top++] = y % 10 + '0', y /= 10;
    reverse(buff, buff + top);
  } else {
    buff[top++] = '0';
  }
  buff[top] = 0;
  return o << buff;
}

SL string ToString(int128 x) {
  stringstream ss;
  ss << x;
  return ss.str();
}

SL string ToString(uint128 x) {
  stringstream ss;
  ss << x;
  return ss.str();
}

SL string to_string(int128 x) { return ToString(x); }

SL string to_string(uint128 x) { return ToString(x); }

inline int128 operator"" _i128(const char* sv, size_t /*sc*/) {
  int128 r = 0;
  int s = 1;
  while (*sv) {
    int now = *sv++;
    if (now == '-')
      s = -s;
    else if (now == '+')
      ;
    else
      r = r * 10 + now - '0';
  }
  return s > 0 ? r : -r;
}

inline uint128 operator"" _u128(const char* sv, size_t /*sc*/) {
  uint128 r = 0;
  while (*sv) {
    int now = *sv++;
    if (now == '+')
      ;
    else
      r = r * 10 + now - '0';
  }
  return r;
}

namespace std {
#ifndef __GLIBCXX_TYPE_INT_N_0
SL int128 Abs(int128 x) { return x >= 0 ? x : -x; }
#endif

SL uint128 Abs(uint128 x) { return x; }

#ifndef __GLIBCXX_TYPE_INT_N_0
SL int128 FAbs(int128 x) { return x >= 0 ? x : -x; }
#endif

SL uint128 FAbs(uint128 x) { return x; }

template <>
struct make_unsigned<int128> {
  using type = uint128;
};

template <>
struct make_unsigned<uint128> {
  using type = uint128;
};

template <>
struct make_signed<int128> {
  using type = int128;
};

template <>
struct make_signed<uint128> {
  using type = int128;
};

template <>
struct is_unsigned<int128> {
  enum { value = false };
};

template <>
struct is_unsigned<uint128> {
  enum { value = true };
};

template <>
struct is_signed<int128> {
  enum { value = true };
};

template <>
struct is_signed<uint128> {
  enum { value = false };
};

template <>
struct is_integral<int128> {
  using value_type = bool;
  enum { value = true };
  using type = std::integral_constant<bool, value>;
};

template <>
struct is_integral<uint128> {
  using value_type = bool;
  enum { value = true };
  using type = std::integral_constant<bool, value>;
};

#ifndef __GLIBCXX_TYPE_INT_N_0
template <>
struct numeric_limits<uint128> {
  static constexpr uint128 max() { return static_cast<uint128>(-1); }
  static constexpr uint128 min() { return 0; }
  static constexpr uint128 lowest() { return min(); }
  static constexpr bool is_signed = false;
  static constexpr bool is_integer = true;
};

template <>
struct numeric_limits<int128> {
  static constexpr int128 max() {
    return static_cast<int128>(numeric_limits<uint128>::max() >> 1);
  }
  static constexpr int128 min() { return -max() - 1; }
  static constexpr int128 lowest() { return min(); }
  static constexpr bool is_signed = true;
  static constexpr bool is_integer = true;
};
#endif

template <>
struct hash<int128> {
  size_t operator()(int128 val) const noexcept {
    return static_cast<size_t>(val);
  }
};

template <>
struct hash<uint128> {
  size_t operator()(uint128 val) const noexcept {
    return static_cast<size_t>(val);
  }
};
}  // namespace std

#endif

#endif
