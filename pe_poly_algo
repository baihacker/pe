#ifndef PE_POLY_ALGO_
#define PE_POLY_ALGO_

#include "pe_base"
#include "pe_type_traits"
#include "pe_mod"
#include "pe_mat"
#include "pe_nt"
#include "pe_poly_base"

namespace pe {
// Initializes bernoulli number modulo mod: B[0]...B[n].
// B[1] = -1/2
// invs[n] should be available.
SL void InitBernoulliNumber(int64* dest, int64 n, int64* invs, int64 mod) {
  std::vector<uint64> t(n);
  uint64 v = 1;
  for (int64 i = 0; i < n; ++i) {
    v = MulMod(v, invs[i + 1], mod);
    t[i] = v;
  }

  std::vector<uint64> result = PolyInv<uint64>(t, n, mod);

  uint64 c = 1;
  dest[0] = result[0];
  for (int64 i = 1; i < n; ++i) {
    c = MulMod(c, i, mod);
    dest[i] = MulMod(result[i], c, mod);
  }
}

// Initializes bernoulli number modu: B[0]...B[n].
// B[1] = -1/2
SL void InitBernoulliNumber(int64* dest, int64 n, int64 mod) {
  std::vector<int64> invs(n + 1);
  InitInverse(std::data(invs), n, mod);
  InitBernoulliNumber(dest, n, std::data(invs), mod);
}

// Generates bernoulli number modulo mod: B[0]...B[n].
// B[1] = -1/2
SL std::vector<int64> GenBernoulliNumber(int64 n, int64 mod) {
  std::vector<int64> invs(n + 1);
  InitInverse(std::data(invs), n, mod);
  std::vector<int64> dest(n + 1);
  InitBernoulliNumber(std::data(dest), n, std::data(invs), mod);
  return dest;
}

// Generates the nth row of the stirling number of the first kind.
// [n, 0], [n, 1], ..., [n, n]
// Formula: x^(n) rising factorial
SL std::vector<int64> GenStirling1(int64 n, int64 mod, int has_sign = 0) {
  PE_ASSERT(n > 0);
  std::vector<int64> t(2 * n);
  if (has_sign) {
    for (int64 i = 0, j = 0; i < 2 * n; i += 2, ++j) {
      t[i] = j == 0 ? 0 : mod - j;
      t[i + 1] = 1;
    }
  } else {
    for (int64 i = 0, j = 0; i < 2 * n; i += 2, ++j) {
      t[i] = j;
      t[i + 1] = 1;
    }
  }
  return PolyBatchMul(t, mod);
}

namespace pmod {
// Generates the nth column of the stirling number of the first kind.
// [0, n], [1, n], ..., [m, n]
// Formula: ((-log(1-x))^m)/m!
// http://oeis.org/A008275
SL std::vector<int64> GenStirling1Column(int64 n, int64 m, int64 mod) {
  std::vector<int64> a = PolyLog(std::vector<int64>{1, mod - 1}, m + 1, mod);
  for (int64& i : a) i = i == 0 ? 0 : mod - i;
  std::vector<int64> b = {1};
  for (int64 t = n; t > 0; t >>= 1) {
    if (t & 1) {
      b = PolyMul(b, a, mod);
      if (static_cast<int64>(std::size(b)) > m + 1) b.resize(m + 1);
    }
    if (t > 1) {
      a = PolyMul(a, a, mod);
      if (static_cast<int64>(std::size(a)) > m + 1) a.resize(m + 1);
    }
  }
  int64 t = 1;
  for (int64 i = 1; i <= n; ++i) t = MulMod(t, i, mod);
  t = ModInv(t, mod);
  int64 now = 1;
  const int64 limit = std::min(static_cast<int64>(std::size(b)), m + 1);
  for (int64 i = 0; i < limit; ++i) {
    b[i] = MulMod(b[i], now, mod);
    b[i] = MulMod(b[i], t, mod);
    now = MulMod(now, i + 1, mod);
  }
  for (int64 i = limit; i <= m; ++i) {
    b.push_back(0);
  }
  return b;
}

// Returns the nth row of the stirling number of the second kind.
// {n, 0}, {n, 1}, ..., {n, n}
// Formula: (the point value egf of x^n) * (e^(-x))
SL std::vector<int64> GenStirling2(int64 n, int64 mod) {
  // x^n at {0, 1, 2, ..., n}
  std::vector<int64> a(n + 1);
  int64 now = 1;
  for (int64 i = 1; i <= n; ++i) now = MulMod(now, i, mod);
  now = ModInv(now, mod);
  for (int64 i = n; i >= 0; --i) {
    a[i] = MulMod(now, PowerMod(i, n, mod), mod);
    if (i > 0) now = MulMod(now, i, mod);
  }
  // e^(-x)
  std::vector<int64> b = PolyExp<int64>({0, mod - 1}, n + 1, mod);
  std::vector<int64> c = PolyMul(a, b, mod);
  c.resize(n + 1);
  return c;
}
}  // namespace pmod

// Finds the coefficient of x^0,x1,...x^n of f such that: A*f = B
// Returns empty vector if there is no integer solution.
// Complexity: O(size(A) * n)
// Consider PolyMul(A.inv(n+1), B)[n] if it has a better complexity.
SL std::vector<int64> GetGFCoefficientSeries(const std::vector<int64>& A,
                                             const std::vector<int64>& B,
                                             const int64 n, const int64 mod) {
  const int sa = static_cast<int>(std::size(A));
  const int sb = static_cast<int>(std::size(B));
  PE_ASSERT(sa > 0);
  PE_ASSERT(sb > 0);

  ModValue<int64> mod_value =
      SolveLinearEquation<int64>(Mod(A[0], mod), 1, mod);

  if (!mod_value.ok) return {};

  std::vector<int64> result(n + 1, 0);

  // if mod_value.mod < mod, we have more than one solution.
  PE_ASSERT(mod_value.mod == mod);
  const int64 inv_A0 = mod_value.value;
  result[0] = MulMod(inv_A0, Mod(B[0], mod), mod);

  for (int64 i = 1; i <= n; ++i) {
    int64 t = i < sb ? Mod(B[i], mod) : 0;
    for (int64 j = 1; j <= std::min<int64>(i, sa - 1); ++j) {
      t = SubMod(t, MulMod(j < sa ? Mod(A[j], mod) : 0, result[i - j], mod),
                 mod);
    }
    result[i] = MulMod(inv_A0, t, mod);
  }

  return result;
}

// Finds the coefficient of x^n of f such that: A*f = B
// Returns -1 if there is no integer solution.
// O(MatrixMultiplicationComplexity(size(A)) * log n) for big n
SL int64 GetGFCoefficientAt(const std::vector<int64>& A,
                            const std::vector<int64>& B, const int64 n,
                            const int64 mod) {
  const int sa = static_cast<int>(std::size(A));
  const int sb = static_cast<int>(std::size(B));
  PE_ASSERT(sa > 0);
  PE_ASSERT(sb > 0);

  ModValue<int64> mod_value =
      SolveLinearEquation<int64>(Mod(A[0], mod), 1, mod);

  if (!mod_value.ok) return -1;

  const int64 m = std::min(static_cast<int64>(std::max(sa - 1, sb - 1)), n);
  std::vector<int64> result(m + 1, 0);

  // if mod_value.mod < mod, we have more than one solution.
  PE_ASSERT(mod_value.mod == mod);
  const int64 inv_A0 = mod_value.value;
  result[0] = MulMod(inv_A0, Mod(B[0], mod), mod);

  for (int i = 1; i <= m; ++i) {
    int64 t = i < sb ? Mod(B[i], mod) : 0;
    for (int j = 1; j <= std::min(i, sa - 1); ++j) {
      t = SubMod(t, MulMod(j < sa ? Mod(A[j], mod) : 0, result[i - j], mod),
                 mod);
    }
    result[i] = MulMod(inv_A0, t, mod);
  }

  if (m == n) {
    return result[m];
  }

  const int64 D = sa - 1;
#if PE_HAS_INT128
  return MatrixPower(
      D,
      [&](auto& mat, auto& v) {
        for (int i = 0; i < D; ++i) {
          mat(0, i) = MulMod(inv_A0, Mod(i + 1 < sa ? -A[i + 1] : 0, mod), mod);
        }
        for (int i = 1; i < D; ++i) {
          mat(i, i - 1) = 1;
        }
        for (int i = 0; i < D; ++i) {
          v[i] = result[m - i];
        }
      },
      n - m, mod)[0];
#else
  const int64 size = D * D;
  std::string data(size * sizeof(int64) * 3, '\0');
  int64* buffer = reinterpret_cast<int64*>(const_cast<char*>(data.c_str()));

  int64* mat = buffer;
  int64* res = mat + size;
  int64* tmp = res + size;

  for (int i = 0; i < D; ++i) {
    mat[i] = MulMod(inv_A0, Mod(i + 1 < sa ? -A[i + 1] : 0, mod), mod);
  }
  for (int i = 1; i < D; ++i) {
    (mat + i * D)[i - 1] = 1;
  }
  for (int i = 0; i < D; ++i) {
    res[i] = result[m - i];
  }

  for (int64 t = n - m; t > 0; t >>= 1) {
    if (t & 1) {
      MatMulVecMod(mat, res, tmp, mod, static_cast<int>(D));
      std::swap(res, tmp);
    }
    if (t > 1) {
      MatMulMatMod(mat, mat, tmp, mod, static_cast<int>(D));
      std::swap(mat, tmp);
    }
  }
  return res[0];
#endif
}

// Calculates (1^k + 2^k + ... + n^k) % mod based on Bernoulli number
// See
// https://en.wikipedia.org/wiki/Bernoulli_number#Sum_of_powers
// https://blog.csdn.net/acdreamers/article/details/38929067
template <typename T = int64>
struct PowerSumModerB {
  PowerSumModerB(int64 mod, int64 maxk = 128) : mod_(mod), maxk_(maxk) {
    Init(maxk);
  }

  ~PowerSumModerB() = default;

  void Init(int64 maxk = 128) {
    maxk_ = maxk;

    bnl_ = std::vector<int64>(maxk_ + 1);
    invs_ = std::vector<int64>(maxk_ + 2);

    InitInverse(&invs_[0], maxk_ + 1, mod_);
    InitBernoulliNumber(&bnl_[0], maxk_ + 1, &invs_[0], mod_);

    bnl_[1] = mod_ - bnl_[1];
  }

  T operator()(int64 n, int64 k) const { return Cal(n, k); }

  std::vector<T> operator()(const std::vector<int64>& vec) const {
    return Cal(vec);
  }

  // n + 1, n, ..., n-k+1 is not divisible by mod
  // 2, 3, ..., k+1 is not divisible by mod
  T Cal(int64 n, int64 k) const {
    PE_ASSERT(k <= maxk_);
    if (k == 0) {
      return n % mod_;
    }

    int64 ret = 0;

    const int64 invn = PowerMod(n % mod_, mod_ - 2, mod_);
    int64 c = PowerMod(n % mod_, k + 1, mod_);

    for (int64 i = 0; i <= k; ++i) {
      if (i > 0) {
        c = MulMod(c, Mod(k + 2 - i, mod_), mod_);
        c = MulMod(c, invs_[i], mod_);
        c = MulMod(c, invn, mod_);
      }

      if (c == 0) {
        break;
      }

      ret += MulMod(c, bnl_[i], mod_);
      if (ret >= mod_) ret -= mod_;
    }
    ret = MulMod(ret, invs_[k + 1], mod_);
    return ret;
  }

  std::vector<T> Cal(const std::vector<int64>& vec) const {
    PE_ASSERT(std::size(vec) <= maxk_ + 1);
    const int64 size = std::size(vec);
    std::vector<int64> result(size + 1, 0);
    for (int k = 0; k < size; ++k) {
      // comb(k+1, i) b[i] n^(k+1-i) / (k + 1)
      int64 c = invs_[k + 1];
      for (int i = 0; i <= k; ++i) {
        if (i > 0) {
          c = MulMod(c, Mod(k + 2 - i, mod_), mod_);
          c = MulMod(c, invs_[i], mod_);
        }
        int64 x = MulMod(c, bnl_[i], mod_);
        const int idx = k + 1 - i;
        result[idx] = AddMod(result[idx], MulMod(vec[k], x, mod_), mod_);
      }
    }
    std::vector<T> ret(size + 1);
    for (int i = 0; i <= size; ++i) {
      ret[i] = result[i];
    }
    return result;
  }

  T CalSafe(int64 n, int64 k) const {
    PE_ASSERT(k <= maxk_);
    if (k == 0) {
      return n % mod_;
    }

    int64 ret = 0;

    const int64 invn = PowerMod(n % mod_, mod_ - 2, mod_);
    int64 c = PowerMod(n % mod_, k + 1, mod_);

    int64 d = 0;
    for (int64 i = 0; i <= k; ++i) {
      if (i > 0) {
        auto [A, B] = ExtractFactor(k + 2 - i, mod_);
        d += B;
        c = MulMod(c, Mod(A, mod_), mod_);

        std::tie(A, B) = ExtractFactor(i, mod_);
        d -= B;
        c = MulMod(c, invs_[A], mod_);

        c = MulMod(c, invn, mod_);
      }
      if (c == 0) {
        break;
      }
      if (d == 0) {
        ret += MulMod(c, bnl_[i], mod_);
        if (ret >= mod_) ret -= mod_;
      }
    }
    ret = MulMod(ret, invs_[k + 1], mod_);
    return ret;
  }

 private:
  int64 mod_;
  int64 maxk_;
  std::vector<int64> bnl_;
  std::vector<int64> invs_;
};

// Calculates (1^k + 2^k + ... + n^k) % mod based on Bernoulli number
// See
// https://en.wikipedia.org/wiki/Bernoulli_number#Sum_of_powers
// https://blog.csdn.net/acdreamers/article/details/38929067
template <typename T = int64>
struct PowerSumModerB1 {
  PowerSumModerB1(int64 mod, int64 maxk = 128) : mod_(mod), maxk_(maxk) {
    Init(maxk);
  }

  ~PowerSumModerB1() = default;

  void Init(int64 maxk = 128) {
    maxk_ = maxk;

    bnl_ = std::vector<int64>(maxk_ + 1);
    invs_ = std::vector<int64>(maxk_ + 2);

    InitInverse(&invs_[0], maxk_ + 1, mod_);
    InitBernoulliNumber(&bnl_[0], maxk_ + 1, &invs_[0], mod_);
  }

  T operator()(int64 n, int64 k) const { return Cal(n, k); }

  // n + 1, n, ..., n-k+1 is not divisible by mod
  // 2, 3, ..., k+1 is not divisible by mod
  T Cal(int64 n, int64 k) const {
    PE_ASSERT(k <= maxk_);
    if (k == 0) {
      return n % mod_;
    }

    const int64 n1 = (n + 1) % mod_;
    const int64 k1 = k + 1;

    int64 ret = 0;

    int64 c = 1 % mod_;
    for (int64 i = 1; i <= k1; ++i) {
      c = MulMod(c, Mod(k1 - i + 1, mod_), mod_);
      c = MulMod(c, invs_[i], mod_);
      c = MulMod(c, n1, mod_);

      if (c == 0) {
        break;
      }

      ret += MulMod(c, bnl_[k1 - i], mod_);
      if (ret >= mod_) ret -= mod_;
    }
    ret = MulMod(ret, invs_[k1], mod_);
    return ret;
  }

  T CalSafe(int64 n, int64 k) const {
    PE_ASSERT(k <= maxk_);
    if (k == 0) {
      return n % mod_;
    }

    const int64 n1 = (n + 1) % mod_;
    const int64 k1 = k + 1;

    int64 ret = 0;

    int64 c = 1 % mod_;
    int64 d = 0;
    for (int64 i = 1; i <= k1; ++i) {
      auto [A, B] = ExtractFactor(k1 - i + 1, mod_);
      d += B;
      c = MulMod(c, Mod(A, mod_), mod_);

      std::tie(A, B) = ExtractFactor(i, mod_);
      d -= B;
      c = MulMod(c, invs_[A], mod_);

      c = MulMod(c, n1, mod_);

      if (c == 0) {
        break;
      }
      if (d == 0) {
        ret += MulMod(c, bnl_[k1 - i], mod_);
        if (ret >= mod_) ret -= mod_;
      }
    }
    ret = MulMod(ret, invs_[k1], mod_);
    return ret;
  }

 private:
  int64 mod_;
  int64 maxk_;
  std::vector<int64> bnl_;
  std::vector<int64> invs_;
};

// Calculates (1^k + 2^k + ... + n^k) % mod
SL int64 PowerSumMod(int64 n, int64 k, int64 mod) {
  return PowerSumModerB(mod, k).Cal(n, k);
}

// Calculates (1^k + 2^k + ... + n^k) % mod
SL int64 PowerSumModSafe(int64 n, int64 k, int64 mod) {
  return PowerSumModerB(mod, k).CalSafe(n, k);
}

// Calculates (1^k + 2^k + ... + n^k) % mod and stores it in result[k].
// comb[i][j] is Binomial coefficient.
// Complex: O(k^2)
// baihacker pe487
SL std::vector<int64> PowerSumModBatch(int64 n, const int maxk,
                                       const int64 mod) {
  std::vector<int64> a(maxk + 2, 0);
  std::vector<int64> b(maxk + 2, 0);
  int64* from = std::data(a);
  int64* to = std::data(b);
  from[0] = from[1] = Mod(1, mod);

  std::vector<int64> result(maxk + 1);
  result[0] = Mod(n, mod);
  for (int i = 1; i <= maxk; ++i) {
    to[0] = Mod(1, mod);
    to[1] = Mod(i + 1, mod);
    int64 tmp = PowerMod(n, i + 1, mod);
    for (int j = 2; j <= i + 1; ++j) {
      to[j] = AddMod(from[j - 1], from[j], mod);
      int64 t = MulMod(to[j], result[i + 1 - j], mod);
      if (j & 1) {
        tmp = SubMod(tmp, t, mod);
      } else {
        tmp = AddMod(tmp, t, mod);
      }
    }
    result[i] = MulMod(tmp, ModInv(Mod(i + 1, mod), mod), mod);
    std::swap(from, to);
  }

  return result;
}

SL void PowerSumModBatch(int64 n, const int maxk, const int64 mod,
                         int64* result) {
  for (int64 value : PowerSumModBatch(n, maxk, mod)) {
    *result++ = value;
  }
}

namespace internal {
// If the following equations holds for all n
//
// A[n] * C[K] + A[n-1] * C[K-1] + ... + A[n-K] * C[0] = 0
// C[K] = 1
//
// sequence A is linear recurrence with characteristic polynomial C of order K.
// The corresonding matrix is:
//
/*
| -C[K-1] , -C[K-2], ..., -C[1], -C[0] |  A[K-1]
|    1    ,                            |  A[K-2]
|    0    ,    1   ,                   |  ...
|                    ...               |  A[1]
|    0    ,    0   , ...,   1  ,   0   |  A[0]
*/

// Returns the characteristic polynomial C of a linear recurrence sequence.
//
// Berlekamp Massey
// (https://en.wikipedia.org/wiki/Berlekamp%E2%80%93Massey_algorithm)
//
// This implementation can handle the case that terms[0] has no contribution to
// the sequence. i.e. result[0] == 0
SL std::vector<int64> FindLinearRecurrence(Span<const int64> terms,
                                           const int64 mod) {
  const int m = static_cast<int>(std::size(terms));
  const int n = m >> 1;
  PE_ASSERT(n * 2 == m);

  std::vector<int64> r0(m + 1, 0);
  r0[m] = 1;

  std::vector<int64> r1(std::size(terms));
  for (int i = 0; i < m; ++i) {
    r1[i] = terms[m - 1 - i];
  }
  AdjustPolyLeadingZero(r1);
  std::vector<int64> v0 = {0};
  std::vector<int64> v1 = {1};

  while (n + 1 <= std::size(r1)) {
    auto [q, r] = PolyDivAndMod(r0, r1, mod);
    std::vector<int64> v = PolySub(v0, PolyMul(q, v1, mod), mod);
    v0 = std::move(v1);
    v1 = std::move(v);
    r0 = std::move(r1);
    r1 = std::move(r);
  }

  int64 c = ModInv(v1.back(), mod);
  for (int64& v : v1) v = MulMod(c, v, mod);

  return v1;
}
}  // namespace internal

SL int64 LinearRecurrenceValueNext(const std::vector<int64>& char_poly,
                                   Span<const int64> terms, int64 mod) {
  PE_ASSERT(std::size(terms) + 1 >= static_cast<int64>(std::size(char_poly)));

  const int m = static_cast<int>(std::size(char_poly));
  const int idx = static_cast<int>(std::size(terms));

  int64 ret = 0;
  for (int j = 0; j < m - 1; ++j) {
    ret = SubMod(ret, MulMod(char_poly[j], terms[idx - (m - j - 1)], mod), mod);
  }
  return ret;
}

SL int64 LinearRecurrenceValueAt(const std::vector<int64>& char_poly,
                                 Span<const int64> terms, int64 n, int64 mod) {
  if (n < static_cast<int64>(std::size(terms))) {
    return terms[static_cast<int>(n)];
  }

  std::vector<int64> r = PolyPowerModPoly({0, 1}, n, char_poly, mod);

  const int64 m = static_cast<int64>(std::size(r)) - 1;
  int64 ans = 0;
  for (int64 i = 0; i <= m; ++i) {
    ans = AddMod(ans, MulMod(terms[i], r[i], mod), mod);
  }
  return ans;
}

// Returns sum(terms[i], 0 <= i <= n).
SL int64 LinearRecurrenceSumAt(const std::vector<int64>& char_poly,
                               Span<const int64> terms, int64 n, int64 mod) {
  if (n < static_cast<int>(std::size(terms))) {
    return PartialSumAt(terms, n, mod);
  }

  PE_ASSERT(std::size(terms) + 1 >= static_cast<int64>(std::size(char_poly)));

  const int m = static_cast<int>(std::size(char_poly));
  std::vector<int64> sum(m, 0);
  std::vector<int64> values;
  values.reserve(m);
  for (int i = 0; i < m; ++i) {
    int64 t = 0;
    if (i < m - 1) {
      t = terms[i];
    } else {
      t = LinearRecurrenceValueNext(char_poly, values, mod);
    }
    if (i < std::size(terms)) {
      PE_ASSERT(t == terms[i]);
    }
    values.push_back(t);
    sum[i] = i == 0 ? t : AddMod(sum[i - 1], t, mod);
  }

  std::vector<int64> char_poly_s =
      PolySub(PolyShiftLeft(char_poly, 1), char_poly, mod);

  return LinearRecurrenceValueAt(char_poly_s, sum, n, mod);
}

SL int VerifyLinearRecurrence(const std::vector<int64>& char_poly,
                              Span<const int64> terms, int64 mod) {
  int order = static_cast<int>(std::size(char_poly)) - 1;
  for (int i = static_cast<int>(std::size(char_poly)) - 1; i < std::size(terms);
       ++i) {
    int64 value = LinearRecurrenceValueNext(
        char_poly, terms.subspan(i - order, order), mod);
    if (value != Mod(terms[i], mod)) {
      return 0;
    }
  }
  return 1;
}

SL std::optional<std::vector<int64>> FindLinearRecurrence(
    Span<const int64> terms, int64 mod, int min_use = 2) {
  const int len = static_cast<int>(std::size(terms));
  for (int n = (std::max(min_use, 2) + 1) / 2 * 2; n < len; n += 2) {
    std::vector<int64> char_poly =
        internal::FindLinearRecurrence(terms.subspan(0, n), mod);
    if (VerifyLinearRecurrence(char_poly, terms, mod)) {
      return char_poly;
    }
  }
  return std::nullopt;
}

SL std::optional<int64> FindLinearRecurrenceValueAt(Span<const int64> terms,
                                                    int64 n, int64 mod,
                                                    int min_use = 2) {
  if (n < static_cast<int64>(std::size(terms))) {
    return terms[static_cast<int>(n)];
  }

  std::optional<std::vector<int64>> char_poly =
      FindLinearRecurrence(terms, mod, min_use);
  if (char_poly.has_value()) {
    return LinearRecurrenceValueAt(*char_poly, terms, n, mod);
  }
  return std::nullopt;
}

SL std::optional<std::vector<int64>> FindLinearRecurrenceValues(
    Span<const int64> terms, int64 n, int64 mod, int min_use = 2) {
  std::optional<std::vector<int64>> char_poly =
      FindLinearRecurrence(terms, mod, min_use);
  if (!char_poly.has_value()) {
    return std::nullopt;
  }

  const int64 m = static_cast<int64>(std::size(terms));
  std::vector<int64> data(m);
  for (int i = 0; i < m; ++i) {
    data[i] = terms[i];
  }
  for (int64 i = m; i <= n; ++i) {
    int64 value = LinearRecurrenceValueNext(*char_poly, data, mod);
    data.push_back(value);
  }
  return data;
}

template <typename T = int64>
class LinearSequenceRelation {
 public:
  LinearSequenceRelation(const std::vector<T>& seq_relation)
      : seq_relation_(seq_relation) {}
  LinearSequenceRelation(std::vector<T>&& seq_relation)
      : seq_relation_(std::move(seq_relation)) {}

  template <typename AP>
  std::vector<typename AP::RetType> ToCharPoly(const AP& ap) const {
    using RetType = typename AP::RetType;
    const RetType zero = ap.Value(RetType(0));
    if (!seq_relation_.empty()) {
      PE_ASSERT(seq_relation_[0] == zero);
    }
    std::vector<RetType> char_poly;
    for (int i = 1; i < std::size(seq_relation_); ++i) {
      char_poly.push_back(ap.Sub(zero, seq_relation_[i]));
    }
    char_poly.push_back(ap.Value(RetType(1)));
    return char_poly;
  }

  std::vector<T> ToCharPoly() const {
    return ToCharPoly(internal::OperationTraits<T, T>());
  }

  std::vector<int64> ToCharPoly(int64 mod) const {
    return ToCharPoly(internal::OperationTraitsWithMod<T, int64>(mod));
  }

  std::vector<int64> Generate(Span<const int64> terms, int64 n,
                              int64 mod) const {
    const int64 need = n + 1;
    std::vector<int64> ret(need);
    const int64 m = std::min<int64>(need, terms.size());
    for (int64 i = 0; i < m; ++i) {
      ret[i] = terms[i];
    }

    if (need > m) {
      PE_ASSERT(std::size(seq_relation_) > 0);
      PE_ASSERT(std::size(terms) + 1 >= std::size(seq_relation_));
      for (int64 i = m; i < need; ++i) {
        int64 val = seq_relation_[0];
        for (int j = 1; j < seq_relation_.size(); ++j) {
          val = AddMod(val, MulMod(seq_relation_[j], ret[i - j], mod), mod);
        }
        ret[i] = val;
      }
    }
    return ret;
  }

  std::vector<T> Generate(Span<const T> terms, int64 n) const {
    const int64 need = n + 1;
    std::vector<T> ret(need);
    const int64 m = std::min<int64>(need, terms.size());
    for (int64 i = 0; i < m; ++i) {
      ret[i] = terms[i];
    }

    if (need > m) {
      PE_ASSERT(std::size(seq_relation_) > 0);
      PE_ASSERT(std::size(terms) + 1 >= std::size(seq_relation_));
      for (int64 i = m; i < need; ++i) {
        T val = seq_relation_[0];
        for (int j = 1; j < seq_relation_.size(); ++j) {
          val += seq_relation_[j] * ret[i - j];
        }
        ret[i] = val;
      }
    }
    return ret;
  }

  int64 ValueAtWithCharPoly(Span<const int64> terms, int64 n, int64 mod) const {
    if (n < static_cast<int64>(std::size(terms))) {
      return terms[static_cast<int>(n)];
    }

    return LinearRecurrenceValueAt(ToCharPoly(mod), terms, n, mod);
  }

  int64 SumAtWithCharPoly(Span<const int64> terms, int64 n, int64 mod) const {
    if (n < static_cast<int>(std::size(terms))) {
      return PartialSumAt(terms, n, mod);
    }

    return LinearRecurrenceSumAt(ToCharPoly(mod), terms, n, mod);
  }

  int64 ValueAt(Span<const int64> terms, int64 n, int64 mod) const {
    if (n < static_cast<int64>(std::size(terms))) {
      return terms[static_cast<int>(n)];
    }

    PE_ASSERT(std::size(seq_relation_) > 0);
    PE_ASSERT(std::size(terms) + 1 >= std::size(seq_relation_));
    const int d = static_cast<int>(std::size(seq_relation_)) - 1;
    if (seq_relation_[0] == 0) {
      return MatrixPower(
          d,
          [&](auto& m, auto& v) {
            for (int i = 0; i < d; ++i) {
              m(0, i) = seq_relation_[i + 1];
            }
            for (int i = 1; i < d; ++i) {
              m(i, i - 1) = 1;
            }
            for (int i = 0; i < d; ++i) {
              v[i] = terms[d - 1 - i];
            }
          },
          n, mod)[d - 1];
    } else {
      return MatrixPower(
          d + 1,
          [&](auto& m, auto& v) {
            for (int i = 0; i < d; ++i) {
              m(0, i) = seq_relation_[i + 1];
            }
            m(0, d) = 1;
            for (int i = 1; i < d; ++i) {
              m(i, i - 1) = 1;
            }
            m(d, d) = 1;
            for (int i = 0; i < d; ++i) {
              v[i] = terms[d - 1 - i];
            }
            v[d] = seq_relation_[0];
          },
          n, mod)[d - 1];
    }
  }

  int64 SumAt(Span<const int64> terms, int64 n, int64 mod) const {
    if (n < static_cast<int>(std::size(terms))) {
      return PartialSumAt(terms, n, mod);
    }

    PE_ASSERT(std::size(seq_relation_) > 0);
    PE_ASSERT(std::size(terms) + 1 >= std::size(seq_relation_));
    const int d = static_cast<int>(std::size(seq_relation_)) - 1;
    if (seq_relation_[0] == 0) {
      return MatrixPower(
          d + 1,
          [&](auto& m, auto& v) {
            for (int i = 0; i < d; ++i) {
              m(0, i) = seq_relation_[i + 1];
            }
            for (int i = 1; i < d; ++i) {
              m(i, i - 1) = 1;
            }
            m(d, d - 1) = 1;
            m(d, d) = 1;
            for (int i = 0; i < d; ++i) {
              v[i] = terms[d - 1 - i];
            }
            v[d] = 0;
          },
          n + 1, mod)[d];
    } else {
      return MatrixPower(
          d + 2,
          [&](auto& m, auto& v) {
            for (int i = 0; i < d; ++i) {
              m(0, i) = seq_relation_[i + 1];
            }
            m(0, d) = 1;
            for (int i = 1; i < d; ++i) {
              m(i, i - 1) = 1;
            }
            m(d, d) = 1;
            m(d + 1, d - 1) = 1;
            m(d + 1, d + 1) = 1;
            for (int i = 0; i < d; ++i) {
              v[i] = terms[d - 1 - i];
            }
            v[d] = seq_relation_[0];
            v[d + 1] = 0;
          },
          n + 1, mod)[d + 1];
    }
  }

  T ValueAt(Span<const T> terms, int64 n) const {
    if (n < static_cast<int64>(std::size(terms))) {
      return terms[static_cast<int>(n)];
    }

    PE_ASSERT(std::size(seq_relation_) > 0);
    PE_ASSERT(std::size(terms) + 1 >= std::size(seq_relation_));
    const int d = static_cast<int>(std::size(seq_relation_)) - 1;
    if (seq_relation_[0] == T(0)) {
      return MatrixPower<T>(
          d,
          [&](auto& m, auto& v) {
            for (int i = 0; i < d; ++i) {
              m(0, i) = seq_relation_[i + 1];
            }
            for (int i = 1; i < d; ++i) {
              m(i, i - 1) = 1;
            }
            for (int i = 0; i < d; ++i) {
              v[i] = terms[d - 1 - i];
            }
          },
          n)[d - 1];
    } else {
      return MatrixPower<T>(
          d + 1,
          [&](auto& m, auto& v) {
            for (int i = 0; i < d; ++i) {
              m(0, i) = seq_relation_[i + 1];
            }
            m(0, d) = 1;
            for (int i = 1; i < d; ++i) {
              m(i, i - 1) = 1;
            }
            m(d, d) = 1;
            for (int i = 0; i < d; ++i) {
              v[i] = terms[d - 1 - i];
            }
            v[d] = seq_relation_[0];
          },
          n)[d - 1];
    }
  }

  T SumAt(Span<const T> terms, int64 n) const {
    if (n < static_cast<int>(std::size(terms))) {
      return PartialSumAt(terms, n);
    }

    PE_ASSERT(std::size(seq_relation_) > 0);
    PE_ASSERT(std::size(terms) + 1 >= std::size(seq_relation_));
    const int d = static_cast<int>(std::size(seq_relation_)) - 1;
    if (seq_relation_[0] == T(0)) {
      return MatrixPower<T>(
          d + 1,
          [&](auto& m, auto& v) {
            for (int i = 0; i < d; ++i) {
              m(0, i) = seq_relation_[i + 1];
            }
            for (int i = 1; i < d; ++i) {
              m(i, i - 1) = 1;
            }
            m(d, d - 1) = 1;
            m(d, d) = 1;
            for (int i = 0; i < d; ++i) {
              v[i] = terms[d - 1 - i];
            }
            v[d] = 0;
          },
          n + 1)[d];
    } else {
      return MatrixPower<T>(
          d + 2,
          [&](auto& m, auto& v) {
            for (int i = 0; i < d; ++i) {
              m(0, i) = seq_relation_[i + 1];
            }
            m(0, d) = 1;
            for (int i = 1; i < d; ++i) {
              m(i, i - 1) = 1;
            }
            m(d, d) = 1;
            m(d + 1, d - 1) = 1;
            m(d + 1, d + 1) = 1;
            for (int i = 0; i < d; ++i) {
              v[i] = terms[d - 1 - i];
            }
            v[d] = seq_relation_[0];
            v[d + 1] = 0;
          },
          n + 1)[d + 1];
    }
  }

 private:
  std::vector<T> seq_relation_;
};

template <typename T = int64>
class SeqExpr {
 public:
  enum Type { NUMBER = 0, OFFSET = 1, MUL = 2, ADD = 3, SUB = 4 };

  SeqExpr() = default;

  static SeqExpr Number(T value) {
    SeqExpr t;
    t.type_ = NUMBER;
    t.value_ = value;
    return t;
  }

  static SeqExpr Offset(int offset) {
    SeqExpr t;
    t.type_ = OFFSET;
    t.offset_ = offset;
    return t;
  }

  friend SeqExpr operator*(T a, const SeqExpr& b) {
    SeqExpr result;
    result.type_ = MUL;
    result.children_.push_back(Number(a));
    result.children_.push_back(b);
    return result;
  }

  friend SeqExpr operator*(const SeqExpr& a, T b) {
    SeqExpr result;
    result.type_ = MUL;
    result.children_.push_back(Number(b));
    result.children_.push_back(a);
    return result;
  }

  friend SeqExpr operator+(const SeqExpr& a, const SeqExpr& b) {
    SeqExpr result;
    result.type_ = ADD;
    result.children_.push_back(a);
    result.children_.push_back(b);
    return result;
  }

  friend SeqExpr operator+(T a, const SeqExpr& b) {
    SeqExpr result;
    result.type_ = ADD;
    result.children_.push_back(Number(a));
    result.children_.push_back(b);
    return result;
  }

  friend SeqExpr operator+(const SeqExpr& a, T b) {
    SeqExpr result;
    result.type_ = ADD;
    result.children_.push_back(a);
    result.children_.push_back(Number(b));
    return result;
  }

  friend SeqExpr operator-(const SeqExpr& a, const SeqExpr& b) {
    SeqExpr result;
    result.type_ = SUB;
    result.children_.push_back(a);
    result.children_.push_back(b);
    return result;
  }

  friend SeqExpr operator-(T a, const SeqExpr& b) {
    SeqExpr result;
    result.type_ = SUB;
    result.children_.push_back(Number(a));
    result.children_.push_back(b);
    return result;
  }

  friend SeqExpr operator-(const SeqExpr& a, T b) {
    SeqExpr result;
    result.type_ = SUB;
    result.children_.push_back(a);
    result.children_.push_back(Number(b));
    return result;
  }

  template <typename AP>
  std::vector<typename AP::RetType> Evaluate(const AP& ap) const {
    using RetType = typename AP::RetType;
    const RetType zero = ap.Value(RetType(0));
    switch (type_) {
      case NUMBER:
        return {ap.Value(value_)};
      case OFFSET: {
        int pos = Abs(offset_);
        std::vector<RetType> t(pos + 1);
        t[pos] = RetType(1);
        return t;
      }
      case ADD: {
        std::vector<RetType> result;
        for (const auto& item : children_) {
          std::vector<RetType> t = item.Evaluate(ap);
          if (result.empty()) {
            result = std::move(t);
          } else {
            while (result.size() < t.size()) result.push_back(zero);
            for (int i = 0; i < t.size(); ++i)
              result[i] = ap.Add(result[i], t[i]);
          }
        }
        return result;
      }
      case SUB: {
        std::vector<RetType> result;
        for (const auto& item : children_) {
          std::vector<RetType> t = item.Evaluate(ap);
          if (result.empty()) {
            result = std::move(t);
          } else {
            while (result.size() < t.size()) result.push_back(zero);
            for (int i = 0; i < t.size(); ++i)
              result[i] = ap.Mul(result[i], t[i]);
          }
        }
        return result;
      }
      case MUL: {
        RetType c = children_[0].Evaluate(ap)[0];
        std::vector<RetType> result = children_[1].Evaluate(ap);
        for (auto& iter : result) iter = ap.Mul(iter, c);
        return result;
      }
    }
    return {};
  }

  LinearSequenceRelation<T> Evaluate() const {
    return LinearSequenceRelation<T>(
        Evaluate(internal::OperationTraits<T, T>()));
  }

  LinearSequenceRelation<int64> Evaluate(int64 mod) const {
    return LinearSequenceRelation<int64>(
        Evaluate(internal::OperationTraitsWithMod<T, int64>(mod)));
  }

  std::vector<int64> Generate(Span<const int64> terms, int64 n,
                              int64 mod) const {
    return Evaluate(mod).Generate(terms, n, mod);
  }

  std::vector<T> Generate(Span<const T> terms, int64 n) const {
    return Evaluate().Generate(terms, n);
  }

  int64 ValueAt(Span<const int64> terms, int64 n, int64 mod) const {
    return Evaluate(mod).ValueAt(terms, n, mod);
  }

  T ValueAt(Span<const T> terms, int64 n) const {
    return Evaluate().ValueAt(terms, n);
  }

  int64 SumAt(Span<const int64> terms, int64 n, int64 mod) const {
    return Evaluate(mod).SumAt(terms, n, mod);
  }

  T SumAt(Span<const T> terms, int64 n) const {
    return Evaluate().SumAt(terms, n);
  }

  int64 ValueAtWithCharPoly(Span<const int64> terms, int64 n, int64 mod) const {
    return Evaluate(mod).ValueAtWithCharPoly(terms, n, mod);
  }

  int64 SumAtWithCharPoly(Span<const int64> terms, int64 n, int64 mod) const {
    return Evaluate(mod).SumAtWithCharPoly(terms, n, mod);
  }

 private:
  Type type_ = NUMBER;
  int offset_ = 0;
  T value_ = 0;
  std::vector<SeqExpr> children_;
};

template <typename T = int64>
class Sequence {
 public:
  SeqExpr<T> operator[](int offset) const {
    return SeqExpr<T>::Offset(Abs(offset));
  }
  SeqExpr<T> operator()(int offset) const {
    return SeqExpr<T>::Offset(Abs(offset));
  }
};

}  // namespace pe
#endif
