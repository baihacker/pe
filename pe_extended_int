#ifndef PE_EXTENDED_INT_
#define PE_EXTENDED_INT_

#include "pe_base"
#include "pe_type_traits"
#include "pe_int"
#include "pe_bit"
#include "pe_extended_unsigned_int"
#include "pe_extended_signed_int"

namespace std {
template <typename ET, bool is_builtin_integer>
struct numeric_limits<pe::ExtendedUnsignedIntImpl<ET, is_builtin_integer>> {
  using T = pe::ExtendedUnsignedIntImpl<ET, is_builtin_integer>;
  static constexpr T max() { return -1; }
  static constexpr T min() { return 0; }
  static constexpr T lowest() { return min(); }
  static constexpr bool is_signed = false;
  static constexpr bool is_unsigned = true;
  static constexpr bool is_integer = true;
};

template <typename ET, bool is_builtin_integer>
struct numeric_limits<pe::ExtendedSignedIntImpl<ET, is_builtin_integer>> {
  using T = pe::ExtendedSignedIntImpl<ET, is_builtin_integer>;
  static constexpr T max() {
    T t = -1;
    t.ResetHighestBit();
    return t;
  }
  static constexpr T min() {
    T t = 0;
    t.SetHighestBit();
    return t;
  }
  static constexpr T lowest() { return min(); }
  static constexpr bool is_signed = true;
  static constexpr bool is_unsigned = false;
  static constexpr bool is_integer = true;
};
}  // namespace std

namespace pe {
using uint128e = ExtendedUnsignedInt<uint64>;
using int128e = ExtendedSignedInt<uint64>;

#if PE_HAS_INT128
using uint256e = ExtendedUnsignedInt<uint128>;
using int256e = ExtendedSignedInt<uint128>;
#else
using uint256e = ExtendedUnsignedInt<uint128e>;
using int256e = ExtendedSignedInt<uint128e>;
#endif

using uint512e = ExtendedUnsignedInt<uint256e>;
using uint1024e = ExtendedUnsignedInt<uint512e>;

using int512e = ExtendedSignedInt<uint256e>;
using int1024e = ExtendedSignedInt<uint512e>;

}  // namespace pe
#endif
