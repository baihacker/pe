#ifndef PE_FLOAT128_
#define PE_FLOAT128_

#include "pe_base"
#include "pe_int"

#if PE_HAS_FLOAT128
namespace pe {
namespace internal {
SL std::string ToStringFloat128(float128 f, const char* format_string,
                                int dig = 20) {
  char buff[256];
  const int buff_size = sizeof(buff);
  int n = quadmath_snprintf(buff, buff_size, format_string, dig, f);
  if (n < buff_size) {
    return buff;
  }
  n = quadmath_snprintf(NULL, 0, format_string, dig, f);
  if (n <= -1) {
    return "";
  }
  char* str = static_cast<char*>(malloc(n + 1));
  std::string result;
  if (str) {
    quadmath_snprintf(str, n + 1, format_string, dig, f);
    result = str;
  }
  free(str);
  return result;
}
}  // namespace internal

SL std::string ToString(float128 f, int dig = 20) {
  return internal::ToStringFloat128(f, "%#.*Qe", dig);
}

SL std::string ToStringF(float128 f, int dig = 20) {
  return internal::ToStringFloat128(f, "%#.*Qf", dig);
}

SL std::string to_string(float128 x, int dig = 20) { return ToString(x); }

SL float128 Abs(float128 f) { return fabsq(f); }

SL float128 FAbs(float128 f) { return fabsq(f); }

SL float128 Ceil(float128 f) { return ceilq(f); }

SL float128 Floor(float128 f) { return floorq(f); }

SL float128 Trunc(float128 f) { return truncq(f); }

SL float128 Power(float128 f, int p) {
  return powq(f, static_cast<float128>(p));
}

SL std::ostream& operator<<(std::ostream& o, float128 f) {
  return o << ToString(f, 20);
}
}  // namespace pe

#endif

namespace pe {
SL float Abs(const float n) { return std::fabs(n); }

SL double Abs(const double n) { return std::fabs(n); }

SL long double Abs(const long double n) { return std::fabs(n); }

SL float FAbs(const float n) { return std::fabs(n); }

SL double FAbs(const double n) { return std::fabs(n); }

SL long double FAbs(const long double n) { return std::fabs(n); }

SL float Floor(const float n) { return std::floor(n); }

SL double Floor(const double n) { return std::floor(n); }

SL long double Floor(const long double n) { return std::floor(n); }

SL float Ceil(const float n) { return std::ceil(n); }

SL double Ceil(const double n) { return std::ceil(n); }

SL long double Ceil(const long double n) { return std::ceil(n); }

SL float Trunc(const float n) { return std::trunc(n); }

SL double Trunc(const double n) { return std::trunc(n); }

SL long double Trunc(const long double n) { return std::trunc(n); }

SL float Power(const float n, int p) {
  return std::pow(n, static_cast<float>(p));
}

SL double Power(const double n, int p) {
  return std::pow(n, static_cast<double>(p));
}

SL long double Power(const long double n, int p) {
  return std::pow(n, static_cast<long double>(p));
}

namespace internal {
template <typename T>
SL std::string ToStringFloat(T f, const char* format_string, int dig = 20) {
  char buff[256];
  const int buff_size = sizeof(buff);
  int n = snprintf(buff, buff_size, format_string, dig, f);
  if (n < buff_size) {
    return buff;
  }
  n = snprintf(NULL, 0, format_string, dig, f);
  if (n <= -1) {
    return "";
  }
  char* str = static_cast<char*>(malloc(n + 1));
  std::string result;
  if (str) {
    snprintf(str, n + 1, format_string, dig, f);
    result = str;
  }
  free(str);
  return result;
}
}  // namespace internal

SL std::string ToString(float f, int dig = 20) {
  return internal::ToStringFloat<float>(f, "%#.*e", dig);
}

SL std::string ToString(double f, int dig = 20) {
  return internal::ToStringFloat<double>(f, "%#.*e", dig);
}

SL std::string ToString(long double f, int dig = 20) {
  return internal::ToStringFloat<long double>(f, "%#.*Le", dig);
}

SL std::string ToStringF(float f, int dig = 20) {
  return internal::ToStringFloat<float>(f, "%#.*f", dig);
}

SL std::string ToStringF(double f, int dig = 20) {
  return internal::ToStringFloat<double>(f, "%#.*f", dig);
}

SL std::string ToStringF(long double f, int dig = 20) {
  return internal::ToStringFloat<long double>(f, "%#.*Lf", dig);
}
}  // namespace pe

namespace pe {
#if PE_HAS_CPP20

template <class T>
concept PeFloatUtil = requires(T v) {
  requires PeComparable<T>;
  FAbs(v);
  Abs(v);
  Ceil(v);
  Floor(v);
  Trunc(v);

  Power(v, 0);

  ToString(v);
  to_string(v);

  std::cout << v;
};

static_assert(PeFloatUtil<float>);
static_assert(PeFloatUtil<double>);
static_assert(PeFloatUtil<long double>);

#if PE_HAS_FLOAT128
static_assert(PeFloatUtil<float128>);
#endif

#endif
}  // namespace pe

#endif
