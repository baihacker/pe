#ifndef PE_TYPE_TRAITS_
#define PE_TYPE_TRAITS_

#include "pe_base"

#if PE_CPP_VERSION <= 201703L
namespace std {
template <typename T>
struct remove_cvref {
  using type = std::remove_cv_t<std::remove_reference_t<T>>;
};
template <typename T>
using remove_cvref_t = typename remove_cvref<T>::type;
}  // namespace std
#endif

namespace pe {
// A simple concept implementation.
// Example usage:
// template<typename T, typename U>
// REQUIRES((is_builtin_integer_v<T> && pe_is_unsigned_v<U>))
// RETURN(void)  foo(T x, U y)  {}
template <bool is_valid, typename = typename std::enable_if<is_valid>::type>
struct CheckConditionThen {
  template <typename U>
  struct IdenticalType {
    using type = U;
  };
};

#define REQUIRES(...) typename pe::CheckConditionThen<(__VA_ARGS__)>::
#define RETURN(...) template IdenticalType<__VA_ARGS__>::type

// pe type traits

// Forward declaration of integers.
template <typename ET, bool is_builtin>
struct ExtendedUnsignedIntImpl;

template <typename ET, bool is_builtin>
struct ExtendedSignedIntImpl;

class BigInteger;

#if ENABLE_GMP
class MpInteger;
#endif

// is_builtin_integer
template <typename T>
struct is_builtin_integer_impl {
  static constexpr bool value = std::is_integral_v<T>;
};

#if PE_HAS_INT128
template <>
struct is_builtin_integer_impl<int128> {
  static constexpr bool value = true;
};
template <>
struct is_builtin_integer_impl<uint128> {
  static constexpr bool value = true;
};
#endif

template <typename T>
struct is_builtin_integer : public is_builtin_integer_impl<std::decay_t<T>> {};

template <typename T>
inline constexpr bool is_builtin_integer_v = is_builtin_integer<T>::value;

// is_extended_integer
template <typename T>
struct is_extended_integer_impl {
  static constexpr bool value = false;
};

template <typename ET, bool is_builtin>
struct is_extended_integer_impl<ExtendedUnsignedIntImpl<ET, is_builtin>> {
  static constexpr bool value = true;
};

template <typename ET, bool is_builtin>
struct is_extended_integer_impl<ExtendedSignedIntImpl<ET, is_builtin>> {
  static constexpr bool value = true;
};

template <typename T>
struct is_extended_integer : public is_extended_integer_impl<std::decay_t<T>> {
};

template <typename T>
inline constexpr bool is_extended_integer_v = is_extended_integer<T>::value;

// is_builtin_or_extended_integer
template <typename T>
struct is_builtin_or_extended_integer {
  static constexpr bool value =
      is_builtin_integer_v<T> || is_extended_integer_v<T>;
};

template <typename T>
inline constexpr bool is_builtin_or_extended_integer_v =
    is_builtin_or_extended_integer<T>::value;

// is_gbi
template <typename T>
struct is_gbi_impl {
  static constexpr bool value = false;
};

template <>
struct is_gbi_impl<BigInteger> {
  static constexpr bool value = true;
};

#if ENABLE_GMP
template <>
struct is_gbi_impl<MpInteger> {
  static constexpr bool value = true;
};
#endif

template <typename T>
struct is_gbi : public is_gbi_impl<std::decay_t<T>> {};

template <typename T>
inline constexpr bool is_gbi_v = is_gbi<T>::value;

// is_extended_integer_or_gbi
template <typename T>
struct is_extended_integer_or_gbi {
  static constexpr bool value = is_extended_integer_v<T> || is_gbi_v<T>;
};

template <typename T>
inline constexpr bool is_extended_integer_or_gbi_v =
    is_extended_integer_or_gbi<T>::value;

// is_general_integer
template <typename T>
struct is_general_integer_impl {
  static constexpr bool value =
      is_builtin_integer_v<T> || is_extended_integer_v<T> || is_gbi_v<T>;
};

template <typename T>
struct is_general_integer : public is_general_integer_impl<std::decay_t<T>> {};

template <typename T>
inline constexpr bool is_general_integer_v = is_general_integer<T>::value;

// pe_is_signed
template <typename T>
struct pe_is_signed_impl {
  static constexpr bool value = std::is_signed_v<T>;
};

#if PE_HAS_INT128
template <>
struct pe_is_signed_impl<int128> {
  static constexpr bool value = true;
};

template <>
struct pe_is_signed_impl<uint128> {
  static constexpr bool value = false;
};
#endif

template <typename ET, bool is_builtin>
struct pe_is_signed_impl<ExtendedUnsignedIntImpl<ET, is_builtin>> {
  static constexpr bool value = false;
};

template <typename ET, bool is_builtin>
struct pe_is_signed_impl<ExtendedSignedIntImpl<ET, is_builtin>> {
  static constexpr bool value = true;
};

template <typename T>
struct pe_is_signed : public pe_is_signed_impl<std::decay_t<T>> {};

template <typename T>
inline constexpr bool pe_is_signed_v = pe_is_signed<T>::value;

// pe_is_unsigned
template <typename T>
struct pe_is_unsigned_impl {
  static constexpr bool value = std::is_unsigned_v<T>;
};

#if PE_HAS_INT128
template <>
struct pe_is_unsigned_impl<int128> {
  static constexpr bool value = false;
};

template <>
struct pe_is_unsigned_impl<uint128> {
  static constexpr bool value = true;
};
#endif

template <typename ET, bool is_builtin>
struct pe_is_unsigned_impl<ExtendedUnsignedIntImpl<ET, is_builtin>> {
  static constexpr bool value = true;
};

template <typename ET, bool is_builtin>
struct pe_is_unsigned_impl<ExtendedSignedIntImpl<ET, is_builtin>> {
  static constexpr bool value = false;
};

template <typename T>
struct pe_is_unsigned : public pe_is_unsigned_impl<std::decay_t<T>> {};

template <typename T>
inline constexpr bool pe_is_unsigned_v = pe_is_unsigned<T>::value;

// pe_make_signed
template <typename T>
struct pe_make_signed {
  using type = std::make_signed_t<T>;
};

#if PE_HAS_INT128
template <>
struct pe_make_signed<int128> {
  using type = int128;
};

template <>
struct pe_make_signed<uint128> {
  using type = int128;
};
#endif

template <typename ET, bool is_builtin>
struct pe_make_signed<ExtendedUnsignedIntImpl<ET, is_builtin>> {
  using type = typename ExtendedUnsignedIntImpl<ET, is_builtin>::SignedT;
};

template <typename ET, bool is_builtin>
struct pe_make_signed<ExtendedSignedIntImpl<ET, is_builtin>> {
  using type = typename ExtendedSignedIntImpl<ET, is_builtin>::SignedT;
};

// pe_make_unsigned
template <typename T>
struct pe_make_unsigned {
  using type = std::make_unsigned_t<T>;
};

#if PE_HAS_INT128
template <>
struct pe_make_unsigned<int128> {
  using type = uint128;
};

template <>
struct pe_make_unsigned<uint128> {
  using type = uint128;
};
#endif

template <typename ET, bool is_builtin>
struct pe_make_unsigned<ExtendedUnsignedIntImpl<ET, is_builtin>> {
  using type = typename ExtendedUnsignedIntImpl<ET, is_builtin>::UnsignedT;
};

template <typename ET, bool is_builtin>
struct pe_make_unsigned<ExtendedSignedIntImpl<ET, is_builtin>> {
  using type = typename ExtendedSignedIntImpl<ET, is_builtin>::UnsignedT;
};

template <typename T>
using pe_make_unsigned_t = typename pe_make_unsigned<T>::type;

// make_const_arg_type
template <typename T, bool use_value = false>
struct make_const_arg_type_impl {
  using type = std::add_lvalue_reference_t<std::add_const_t<T>>;
};

template <typename T>
struct make_const_arg_type_impl<T, /**use_value=*/true> {
  using type = std::add_const_t<T>;
};

template <typename T>
struct make_const_arg_type
    : public make_const_arg_type_impl<T, (sizeof(T) <=
                                              2 * sizeof(std::nullptr_t) &&
                                          std::is_trivially_copyable_v<T>)> {};

template <typename T>
using make_const_arg_type_t = typename make_const_arg_type<T>::type;

// predicate_all
template <template <typename T> class predicate, typename... TT>
struct predicate_all {
  static constexpr bool value = (predicate<TT>::value && ...);
};

template <template <typename T> class predicate, typename... TT>
inline constexpr bool predicate_all_v = predicate_all<predicate, TT...>::value;

// predicate_any
template <template <typename T> class predicate, typename... TT>
struct predicate_any {
  static constexpr bool value = (predicate<TT>::value || ...);
};

template <template <typename T> class predicate, typename... TT>
inline constexpr bool predicate_any_v = predicate_any<predicate, TT...>::value;

// predicate_none
template <template <typename T> class predicate, typename... TT>
struct predicate_none {
  static constexpr bool value = (!predicate<TT>::value && ...);
};

template <template <typename T> class predicate, typename... TT>
inline constexpr bool predicate_none_v =
    predicate_none<predicate, TT...>::value;

// is_one_of
template <typename T, typename... TT>
struct is_one_of {
  static constexpr bool value =
      (std::is_same_v<std::decay_t<T>, std::decay_t<TT>> || ...);
};

template <typename T, typename... TT>
inline constexpr bool is_one_of_v = is_one_of<T, TT...>::value;

// reduce_type
template <template <typename T1, typename T2> class reducer, typename TH,
          typename... TT>
struct reduce_type {
  using type =
      typename reducer<TH, typename reduce_type<reducer, TT...>::type>::type;
};

template <template <typename T1, typename T2> class reducer, typename TH>
struct reduce_type<reducer, TH> {
  using type = TH;
};

template <template <typename T1, typename T2> class reducer, typename TH,
          typename... TT>
using reduce_type_t = typename reduce_type<reducer, TH, TT...>::type;

// Integer type promotion

// bigger_integral
template <typename T1, typename T2, bool ge, bool same>
struct bigger_integral_impl {
  using type = T1;
};

template <typename T1, typename T2>
struct bigger_integral_impl<T1, T2, false, false> {
  using type = T2;
};

template <typename T1, typename T2>
struct bigger_integral_impl<T1, T2, true, true> {
  using type = pe_make_unsigned_t<T1>;
};

template <typename T1, typename T2, bool is_t1_gbi, bool is_t2_gbi>
struct bigger_integral_handle_gbi;

template <typename T1, typename T2, bool is_t2_gbi>
struct bigger_integral_handle_gbi<T1, T2, true, is_t2_gbi> {
  using type = T1;
};

template <typename T1, typename T2>
struct bigger_integral_handle_gbi<T1, T2, false, true> {
  using type = T2;
};

template <typename T1, typename T2>
struct bigger_integral_handle_gbi<T1, T2, false, false> {
  using U1 = pe_make_unsigned_t<T1>;
  using U2 = pe_make_unsigned_t<T2>;
  using type = typename bigger_integral_impl<T1, T2, (sizeof(T1) >= sizeof(T2)),
                                             std::is_same_v<U1, U2>>::type;
};

template <typename T1, typename T2>
struct bigger_integral {
  using type = typename bigger_integral_handle_gbi<T1, T2, is_gbi_v<T1>,
                                                   is_gbi_v<T2>>::type;
};

template <typename T>
struct bigger_integral<T, T> {
  using type = T;
};

template <typename T1, typename T2>
using bigger_integral_t = typename bigger_integral<T1, T2>::type;

// biggest_integral
template <typename TH, typename... TT>
struct biggest_integral {
  using type = reduce_type_t<bigger_integral, TH, TT...>;
};

template <typename TH, typename... TT>
using biggest_integral_t = typename biggest_integral<TH, TT...>::type;

template <typename TH, typename... TT>
using int_promotion_t = typename biggest_integral<TH, TT...>::type;

// at_least_uint64
template <typename T>
struct at_least_uint64 {
  using type = int_promotion_t<T, uint64>;
};

template <typename T>
using at_least_uint64_t = typename at_least_uint64<T>::type;

// at_least_int64
template <typename T>
struct at_least_int64 {
  using type = int_promotion_t<T, int64>;
};

template <typename T>
using at_least_int64_t = typename at_least_int64<T>::type;

// has_element_access_type
template <typename T, typename = void>
struct has_element_access_type {
  static constexpr bool value = false;
};

template <typename T>
struct has_element_access_type<T,
                               std::void_t<typename T::element_access_type>> {
  static constexpr bool value = true;
};

template <typename T>
inline constexpr bool has_element_access_type_v =
    has_element_access_type<T>::value;

// pe_element_type_traits
template <typename T>
struct pe_element_type_traits {
  using element_type = T;
  // Possible volatile.
  using non_const_element_type = std::remove_const_t<T>;
  using const_element_type = std::add_const_t<T>;

  using value_type = std::remove_cv_t<T>;

  using pointer = T*;
  using const_pointer = const_element_type*;

  using reference = T&;
  using const_reference = const_element_type&;

  using const_arg_type = make_const_arg_type_t<T>;

  static constexpr bool is_element_type_const =
      std::is_same_v<element_type, const_element_type>;
};

// pe_no_ref_element_type_traits
template <typename T>
struct pe_no_ref_element_type_traits {
  using element_type = T;
  // Possible volatile.
  using non_const_element_type = std::remove_const_t<T>;
  using const_element_type = std::add_const_t<T>;

  using value_type = std::remove_cv_t<T>;

  using pointer = T*;
  using const_pointer = const_element_type*;

  using reference = T;
  using const_reference = const_element_type;

  using const_arg_type = make_const_arg_type_t<T>;

  static constexpr bool is_element_type_const =
      std::is_same_v<element_type, const_element_type>;
};

// pe_iterator_traits
template <typename IT>
struct pe_iterator_traits {
  using value_type = typename IT::value_type;

  using reference = typename IT::reference;

  using const_arg_type =
      make_const_arg_type_t<std::remove_reference_t<typename IT::reference>>;
};

template <typename T>
struct pe_iterator_traits<T*> {
  using element_type_traits = pe_element_type_traits<T>;

  using value_type = typename element_type_traits::value_type;

  using reference = typename element_type_traits::reference;

  using const_arg_type = typename element_type_traits::const_arg_type;
};

template <typename T>
struct pe_iterator_traits<const T*> {
  using element_type_traits = pe_element_type_traits<const T>;

  using value_type = typename element_type_traits::value_type;

  using reference = typename element_type_traits::reference;

  using const_arg_type = typename element_type_traits::const_arg_type;
};

// Span like
template <typename T>
struct span_like_impl : public pe_element_type_traits<T> {
  static constexpr bool value = false;
};

template <typename T, uint64 N>
struct span_like_impl<T[N]> : public pe_element_type_traits<T> {
  static constexpr bool value = true;
};

template <typename T>
struct span_like_impl<std::vector<T>> : public pe_element_type_traits<T> {
  static constexpr bool value = true;
};

template <typename T, std::size_t N>
struct span_like_impl<std::array<T, N>> : public pe_element_type_traits<T> {
  static constexpr bool value = true;
};

#if PE_HAS_CPP20 && !defined(COMPILER_MSVC)
template <typename T, std::size_t N>
struct span_like_impl<std::span<T, N>> : public pe_element_type_traits<T> {
  static constexpr bool value = true;
};
#endif

template <typename T>
struct span_like : public span_like_impl<std::remove_reference_t<T>> {};

template <typename T>
inline constexpr bool is_span_like_v = span_like<T>::value;

template <typename... T>
inline constexpr bool is_all_span_like_v = (span_like<T>::value && ...);

template <typename TH, typename... TT>
inline constexpr bool is_same_element_type_v =
    is_all_span_like_v<TH, TT...> &&
    (std::is_same_v<typename span_like<TH>::element_type,
                    typename span_like<TT>::element_type> &&
     ...);

template <typename TH, typename... TT>
inline constexpr bool is_same_const_element_type_v =
    is_all_span_like_v<TH, TT...> &&
    (std::is_same_v<typename span_like<TH>::const_element_type,
                    typename span_like<TT>::const_element_type> &&
     ...);

template <typename TH, typename... TT>
inline constexpr bool is_same_non_const_element_type_v =
    is_all_span_like_v<TH, TT...> &&
    (std::is_same_v<typename span_like<TH>::non_const_element_type,
                    typename span_like<TT>::non_const_element_type> &&
     ...);

}  // namespace pe
#endif
