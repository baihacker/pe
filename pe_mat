#ifndef PE_MAT_
#define PE_MAT_

#include "pe_base"
#include "pe_mod"

template <typename T, int D>
SL void MatMulMat(T (*a)[D], T (*b)[D], T (*c)[D], int N = D) {
  for (int i = 0; i < N; ++i)
    for (int j = 0; j < N; ++j) {
      T s = 0;
      for (int k = 0; k < N; ++k) s += a[i][k] * b[k][j];
      c[i][j] = s;
    }
}

template <typename T>
SL void MatMulMat(T* aa, T* bb, T* cc, int N) {
  for (int i = 0; i < N; ++i)
    for (int j = 0; j < N; ++j) {
      T* a = aa + i * N;
      T* c = cc + i * N;
      T s = 0;
      for (int k = 0; k < N; ++k) s += a[k] * (bb + k * N)[j];
      c[j] = s;
    }
}

template <typename T, int D>
SL void MatMulVec(T (*a)[D], T (*b)[D], T (*c)[D], int N = D) {
  for (int i = 0; i < N; ++i) {
    T s = 0;
    for (int k = 0; k < N; ++k) s += a[i][k] * b[k][0];
    c[i][0] = s;
  }
}

template <typename T, int D>
SL void MatMulVec(T (*a)[D], T* b, T* c, int N = D) {
  for (int i = 0; i < N; ++i) {
    T s = 0;
    for (int k = 0; k < N; ++k) s += a[i][k] * b[k];
    c[i] = s;
  }
}

template <typename T>
SL void MatMulVec(T* aa, T* b, T* c, int N) {
  for (int i = 0; i < N; ++i) {
    T* a = aa + i * N;
    T s = 0;
    for (int k = 0; k < N; ++k) s += a[k] * b[k];
    c[i] = s;
  }
}

template <typename T, int D>
SL void MatMulMatMod(T (*a)[D], T (*b)[D], T (*c)[D], int64 mod, int N = D) {
  for (int i = 0; i < N; ++i)
    for (int j = 0; j < N; ++j) {
      int64 s = 0;
      for (int k = 0; k < N; ++k) {
        s += MulMod(a[i][k], b[k][j], mod);
        if (s >= mod) s -= mod;
      }
      c[i][j] = s % mod;
    }
}

template <typename T>
SL void MatMulMatMod(T* aa, T* bb, T* cc, int64 mod, int N) {
  for (int i = 0; i < N; ++i)
    for (int j = 0; j < N; ++j) {
      T* a = aa + i * N;
      T* c = cc + i * N;
      int64 s = 0;
      for (int k = 0; k < N; ++k) {
        s += MulMod(a[k], (bb + k * N)[j], mod);
        if (s >= mod) s -= mod;
      }
      c[j] = s % mod;
    }
}

template <typename T, int D>
SL void MatMulVecMod(T (*a)[D], T (*b)[D], T (*c)[D], int64 mod, int N = D) {
  for (int i = 0; i < N; ++i) {
    int64 s = 0;
    for (int k = 0; k < N; ++k) {
      s += MulMod(a[i][k], b[k][0], mod);
      if (s >= mod) s -= mod;
    }
    c[i][0] = s;
  }
}

template <typename T, int D>
SL void MatMulVecMod(T (*a)[D], T* b, T* c, int64 mod, int N = D) {
  for (int i = 0; i < N; ++i) {
    int64 s = 0;
    for (int k = 0; k < N; ++k) {
      s += MulMod(a[i][k], b[k], mod);
      if (s >= mod) s -= mod;
    }
    c[i] = s;
  }
}

template <typename T>
SL void MatMulVecMod(T* aa, T* b, T* c, int64 mod, int N) {
  for (int i = 0; i < N; ++i) {
    T* a = aa + i * N;
    int64 s = 0;
    for (int k = 0; k < N; ++k) {
      s += MulMod(a[k], b[k], mod);
      if (s >= mod) s -= mod;
    }
    c[i] = s;
  }
}

#if ENABLE_EIGEN

template <typename T>
using MatT = Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic>;

template <typename _Scalar>
struct NormalMatrixModFixer {
  static void Fix(MatT<_Scalar>& m, const int64 mod) {
    const auto r = m.rows();
    const auto c = m.cols();
    for (int i = 0; i < r; ++i)
      for (int j = 0; j < c; ++j) {
        m(i, j) = RegulateMod(m(i, j), mod);
      }
  }
};

template <typename _Scalar>
struct NModMatrixModFixer {
  static void Fix(MatT<_Scalar>& m) {}
};

template <typename MC, typename S>
struct NModMatrixModFixer<NModNumber<MC, APSBL<S>>> {
  static void Fix(MatT<NModNumber<MC, APSBL<S>>>& m) {
    const auto r = m.rows();
    const auto c = m.cols();
    for (int i = 0; i < r; ++i)
      for (int j = 0; j < c; ++j) {
        m(i, j).FixValue();
      }
  }
};

template <typename MC, typename S>
struct NModMatrixModFixer<NModNumberM<MC, APSBL<S>>> {
  static void Fix(MatT<NModNumberM<MC, APSBL<S>>>& m) {
    const auto r = m.rows();
    const auto c = m.cols();
    for (int i = 0; i < r; ++i)
      for (int j = 0; j < c; ++j) {
        m(i, j).FixValue();
      }
  }
};

template <typename _Scalar>
SL MatT<_Scalar> PowerModImpl(const MatT<_Scalar>& x, int64 n, int64 mod,
                              NModNumberIndicator<0>) {
  using MatrixT = MatT<_Scalar>;

  const int K = x.rows();

  MatrixT e = MatrixT::Identity(K, K);

  MatrixT y = x;
  NormalMatrixModFixer<_Scalar>::Fix(y, mod);

  for (; n; n >>= 1) {
    // cout << "n = " << n << endl;
    if (n & 1) {
      e *= y;
      NormalMatrixModFixer<_Scalar>::Fix(e, mod);
    }
    if (n > 1) {
      y *= y;
      NormalMatrixModFixer<_Scalar>::Fix(y, mod);
    }
  }
  return e;
}

template <typename _Scalar>
SL MatT<_Scalar> PowerModImpl(const MatT<_Scalar>& x, int64 n, int64 mod,
                              NModNumberIndicator<1>) {
  using MatrixT = MatT<_Scalar>;

  PE_ASSERT(mod == _Scalar().Mod());

  const int K = static_cast<int>(x.rows());

  MatrixT e = MatrixT::Identity(K, K);
  MatrixT y = x;

  for (; n; n >>= 1) {
    // cout << "n = " << n << endl;
    if (n & 1) {
      e *= y;
      NModMatrixModFixer<_Scalar>::Fix(e);
    }
    if (n > 1) {
      y *= y;
      NModMatrixModFixer<_Scalar>::Fix(y);
    }
  }
  return e;
}

template <typename _Scalar>
SL MatT<_Scalar> PowerMod(const MatT<_Scalar>& x, int64 n, int64 mod) {
  return PowerModImpl(x, n, mod,
                      NModNumberIndicator<IsNModNumber<_Scalar>::result>());
}

template <typename _Scalar>
SL vector<_Scalar> PowerModImpl(const MatT<_Scalar>& x, int64 n,
                                const vector<_Scalar>& v, int64 mod,
                                NModNumberIndicator<0>) {
  using MatrixT = MatT<_Scalar>;
  const int K = x.rows();

  vector<_Scalar> result(v);
  for (auto& i : result) i = RegulateMod(i, mod);

  MatrixT y = x;
  NormalMatrixModFixer<_Scalar>::Fix(y, mod);

  vector<_Scalar> temp(K, 0);

  for (; n; n >>= 1) {
    // cout << "n = " << n << endl;
    if (n & 1) {
      for (int i = 0; i < K; ++i) {
        _Scalar s = 0;
        for (int j = 0; j < K; ++j) {
          s += y(i, j) * result[j];
        }
        temp[i] = s % mod;
      }
      swap(result, temp);
    }
    if (n > 1) {
      y *= y;
      NormalMatrixModFixer<_Scalar>::Fix(y, mod);
    }
  }
  return result;
}

template <typename _Scalar>
SL vector<_Scalar> PowerModImpl(const MatT<_Scalar>& x, int64 n,
                                const vector<_Scalar>& v, int64 mod,
                                NModNumberIndicator<1>) {
  using MatrixT = MatT<_Scalar>;

  PE_ASSERT(mod == _Scalar().Mod());

  const int K = static_cast<int>(x.rows());

  vector<_Scalar> result(v);
  MatrixT y = x;

  vector<_Scalar> temp(K, 0);

  for (; n; n >>= 1) {
    // cout << "n = " << n << endl;
    if (n & 1) {
      for (int i = 0; i < K; ++i) {
        _Scalar s = 0;
        for (int j = 0; j < K; ++j) {
          s += y(i, j) * result[j];
        }
        s.FixValue();
        temp[i] = s;
      }
      swap(result, temp);
    }
    if (n > 1) {
      y *= y;
      NModMatrixModFixer<_Scalar>::Fix(y);
    }
  }
  return result;
}

template <typename _Scalar>
SL vector<_Scalar> PowerMod(const MatT<_Scalar>& x, int64 n,
                            const vector<_Scalar>& v, int64 mod) {
  return PowerModImpl(x, n, v, mod,
                      NModNumberIndicator<IsNModNumber<_Scalar>::result>());
}

/**
 * Helper method for matrix multiplication
 * 1. Compiling time mod version, you only need to specify mod
 * 2. Use Customized element type.
 * 3. Dynamic mod version: use int128 (if available) or global variable
 * DEFAULT_MOD (slow).
 */

// Version 1
// mod * mod < int64
/**
    auto res0 = PowerMod<1000000007>(
        [=](auto& m) {
          m(0, 0) = 1;
          m(0, 1) = 1;
          m(1, 0) = 1;
        },
        2, 100000);
    auto res1 = PowerMod<1000000007>(
        [=](auto& m, auto& v) {
          m(0, 0) = 1;
          m(0, 1) = 1;
          m(1, 0) = 1;
          v[0] = 1;
          v[1] = 1;
        },
        2, 100000);
 */
template <int64 mod>
SL vector<int64> PowerMod(
    const function<void(MatT<NMod64<mod>>& mat, vector<NMod64<mod>>& v)>& init,
    const int K, int64 n) {
  using ScalarT = NMod64<mod>;
  using MatrixT = MatT<ScalarT>;

  vector<ScalarT> v(K, 0);
  MatrixT m = MatrixT::Zero(K, K);

  init(m, v);

  auto t = PowerMod(m, n, v, mod);

  vector<int64> res(K, 0);
  for (int i = 0; i < K; ++i) res[i] = t[i].Value();

  return res;
}

// mod * mod < int64
template <int64 mod>
SL MatT<int64> PowerMod(const function<void(MatT<NMod64<mod>>& mat)>& init,
                        const int K, int64 n) {
  using ScalarT = NMod64<mod>;
  using MatrixT = MatT<ScalarT>;

  MatrixT m = MatrixT::Zero(K, K);

  init(m);

  auto t = PowerMod(m, n, mod);

  MatT<int64> res(K, K);
  for (int i = 0; i < K; ++i)
    for (int j = 0; j < K; ++j) res(i, j) = t(i, j).Value();

  return res;
}

// Version 2
// mod == T().mod()
/**
    auto res0 = PowerMod<NMod64<1000000007>>(
        [=](auto& m) {
          m(0, 0) = 1;
          m(0, 1) = 1;
          m(1, 0) = 1;
        },
        2, 100000);
    auto res1 = PowerMod<NMod64<1000000007>>(
        [=](auto& m, auto& v) {
          m(0, 0) = 1;
          m(0, 1) = 1;
          m(1, 0) = 1;
          v[0] = 1;
          v[1] = 1;
        },
        2, 100000);
*/
template <typename T>
SL REQUIRES((IsNModNumber<T>::result)) RETURN(vector<T>)
    PowerMod(const function<void(MatT<T>& mat, vector<T>& v)>& init,
             const int K, int64 n) {
  using ScalarT = T;
  using MatrixT = MatT<ScalarT>;

  vector<T> v(K, 0);
  MatrixT m = MatrixT::Zero(K, K);

  init(m, v);

  return PowerMod(m, n, v, T().Mod());
}

template <typename T>
SL REQUIRES((IsNModNumber<T>::result)) RETURN(MatT<T>)
    PowerMod(const function<void(MatT<T>& mat)>& init, const int K, int64 n) {
  using ScalarT = T;
  using MatrixT = MatT<ScalarT>;

  MatrixT m = MatrixT::Zero(K, K);

  init(m);

  return PowerMod(m, n, T().Mod());
}

// Version 3
/**
    auto res0 = PowerMod(
        [=](auto& m) {
          m(0, 0) = 1;
          m(0, 1) = 1;
          m(1, 0) = 1;
        },
        2, 100000, 1000000007);
    auto res1 = PowerMod(
        [=](auto& m, auto& v) {
          m(0, 0) = 1;
          m(0, 1) = 1;
          m(1, 0) = 1;
          v[0] = 1;
          v[1] = 1;
        },
        2, 100000, 1000000007);
 */
#if PE_HAS_INT128
SL vector<int64> PowerMod(
    const function<void(MatT<int128>& mat, vector<int128>& v)>& init,
    const int K, int64 n, int64 mod) {
  using ScalarT = int128;
  using MatrixT = MatT<ScalarT>;

  vector<ScalarT> v(K, 0);
  MatrixT m = MatrixT::Zero(K, K);

  init(m, v);

  auto t = PowerMod(m, n, v, mod);

  vector<int64> res(K, 0);
  for (int i = 0; i < K; ++i) res[i] = t[i];

  return res;
}

SL MatT<int64> PowerMod(const function<void(MatT<int128>& mat)>& init,
                        const int K, int64 n, int64 mod) {
  using ScalarT = int128;
  using MatrixT = MatT<ScalarT>;

  MatrixT m = MatrixT::Zero(K, K);

  init(m);

  auto t = PowerMod(m, n, mod);

  MatT<int64> res(K, K);
  for (int i = 0; i < K; ++i)
    for (int j = 0; j < K; ++j) res(i, j) = static_cast<int64>(t(i, j));

  return res;
}
#else
// mod == DefaultMod::mod()
SL vector<int64> PowerMod(
    const function<void(MatT<NModNumber<DefaultMod>>& mat,
                        vector<NModNumber<DefaultMod>>& v)>& init,
    const int K, int64 n, int64 mod) {
  typedef NModNumber<DefaultMod> ScalarT;
  typedef MatT<ScalarT> MatrixT;

  PE_ASSERT(mod == DefaultMod::Mod());

  vector<ScalarT> v(K, 0);
  MatrixT m = MatrixT::Zero(K, K);

  init(m, v);

  auto t = PowerMod(m, n, v, mod);

  vector<int64> res(K, 0);
  for (int i = 0; i < K; ++i) res[i] = t[i].Value();

  return res;
}

// mod == DefaultMod::mod()
SL MatT<int64> PowerMod(
    const function<void(MatT<NModNumber<DefaultMod>>& mat)>& init, const int K,
    int64 n, int64 mod) {
  typedef NModNumber<DefaultMod> ScalarT;
  typedef MatT<ScalarT> MatrixT;

  PE_ASSERT(mod == DefaultMod::Mod());

  MatrixT m = MatrixT::Zero(K, K);

  init(m);

  auto t = PowerMod(m, n, mod);

  MatT<int64> res(K, K);
  for (int i = 0; i < K; ++i)
    for (int j = 0; j < K; ++j) res(i, j) = static_cast<int64>(t(i, j).Value());

  return res;
}
#endif  // end PE_HAS_INT128

#endif  // end ENABLE_EIGEN

#endif
