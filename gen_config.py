#! python3
# -*- coding: UTF-8 -*-
import os

CURRENT_DIRECTORY = os.path.dirname(os.path.realpath(__file__))
TARGET_FILENAME = 'pe_config'
TARGET_PATH = os.path.join(CURRENT_DIRECTORY, TARGET_FILENAME)

SPLITTER = ';' if os.name == 'nt' else ':'
CHECKING_PATHS = os.environ.get('CPLUS_INCLUDE_PATH', '').split(SPLITTER)

RULES = [
    ('ENABLE_EIGEN', ['Eigen/Dense']),
    ('ENABLE_GMP', ['gmp.h']),
    ('ENABLE_FLINT', ['flint.h']),
    ('ENABLE_MPFR', ['mpfr.h']),
    #('ENABLE_MPIR', ['mpir.h']),
    ('ENABLE_LIBBF', ['libbf.h']),
    ('ENABLE_NTL', ['NTL/ZZ.h']),
    ('ENABLE_PRIME_COUNT', ['primecount.hpp']),
    ('ENABLE_PRIME_SIEVE', ['primesieve.hpp']),
]

content = []


def add_define(key, value):
  content.append('#ifndef %s' % key)
  content.append('#define %s %s' % (key, value))
  content.append('#endif')
  content.append('')


def check_target(path):
  for folder in CHECKING_PATHS:
    if not os.path.exists(folder):
      continue
    for i in path:
      if os.path.exists(os.path.join(folder, i)):
        return True
  return False


def main():
  content.append('#ifndef PE_CONFIG_')
  content.append('#define PE_CONFIG_')
  content.append('// This file provides a centralized place to configure pe')
  content.append('')
  content.append(
      '// Auto generated by gen_config.py, and you can edit it manually')
  content.append('')
  content.append('// Configuration priority (first match):')
  content.append('// 1. Compiling command')
  content.append('// 2. The configurations in this file')
  content.append('// 3. The configurations in file pe')
  content.append('')
  add_define('ENABLE_ASSERT', '1')
  add_define('TRY_TO_USE_INT128', '1')
  for (key, value) in RULES:
    ok = check_target(value)
    add_define(key, '1' if ok else '0')
  content.append('#endif')
  with open(TARGET_PATH, 'wb') as tempf:
    tempf.write('\r\n'.join(content).encode('utf8'))


if __name__ == '__main__':
  main()
