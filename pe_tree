#ifndef PE_TREE_
#define PE_TREE_

#include "pe_base"

// Range update bit indexed tree
// Support range based update and query the value of a specified index.
template <typename T>
class RUBit {
 public:
  RUBit(int size = 0) { reset(size); }

  RUBit& reset(int new_size) {
    size_ = new_size;
    data_.resize(size_ + 1);
    fill(data_.begin(), data_.end(), 0);
    return *this;
  }

  RUBit& update(int x, T v) {
    for (; x <= size_; x += x & -x) {
      data_[x] += v;
    }
    return *this;
  }

  RUBit& update(int x, int y, T v) { return update(x, v).update(y + 1, -v); }

  T query(int x) const {
    T ret(0);
    for (; x > 0; x -= x & -x) {
      ret += data_[x];
    }
    return ret;
  }

 private:
  vector<T> data_;
  int size_;
};

// Range sum query bit indexed tree
// Support index based update and value of a range.
template <typename T>
class RSQBit {
 public:
  RSQBit(int size = 0) { reset(size); }

  RSQBit& reset(int new_size) {
    size_ = new_size;
    data_.resize(size_ + 1);
    fill(data_.begin(), data_.end(), 0);
    return *this;
  }

  RSQBit& update(int x, T v) {
    for (; x <= size_; x += x & -x) {
      data_[x] += v;
    }
    return *this;
  }

  T query(int x) const {
    T ret = 0;
    for (; x > 0; x -= x & -x) {
      ret += data_[x];
    }
    return ret;
  }

  T query(int x, int y) const { return query(y) - query(x - 1); }

 private:
  vector<T> data_;
  int size_;
};
#endif
