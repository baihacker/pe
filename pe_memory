#ifndef PE_MEMORY_
#define PE_MEMORY_

#include "pe_base"

#if PLATFORM_WIN
#include <windows.h>

struct LargeMemory {
 public:
  LargeMemory() = default;

  ~LargeMemory() {
    vector<void*> vec;
    for (auto iter = allocated_.begin(); iter != allocated_.end(); ++iter)
      vec.push_back(iter->first);

    const int64 size = static_cast<ssize>(vec.size());
    for (int i = 0; i < size; ++i) deallocate(vec[i]);
  }

  void* allocate(int64 size) {
    HANDLE hMapFile = ::CreateFileMapping(
        INVALID_HANDLE_VALUE, nullptr, PAGE_READWRITE | SEC_COMMIT, size >> 32,
        size % (1LL << 32), nullptr);
    assert(GetLastError() == 0);

    void* ptr = ::MapViewOfFile(hMapFile, FILE_MAP_ALL_ACCESS, 0, 0, 0);
    assert(GetLastError() == 0);
    allocated_.insert(make_pair(ptr, hMapFile));

    return ptr;
  }

  void deallocate(void* ptr) {
    auto where = allocated_.find(ptr);
    if (where == allocated_.end()) return;

    ::UnmapViewOfFile(ptr);
    ::CloseHandle(where->second);
    allocated_.erase(where);
  }

 private:
  map<void*, HANDLE> allocated_;
};

SL LargeMemory& get_lm_allocator() {
  static LargeMemory __lm;
  return __lm;
}

struct LmAllocator {
  static void* allocate(int64 size) {
    return get_lm_allocator().allocate(size);
  }

  static void deallocate(void* ptr) { get_lm_allocator().deallocate(ptr); }
};

SL void* lm_allocate(int64 size) { return LmAllocator::allocate(size); }

SL void lm_deallocate(void* ptr) { LmAllocator::deallocate(ptr); }
#endif

SL void* std_allocate(int64 size) { return new char[size]; }

SL void std_deallocate(void* ptr) { delete[] ptr; }

struct StdAllocator {
  static void* allocate(int64 size) { return new char[size]; }
  static void deallocate(void* ptr) { delete[] ptr; }
};

#endif
