#ifndef PE_POLY_BASE_COMMON_
#define PE_POLY_BASE_COMMON_

#include "pe_base"
#include "pe_int128"
#include "pe_mod"
#include "pe_type_traits"
#include "pe_nt"

template <typename T>
SL void poly_mul_wrapper(const T* X, int64 n, const T* Y, int64 m, T* result,
                         int64 mod,
                         void (*impl)(const T*, int64, const T*, int64, T*,
                                      int64)) {
  int64 s1 = 0, s2 = 0;
  int64 e1 = n, e2 = m;
  while (s1 < e1 && X[s1] == 0) ++s1;
  while (s1 < e1 && X[e1 - 1] == 0) --e1;
  while (s2 < e2 && Y[s2] == 0) ++s2;
  while (s2 < e2 && Y[e2 - 1] == 0) --e2;

  if (s1 >= e1 || s2 >= e2) {
    fill(result, result + n + m - 1, 0);
    return;
  }

  impl(X + s1, e1 - s1, Y + s2, e2 - s2, result + s1 + s2, mod);
  fill(result, result + s1 + s2, 0);
  fill(result + e1 + e2 - 1, result + n + m - 1, 0);
}

template <typename T>
SL void adjust_poly_leading_zero(vector<T>& v) {
  int64 now = static_cast<ssize>(v.size()) - 1;
  while (now > 0 && v[now] == 0) --now;
  v.resize(now + 1);
}

#define POLY_MUL_IMPL(poly_mul, poly_mul_internal)                           \
  template <typename T>                                                      \
  SL void poly_mul(const T* X, int64 n, const T* Y, int64 m, T* result,      \
                   int64 mod) {                                              \
    using unsignedT = typename std::make_unsigned<T>::type;                  \
    poly_mul_wrapper<unsignedT>((const unsignedT*)X, n, (const unsignedT*)Y, \
                                m, (unsignedT*)result, mod,                  \
                                &poly_mul_internal<unsignedT>);              \
  }                                                                          \
                                                                             \
  template <typename T>                                                      \
  SL vector<T> poly_mul(const vector<T>& X, const vector<T>& Y, int64 mod) { \
    const int64 n = static_cast<ssize>(X.size());                            \
    const int64 m = static_cast<ssize>(Y.size());                            \
    const int64 retSize = n + m - 1;                                         \
    vector<T> result(retSize);                                               \
    poly_mul(&X[0], n, &Y[0], m, &result[0], mod);                           \
    return result;                                                           \
  }

// For input:
// size q >= max(deg X - deg Y + 1, 1)
// size r >= m
// For output:
// deg q = max(deg X - deg Y + 1, 1)
// For C-style method: deg r = deg Y (with possible leading zeros)
// For C++ style method: deg r <= deg Y (the leading zeros are ignored)
#define POLY_DIV_AND_MOD_IMPL(poly_div_and_mod, poly_div_and_mod_internal)   \
  template <typename T>                                                      \
  SL REQUIRES((is_native_integer<T>::value)) RETURN(void)                    \
      poly_div_and_mod(const T* X, const int64 n, const T* Y, const int64 m, \
                       T* q, T* r, int64 mod) {                              \
    using unsignedT = typename std::make_unsigned<T>::type;                  \
    poly_div_and_mod_internal<unsignedT>((const unsignedT*)X, n,             \
                                         (const unsignedT*)Y, m,             \
                                         (unsignedT*)q, (unsignedT*)r, mod); \
  }                                                                          \
                                                                             \
  template <typename T>                                                      \
  SL REQUIRES((is_native_integer<T>::value))                                 \
      RETURN(tuple<vector<T>, vector<T>>) poly_div_and_mod(                  \
          const vector<T>& X, const vector<T>& Y, int64 mod) {               \
    const int64 n = static_cast<ssize>(X.size());                            \
    const int64 m = static_cast<ssize>(Y.size());                            \
                                                                             \
    vector<T> q(max<int64>(n - m + 1, 1LL));                                 \
    vector<T> r(m);                                                          \
    poly_div_and_mod(&X[0], n, &Y[0], m, &q[0], &r[0], mod);                 \
                                                                             \
    r[m] = 0;                                                                \
    adjust_poly_leading_zero(r);                                             \
    return make_tuple(std::move(q), std::move(r));                           \
  }

#define POLY_DIV_IMPL(poly_div, poly_div_and_mod)                              \
  template <typename T>                                                        \
  SL REQUIRES((is_native_integer<T>::value)) RETURN(void) poly_div(            \
      const T* X, const int64 n, const T* Y, const int64 m, T* q, int64 mod) { \
    poly_div_and_mod(X, n, Y, m, q, (T*)NULL, mod);                            \
  }                                                                            \
                                                                               \
  template <typename T>                                                        \
  SL REQUIRES((is_native_integer<T>::value)) RETURN(vector<T>)                 \
      poly_div(const vector<T>& X, const vector<T>& Y, int64 mod) {            \
    const int64 n = static_cast<ssize>(X.size());                              \
    const int64 m = static_cast<ssize>(Y.size());                              \
                                                                               \
    vector<T> q(max<int64>(n - m + 1, 1LL));                                   \
    poly_div(&X[0], n, &Y[0], m, &q[0], mod);                                  \
    return std::move(q);                                                       \
  }

#define POLY_MOD_IMPL(poly_mod, poly_div_and_mod)                              \
  template <typename T>                                                        \
  SL REQUIRES((is_native_integer<T>::value)) RETURN(void) poly_mod(            \
      const T* X, const int64 n, const T* Y, const int64 m, T* r, int64 mod) { \
    poly_div_and_mod(X, n, Y, m, (T*)NULL, r, mod);                            \
  }                                                                            \
                                                                               \
  template <typename T>                                                        \
  SL REQUIRES((is_native_integer<T>::value)) RETURN(vector<T>)                 \
      poly_mod(const vector<T>& X, const vector<T>& Y, int64 mod) {            \
    const int64 n = static_cast<ssize>(X.size());                              \
    const int64 m = static_cast<ssize>(Y.size());                              \
                                                                               \
    vector<T> r(m);                                                            \
    poly_mod(&X[0], n, &Y[0], m, &r[0], mod);                                  \
    adjust_poly_leading_zero(r);                                               \
    return std::move(r);                                                       \
  }

#endif