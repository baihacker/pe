#ifndef PE_POLY_BASE_FLINT_
#define PE_POLY_BASE_FLINT_

#include "pe_base"
#include "pe_type_traits"
#include "pe_poly_base_common"

#if ENABLE_FLINT && GMP_LIMB_BITS == 64

// Online documentation of flint
// http://flintlib.org/doc/nmod_poly.html

#define HAS_POLY_FLINT 1
#define HAS_POLY_MUL_FLINT 1

namespace pe {
namespace flint {
namespace internal {
template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(void)
    CopyPoly(nmod_poly_t src, T* dest, int64 dest_size) {
  const int64 size = static_cast<int64>(src[0].length);
  for (int64 i = 0; i < size; ++i) {
    mp_limb_t v = src[0].coeffs[i];
    dest[i] = v;
  }
  for (int64 i = size; i < dest_size; ++i) {
    dest[i] = 0;
  }
}

template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(void)
    PolyMulImpl(const T* X, const int64 n, const T* Y, const int64 m, T* result,
                int64 mod) {
  nmod_poly_t a, b;
  nmod_poly_init2(a, mod, n);
  nmod_poly_init2(b, mod, m);

  for (int64 i = 0; i < n; ++i) {
    nmod_poly_set_coeff_ui(a, i, X[i]);
  }
  for (int64 i = 0; i < m; ++i) {
    nmod_poly_set_coeff_ui(b, i, Y[i]);
  }
  nmod_poly_mul(a, a, b);

  const int64 size = static_cast<int64>(a[0].length);

  for (int64 i = 0; i < size; ++i) {
    mp_limb_t v = a[0].coeffs[i];
    result[i] = v;
  }

  const int64 all_size = n + m - 1;
  for (int64 i = size; i < all_size; ++i) {
    result[i] = 0;
  }

  nmod_poly_clear(a);
  nmod_poly_clear(b);
}
}  // namespace internal

static constexpr PolyMulCoeType kPolyMulMod = 0;

POLY_MUL_IMPL(PolyMul, internal::PolyMulImpl)

namespace bn_poly_mul {
namespace internal {

template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(void)
    PolyMulImpl(const T* X, const int64 n, const T* Y, const int64 m, T* result,
                int64 mod) {
  const int64 mod_bit = HighestBitIndex(mod) + 1;
  const int64 need_bit = mod_bit * 2 + HighestBitIndex(std::min(n, m)) + 1;
  const int64 need_limb =
      (need_bit + sizeof(mp_limb_t) * 8 - 1) / (sizeof(mp_limb_t) * 8);

  fmpz_t a, b;
  fmpz_init(a);
  {
    fmpz_setbit(a, need_limb * n * sizeof(mp_limb_t) * 8);
    mpz_ptr ptr = COEFF_TO_PTR(*a);
    for (int i = 0; i < n; ++i) {
      ptr->_mp_d[i * need_limb] = X[i];
    }
    fmpz_clrbit(a, need_limb * n * sizeof(mp_limb_t) * 8);
  }
  fmpz_init(b);
  {
    fmpz_setbit(b, need_limb * m * sizeof(mp_limb_t) * 8);
    mpz_ptr ptr = COEFF_TO_PTR(*b);
    for (int i = 0; i < m; ++i) {
      ptr->_mp_d[i * need_limb] = Y[i];
    }
    fmpz_clrbit(b, need_limb * m * sizeof(mp_limb_t) * 8);
  }

  fmpz_mul(a, a, b);

  mpz_ptr ptr = COEFF_TO_PTR(*a);

  const int64 has_size = ptr->_mp_size;
  const int64 all_size = n + m - 1;

  if (mod > 0) {
    if (need_limb == 1) {
      for (int64 i = 0; i < all_size; ++i) {
        const int64 offset = i * need_limb;
        const mp_limb_t v = offset >= has_size ? 0 : ptr->_mp_d[offset];
        result[i] = v % mod;
      }
    } else if (need_limb == 2) {
      const auto magic1 = (1LL << 32) % mod;
      const auto magic2 = MulMod(magic1, magic1, mod);
      for (int64 i = 0; i < all_size; ++i) {
        const int64 offset = i * need_limb;
        const mp_limb_t hi =
            offset + 1 >= has_size ? 0 : ptr->_mp_d[offset + 1];
        const mp_limb_t low = offset >= has_size ? 0 : ptr->_mp_d[offset];
        result[i] = AddMod(MulMod(hi % mod, magic2, mod), low % mod, mod);
      }
    } else {
      const auto magic1 = (1LL << 32) % mod;
      const auto magic2 = MulMod(magic1, magic1, mod);
      for (int64 i = 0; i < all_size; ++i) {
        const int64 offset = i * need_limb;
        T it = 0;
        for (int j = need_limb - 1; j >= 0; --j) {
          const mp_limb_t v =
              offset + j >= has_size ? 0 : ptr->_mp_d[offset + j];
          it = AddMod(MulMod(it, magic2, mod), v % mod, mod);
        }
        result[i] = it;
      }
    }
  } else {
    if (need_limb == 1) {
      for (int64 i = 0; i < all_size; ++i) {
        const int64 offset = i * need_limb;
        const mp_limb_t v = offset >= has_size ? 0 : ptr->_mp_d[offset];
        result[i] = v;
      }
    } else {
      for (int64 i = 0; i < all_size; ++i) {
        const int64 offset = i * need_limb;
        T it = 0;
        for (int j = need_limb - 1; j >= 0; --j) {
          const mp_limb_t v =
              offset + j >= has_size ? 0 : ptr->_mp_d[offset + j];
          it <<= 32;
          it <<= 32;
          it |= v;
        }
        result[i] = it;
      }
    }
  }
  fmpz_clear(a);
  fmpz_clear(b);
}
}  // namespace internal

static constexpr PolyMulCoeType kPolyMulMod = 0;

POLY_MUL_IMPL(PolyMul, internal::PolyMulImpl)
}  // namespace bn_poly_mul

namespace pmod {
namespace internal {
template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(void)
    PolyMulImpl(const T* X, const int64 n, const T* Y, const int64 m, T* result,
                int64 mod) {
  fmpz_t xmod;
  fmpz_init_set_ui(xmod, mod);

  fq_nmod_ctx_t ctx;
  fq_nmod_ctx_init(ctx, xmod, 1, "Z");

  fq_nmod_poly_t a, b;
  fq_nmod_poly_init2(a, n, ctx);
  fq_nmod_poly_init2(b, m, ctx);

  fmpz_t c;
  fmpz_init(c);
  for (int64 i = 0; i < n; ++i) {
    fmpz_set_si(c, X[i]);
    fq_nmod_poly_set_coeff_fmpz(a, i, c, ctx);
  }
  for (int64 i = 0; i < m; ++i) {
    fmpz_set_si(c, Y[i]);
    fq_nmod_poly_set_coeff_fmpz(b, i, c, ctx);
  }
  fq_nmod_poly_mul(a, a, b, ctx);

  const int64 size = static_cast<int64>(a[0].length);

  for (int64 i = 0; i < size; ++i) {
    mp_limb_t v = nmod_poly_get_coeff_ui(a[0].coeffs + i, 0);
    result[i] = v;
  }

  fq_nmod_poly_clear(a, ctx);
  fq_nmod_poly_clear(b, ctx);
  fq_nmod_ctx_clear(ctx);
  fmpz_clear(xmod);
  fmpz_clear(c);
}
}  // namespace internal
static constexpr PolyMulCoeType kPolyMulMod = 0;
POLY_MUL_IMPL(PolyMul, internal::PolyMulImpl)
}  // namespace pmod

namespace internal {
template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(void)
    PolyInvImpl(const T* x, int64 m, int64 n, T* result, int64 mod) {
  if (n == 1) {
    result[0] = ModInv(static_cast<int64>(x[0]), mod);
    return;
  }

  nmod_poly_t u, v;
  nmod_poly_init2(u, mod, m);
  for (int64 i = 0; i < m; ++i) {
    nmod_poly_set_coeff_ui(u, i, x[i]);
  }

  nmod_poly_init2(v, mod, n + 1);

  nmod_poly_inv_series(v, u, n);
  for (int64 i = 0; i < n; ++i) {
    result[i] = nmod_poly_get_coeff_ui(v, i);
  }

  nmod_poly_clear(u);
  nmod_poly_clear(v);
}
}  // namespace internal

template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(void)
    PolyInv(const T* x, int64 m, int64 n, T* result, int64 mod) {
  using UnsignedT = pe_make_unsigned_t<T>;
  internal::PolyInvImpl<UnsignedT>(reinterpret_cast<const UnsignedT*>(x), m, n,
                                   reinterpret_cast<UnsignedT*>(result), mod);
}

template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(std::vector<T>)
    PolyInv(const std::vector<T>& x, int64 n, int64 mod) {
  const int64 m = static_cast<int64>(std::size(x));

  std::vector<T> b(n);

  PolyInv(&x[0], m, n, &b[0], mod);

  return b;
}

namespace pmod {
namespace internal {
// size result >= n
template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(void)
    PolyInvImpl(const T* x, int64 m, int64 n, T* result, int64 mod) {
  if (n == 1) {
    result[0] = ModInv(static_cast<int64>(x[0]), mod);
    return;
  }

  fmpz_t xmod;
  fmpz_init_set_ui(xmod, mod);

  fq_nmod_ctx_t ctx;
  fq_nmod_ctx_init(ctx, xmod, 1, "Z");

  fq_nmod_poly_t u, v;
  fq_nmod_poly_init2(u, m, ctx);

  fmpz_t c;
  fmpz_init(c);
  for (int64 i = 0; i < m; ++i) {
    fmpz_set_si(c, x[i]);
    fq_nmod_poly_set_coeff_fmpz(u, i, c, ctx);
  }

  fq_nmod_poly_init2(v, n, ctx);

  fq_nmod_poly_inv_series(v, u, n, ctx);
  for (int64 i = 0; i < n; ++i) {
    mp_limb_t t = nmod_poly_get_coeff_ui(v[0].coeffs + i, 0);
    result[i] = t;
  }

  fq_nmod_poly_clear(u, ctx);
  fq_nmod_poly_clear(v, ctx);
  fq_nmod_ctx_clear(ctx);
  fmpz_clear(xmod);
  fmpz_clear(c);
}
}  // namespace internal
template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(void)
    PolyInv(const T* x, int64 m, int64 n, T* result, int64 mod) {
  using UnsignedT = pe_make_unsigned_t<T>;
  internal::PolyInvImpl<UnsignedT>(reinterpret_cast<const UnsignedT*>(x), m, n,
                                   reinterpret_cast<UnsignedT*>(result), mod);
}

template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(std::vector<T>)
    PolyInv(const std::vector<T>& x, int64 n, int64 mod) {
  const int64 m = static_cast<int64>(std::size(x));

  std::vector<T> b(n);

  PolyInv(&x[0], m, n, &b[0], mod);

  return b;
}
}  // namespace pmod

namespace internal {
template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(void)
    PolyDivAndModImpl(const T* X, int64 n, const T* Y, int64 m, T* q, T* r,
                      int64 mod) {
  static_assert(pe_is_unsigned_v<T>, "T must be unsigned");

  if (m > n) {
    if (r) {
      std::copy(X, X + n, r);
      std::fill(r + n, r + m, 0);
    }
    if (q) {
      q[0] = 0;
    }
    return;
  }

  nmod_poly_t a, b;
  nmod_poly_init2(a, mod, n);
  nmod_poly_init2(b, mod, m);

  for (int64 i = 0; i < n; ++i) {
    nmod_poly_set_coeff_ui(a, i, X[i]);
  }
  for (int64 i = 0; i < m; ++i) {
    nmod_poly_set_coeff_ui(b, i, Y[i]);
  }

  if (q && r) {
    nmod_poly_t u, v;
    nmod_poly_init(u, mod);
    nmod_poly_init(v, mod);

    nmod_poly_divrem(u, v, a, b);

    CopyPoly(u, q, n - m + 1);
    CopyPoly(v, r, m);

    nmod_poly_clear(u);
    nmod_poly_clear(v);
  } else if (q) {
    nmod_poly_t u;
    nmod_poly_init(u, mod);

    nmod_poly_div(u, a, b);

    CopyPoly(u, q, n - m + 1);
    nmod_poly_clear(u);
  } else if (r) {
    nmod_poly_t v;
    nmod_poly_init(v, mod);

    nmod_poly_rem(v, a, b);

    CopyPoly(v, r, m);
    nmod_poly_clear(v);
  }

  nmod_poly_clear(a);
  nmod_poly_clear(b);
}
}  // namespace internal

POLY_DIV_AND_MOD_IMPL(PolyDivAndMod, internal::PolyDivAndModImpl)
POLY_DIV_IMPL(PolyDiv, PolyDivAndMod)
POLY_MOD_IMPL(PolyMod, PolyDivAndMod)

namespace internal {
template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(void)
    PolyPowerTruncImpl(const T* x, int64 m, int64 n, int64 trunc, T* result,
                       int64 mod) {
  static_assert(pe_is_unsigned_v<T>, "T must be unsigned");

  nmod_poly_t u, v;
  nmod_poly_init2(u, mod, m);
  for (int64 i = 0; i < m; ++i) {
    nmod_poly_set_coeff_ui(u, i, x[i]);
  }

  nmod_poly_init2(v, mod, trunc);

  nmod_poly_pow_trunc(v, u, n, trunc);

  const int64 size = nmod_poly_length(v);
  for (int64 i = 0; i < size; ++i) {
    result[i] = nmod_poly_get_coeff_ui(v, i);
  }
  for (int64 i = size; i < trunc; ++i) {
    result[i] = 0;
  }

  nmod_poly_clear(u);
  nmod_poly_clear(v);
}
}  // namespace internal

template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(void)
    PolyPowerTrunc(const T* x, int64 m, int64 n, int64 trunc, T* result,
                   int64 mod) {
  using UnsignedT = pe_make_unsigned_t<T>;
  if (trunc <= 0) {
    return;
  }
  if (m == 0) {
    std::fill(result, result + trunc, 0);
    return;
  }
  if (n == 0) {
    std::fill(result, result + trunc, 0);
    result[0] = 1 % mod;
    return;
  }
  internal::PolyPowerTruncImpl<UnsignedT>(
      reinterpret_cast<const UnsignedT*>(x), m, n, trunc,
      reinterpret_cast<UnsignedT*>(result), mod);
}

template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(std::vector<T>)
    PolyPowerTrunc(const std::vector<T>& x, int64 n, int64 trunc, int64 mod) {
  if (trunc <= 0) {
    return {};
  }
  const int64 m = static_cast<int64>(std::size(x));
  if (m == 0) {
    return {0};
  }
  if (n == 0) {
    return {1 % mod};
  }

  std::vector<T> b(trunc);

  PolyPowerTrunc(&x[0], m, n, trunc, &b[0], mod);

  AdjustPolyLeadingZero(b);

  return b;
}

namespace internal {
template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(void)
    PolyPowerImpl(const T* x, int64 m, int64 n, std::vector<T>& result,
                  int64 mod) {
  static_assert(pe_is_unsigned_v<T>, "T must be unsigned");

  nmod_poly_t u, v;
  nmod_poly_init2(u, mod, m);
  for (int64 i = 0; i < m; ++i) {
    nmod_poly_set_coeff_ui(u, i, x[i]);
  }

  nmod_poly_init(v, mod);

  nmod_poly_pow(v, u, n);

  const int64 size = nmod_poly_length(v);
  if (size > 0) {
    result.resize(size);
    for (int64 i = 0; i < size; ++i) {
      result[i] = nmod_poly_get_coeff_ui(v, i);
    }
  } else {
    result.resize(1);
    result[0] = 1;
  }

  nmod_poly_clear(u);
  nmod_poly_clear(v);
}
}  // namespace internal

template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(std::vector<T>)
    PolyPower(const std::vector<T>& x, int64 n, int64 mod) {
  const int64 m = static_cast<int64>(std::size(x));
  if (m == 0) {
    return {0};
  }
  if (n == 0) {
    return {1 % mod};
  }

  using UnsignedT = pe_make_unsigned_t<T>;
  std::vector<UnsignedT> b;
  internal::PolyPowerImpl<UnsignedT>(reinterpret_cast<const UnsignedT*>(&x[0]),
                                     m, n, b, mod);

  const int64 size = std::size(b);
  std::vector<T> result(size);
  for (int64 i = 0; i < size; ++i) {
    result[i] = static_cast<T>(b[i]);
  }

  AdjustPolyLeadingZero(result);

  return result;
}

#if __FLINT_RELEASE >= 20900
namespace pmod {
namespace internal {
template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(void)
    PolyPowerTruncImpl(const T* x, int64 m, int64 n, int64 trunc, T* result,
                       int64 mod) {
  fmpz_t xmod;
  fmpz_init_set_ui(xmod, mod);

  fq_nmod_ctx_t ctx;
  fq_nmod_ctx_init(ctx, xmod, 1, "Z");

  fq_nmod_poly_t u, v;
  fq_nmod_poly_init2(u, m, ctx);

  fmpz_t c;
  fmpz_init(c);
  for (int64 i = 0; i < m; ++i) {
    fmpz_set_si(c, x[i]);
    fq_nmod_poly_set_coeff_fmpz(u, i, c, ctx);
  }

  fq_nmod_poly_init2(v, trunc, ctx);

  fq_nmod_poly_pow_trunc(v, u, n, trunc, ctx);

  const int64 size = fq_nmod_poly_length(v, ctx);
  for (int64 i = 0; i < size; ++i) {
    mp_limb_t t = nmod_poly_get_coeff_ui(v[0].coeffs + i, 0);
    result[i] = t;
  }
  for (int64 i = size; i < trunc; ++i) {
    result[i] = 0;
  }

  fq_nmod_poly_clear(u, ctx);
  fq_nmod_poly_clear(v, ctx);
  fq_nmod_ctx_clear(ctx);
  fmpz_clear(xmod);
  fmpz_clear(c);
}
}  // namespace internal

template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(void)
    PolyPowerTrunc(const T* x, int64 m, int64 n, int64 trunc, T* result,
                   int64 mod) {
  using UnsignedT = pe_make_unsigned_t<T>;
  if (trunc <= 0) {
    return;
  }
  if (m == 0) {
    std::fill(result, result + trunc, 0);
    return;
  }
  if (n == 0) {
    std::fill(result, result + trunc, 0);
    result[0] = 1 % mod;
    return;
  }
  internal::PolyPowerTruncImpl<UnsignedT>(
      reinterpret_cast<const UnsignedT*>(x), m, n, trunc,
      reinterpret_cast<UnsignedT*>(result), mod);
}

template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(std::vector<T>)
    PolyPowerTrunc(const std::vector<T>& x, int64 n, int64 trunc, int64 mod) {
  if (trunc <= 0) {
    return {};
  }
  const int64 m = static_cast<int64>(std::size(x));
  if (m == 0) {
    return {0};
  }
  if (n == 0) {
    return {1 % mod};
  }

  std::vector<T> b(trunc);

  PolyPowerTrunc(&x[0], m, n, trunc, &b[0], mod);

  AdjustPolyLeadingZero(b);

  return b;
}

namespace internal {
template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(void)
    PolyPowerImpl(const T* x, int64 m, int64 n, std::vector<T>& result,
                  int64 mod) {
  fmpz_t xmod;
  fmpz_init_set_ui(xmod, mod);

  fq_nmod_ctx_t ctx;
  fq_nmod_ctx_init(ctx, xmod, 1, "Z");

  fq_nmod_poly_t u, v;
  fq_nmod_poly_init2(u, m, ctx);

  fmpz_t c;
  fmpz_init(c);
  for (int64 i = 0; i < m; ++i) {
    fmpz_set_si(c, x[i]);
    fq_nmod_poly_set_coeff_fmpz(u, i, c, ctx);
  }

  fq_nmod_poly_init(v, ctx);

  fq_nmod_poly_pow(v, u, n, ctx);

  int64 size = fq_nmod_poly_length(v, ctx);
  if (size > 0) {
    result.resize(size);
    for (int64 i = 0; i < size; ++i) {
      mp_limb_t t = nmod_poly_get_coeff_ui(v[0].coeffs + i, 0);
      result[i] = t;
    }
  } else {
    result.resize(1);
    result[0] = 0;
  }

  fq_nmod_poly_clear(u, ctx);
  fq_nmod_poly_clear(v, ctx);
  fq_nmod_ctx_clear(ctx);
  fmpz_clear(xmod);
  fmpz_clear(c);
}
}  // namespace internal

template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(std::vector<T>)
    PolyPower(const std::vector<T>& x, int64 n, int64 mod) {
  const int64 m = static_cast<int64>(std::size(x));
  if (m == 0) {
    return {0};
  }
  if (n == 0) {
    return {1 % mod};
  }

  using UnsignedT = pe_make_unsigned_t<T>;
  std::vector<UnsignedT> b;
  internal::PolyPowerImpl<UnsignedT>(reinterpret_cast<const UnsignedT*>(&x[0]),
                                     m, n, b, mod);

  const int64 size = std::size(b);
  std::vector<T> result(size);
  for (int64 i = 0; i < size; ++i) {
    result[i] = static_cast<T>(b[i]);
  }

  AdjustPolyLeadingZero(result);

  return result;
}
}  // namespace pmod
#endif

// More function can be found here:
// https://flintlib.org/doc/nmod_poly.html#transcendental-functions
extern "C" {
using nmod_poly_series_t = void (*)(nmod_poly_struct*, const nmod_poly_struct*,
                                    mp_limb_signed_t);
using nmod_poly_series_t = void (*)(nmod_poly_struct*, const nmod_poly_struct*,
                                    mp_limb_signed_t);
}

namespace internal {
template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(void)
    PolySeriesImpl(const T* x, int64 m, int64 trunc, T* result, int64 mod,
                   nmod_poly_series_t trans) {
  nmod_poly_t u, v;
  nmod_poly_init2(u, mod, m);
  for (int64 i = 0; i < m; ++i) {
    nmod_poly_set_coeff_ui(u, i, x[i]);
  }

  nmod_poly_init2(v, mod, trunc);
  trans(v, u, trunc);
  for (int64 i = 0; i < trunc; ++i) {
    result[i] = nmod_poly_get_coeff_ui(v, i);
  }

  nmod_poly_clear(u);
  nmod_poly_clear(v);
}
}  // namespace internal

// size result >= trunc
template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(void)
    PolySeries(const T* x, int64 m, int64 trunc, T* result, int64 mod,
               nmod_poly_series_t trans) {
  using UnsignedT = pe_make_unsigned_t<T>;
  internal::PolySeriesImpl<UnsignedT>(
      reinterpret_cast<const UnsignedT*>(x), m, trunc,
      reinterpret_cast<UnsignedT*>(result), mod, trans);
}

template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(std::vector<T>)
    PolySeries(const std::vector<T>& x, int64 trunc, int64 mod,
               nmod_poly_series_t trans) {
  const int64 m = static_cast<int64>(std::size(x));

  std::vector<T> b(trunc);

  PolySeries(&x[0], m, trunc, &b[0], mod, trans);

  return b;
}

namespace internal {
// size result >= trunc
template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(void)
    PolyLogImpl(const T* x, int64 m, int64 trunc, T* result, int64 mod) {
  PolySeries(x, m, trunc, result, mod, &nmod_poly_log_series);
}
}  // namespace internal

// size result >= trunc
template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(void)
    PolyLog(const T* x, int64 m, int64 trunc, T* result, int64 mod) {
  using UnsignedT = pe_make_unsigned_t<T>;
  internal::PolyLogImpl<UnsignedT>(reinterpret_cast<const UnsignedT*>(x), m,
                                   trunc, reinterpret_cast<UnsignedT*>(result),
                                   mod);
}

template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(std::vector<T>)
    PolyLog(const std::vector<T>& x, int64 trunc, int64 mod) {
  const int64 m = static_cast<int64>(std::size(x));

  std::vector<T> b(trunc);

  PolyLog(&x[0], m, trunc, &b[0], mod);

  return b;
}

namespace internal {
// size result >= trunc
template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(void)
    PolyExpImpl(const T* x, int64 m, int64 trunc, T* result, int64 mod) {
  PE_ASSERT(x[0] == 0);
  PolySeries(x, m, trunc, result, mod, &nmod_poly_exp_series);
}
}  // namespace internal

// size result >= trunc
template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(void)
    PolyExp(const T* x, int64 m, int64 trunc, T* result, int64 mod) {
  using UnsignedT = pe_make_unsigned_t<T>;
  internal::PolyExpImpl<UnsignedT>(reinterpret_cast<const UnsignedT*>(x), m,
                                   trunc, reinterpret_cast<UnsignedT*>(result),
                                   mod);
}

template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(std::vector<T>)
    PolyExp(const std::vector<T>& x, int64 trunc, int64 mod) {
  const int64 m = static_cast<int64>(std::size(x));

  std::vector<T> b(trunc);

  PolyExp(&x[0], m, trunc, &b[0], mod);

  return b;
}

namespace internal {
template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(void)
    PolyMultipointEvaluateImpl(const T* X, int64 n, const T* V, const int64 m,
                               T* result, int64 mod) {
  nmod_poly_t u;
  nmod_poly_init2(u, mod, n);
  for (int64 i = 0; i < n; ++i) {
    nmod_poly_set_coeff_ui(u, i, X[i]);
  }

  if (sizeof(mp_limb_t) == sizeof(T)) {
    nmod_poly_evaluate_nmod_vec_fast(result, u, V, m);
  } else {
    std::vector<mp_limb_t> x(m), y(m);
    for (int64 i = 0; i < m; ++i) x[i] = V[i];
    nmod_poly_evaluate_nmod_vec_fast(&y[0], u, &x[0], m);
    for (int64 i = 0; i < m; ++i) result[i] = y[i];
  }
  nmod_poly_clear(u);
}
}  // namespace internal

template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(void)
    PolyMultipointEvaluate(const T* X, const int64 n, const T* V, const int64 m,
                           T* result, int64 mod) {
  using UnsignedT = pe_make_unsigned_t<T>;
  internal::PolyMultipointEvaluateImpl<UnsignedT>(
      reinterpret_cast<const UnsignedT*>(X), n,
      reinterpret_cast<const UnsignedT*>(V), m,
      reinterpret_cast<UnsignedT*>(result), mod);
}

// size(V) = n
template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(void)
    PolyMultipointEvaluate(const T* X, const int64 n, const T* V, T* result,
                           int64 mod) {
  using UnsignedT = pe_make_unsigned_t<T>;
  internal::PolyMultipointEvaluateImpl<UnsignedT>(
      reinterpret_cast<const UnsignedT*>(X), n,
      reinterpret_cast<const UnsignedT*>(V), n, static_cast<UnsignedT*>(result),
      mod);
}

template <typename T>
SL REQUIRES((is_builtin_integer_v<T>)) RETURN(std::vector<T>)
    PolyMultipointEvaluate(const std::vector<T>& X, const std::vector<T>& V,
                           int64 mod) {
  const int64 n = static_cast<int64>(std::size(X));
  const int64 m = static_cast<int64>(std::size(V));
  std::vector<T> result(m);
  PolyMultipointEvaluate(&X[0], n, &V[0], m, &result[0], mod);
  return result;
}
}  // namespace flint
}  // namespace pe
#else
#define HAS_POLY_FLINT 0
#define HAS_POLY_MUL_FLINT 0
#endif

#endif
