#ifndef PE_MPZ_
#define PE_MPZ_

#include "pe_base"
#include "pe_type_traits"
#include "pe_extended_int"
#include "pe_fraction"
#include "pe_gbi"

#if ENABLE_GMP

namespace pe {
class Mpf;

#if ENABLE_MPFR
class Mpfr;
#endif

// A wrapper of mpz_t
class MpInteger {
 public:
  static constexpr int LIMB_BIT = sizeof(mp_limb_t) * 8;
  static constexpr mp_limb_t LIMB_MASK = -1;

  template <typename T>
  REQUIRES((is_builtin_integer_v<T> && pe_is_unsigned_v<T> &&
            !std::is_same<T, bool>::value))
  RETURN(void) FromNativeInt(T value) {
    if (value == 0) {
      mpz_init(z);
      return;
    }
    int cnt = 0;
    for (T v = value; v;) {
      ++cnt;
#if defined(COMPILER_MSVC) || defined(COMPILER_CLANG)
      v >>= MpInteger::LIMB_BIT / 4;
      v >>= MpInteger::LIMB_BIT / 4;
      v >>= MpInteger::LIMB_BIT / 4;
      v >>= MpInteger::LIMB_BIT / 4;
#else
      v >>= MpInteger::LIMB_BIT / 2;
      v >>= MpInteger::LIMB_BIT / 2;
#endif
    }
    mpz_init2(z, cnt * MpInteger::LIMB_BIT);
    mp_limb_t* t = z->_mp_d;
    for (int i = 0; i < cnt; ++i) {
      *t++ = MpInteger::LIMB_MASK & value;
#if defined(COMPILER_MSVC) || defined(COMPILER_CLANG)
      value >>= MpInteger::LIMB_BIT / 4;
      value >>= MpInteger::LIMB_BIT / 4;
      value >>= MpInteger::LIMB_BIT / 4;
      value >>= MpInteger::LIMB_BIT / 4;
#else
      value >>= MpInteger::LIMB_BIT / 2;
      value >>= MpInteger::LIMB_BIT / 2;
#endif
    }
    z->_mp_size = cnt;
  }

  template <typename T>
  REQUIRES((is_builtin_integer_v<T> && pe_is_signed_v<T>))
  RETURN(void) FromNativeInt(T value) {
    if (value == 0) {
      mpz_init(z);
      return;
    }

    using UnsignedT = pe_make_unsigned_t<T>;
    if (value > 0) {
      FromNativeInt<UnsignedT>(static_cast<UnsignedT>(value));
    } else {
      // Note: it works for value = T::min()
      FromNativeInt<UnsignedT>(static_cast<UnsignedT>(-value));
      z->_mp_size = -z->_mp_size;
    }
  }

  void FromUInt32Vector(const std::vector<uint32>& v) {
    if (std::empty(v)) {
      mpz_init(z);
      return;
    }

    const int n = static_cast<int>(std::size(v));
    mpz_init2(z, static_cast<mp_bitcnt_t>(std::size(v) * 32));

    for (int i = n - 1; i >= 0; --i) {
      mpz_mul_2exp(z, z, 32);
      mpz_add_ui(z, z, v[i]);
    }
  }

  std::vector<uint32> ToUInt32Vector() const {
    if (IntSign() == 0) {
      return {0};
    }

    if constexpr (sizeof(mp_limb_t) == sizeof(uint32)) {
      return std::vector<uint32>(data(), data() + size());
    } else if constexpr (sizeof(mp_limb_t) == 2 * sizeof(uint32)) {
      const int cnt = size();
      std::vector<uint32> ret(cnt * 2);
      for (int i = 0; i < cnt; ++i) {
        ret[2 * i] = static_cast<uint32>(data()[i]);
        ret[2 * i + 1] = static_cast<uint32>(data()[i] >> 32);
      }
      return ret;
    } else {
      PE_ASSERT(0);
    }
  }

  template <typename T>
  REQUIRES((is_extended_integer_v<T> && pe_is_unsigned_v<T>))
  RETURN(void) FromExtendedInt(const T& value) {
    FromUInt32Vector(value.ToUInt32Vector());
  }

  template <typename T>
  REQUIRES((is_extended_integer_v<T> && pe_is_signed_v<T>))
  RETURN(void) FromExtendedInt(const T& value) {
    if (value.IntSign() >= 0) {
      FromUInt32Vector(value.ToUInt32Vector());
    } else {
      T tmp = value;
      tmp.MakeAbs();
      FromUInt32Vector(tmp.ToUInt32Vector());
      mpz_neg(z, z);
    }
  }

 public:
  MpInteger() {
    mpz_init(z);  // zero value
  }

  MpInteger(int val) : MpInteger(static_cast<long>(val)) {}

  MpInteger(unsigned int val) : MpInteger(static_cast<unsigned long>(val)) {}

  MpInteger(long val) { mpz_init_set_si(z, val); }

  MpInteger(unsigned long val) { mpz_init_set_ui(z, val); }

  MpInteger(const std::string& s) { mpz_init_set_str(z, s.c_str(), 10); }

  MpInteger(const char* s) { mpz_init_set_str(z, s, 10); }

  MpInteger(const mpz_t o) { mpz_init_set(z, o); }

  template <typename T,
            typename TT = REQUIRES((is_builtin_integer_v<T>)) RETURN(void)>
  MpInteger(T value) {
    FromNativeInt(value);
  }

  template <typename T,
            typename TT = REQUIRES((is_builtin_integer_v<T>)) RETURN(T)>
  MpInteger(const std::vector<T>& v) {
    FromUInt32Vector(v);
  }

  template <typename T,
            typename TT = REQUIRES((is_extended_integer_v<T>)) RETURN(void)>
  MpInteger(const T& value) {
    FromExtendedInt(value);
  }

  MpInteger(const MpInteger& o) { mpz_init_set(z, o.z); }

  MpInteger(MpInteger&& o) noexcept {
    z[0]._mp_d = nullptr;
    mpz_swap(z, o.z);
  }

  ~MpInteger() {
    if (z[0]._mp_d) {
      mpz_clear(z);
    }
  }

  MpInteger& operator=(int val) {
    mpz_set_si(z, val);
    return *this;
  }

  MpInteger& operator=(long val) {
    mpz_set_si(z, val);
    return *this;
  }

  MpInteger& operator=(unsigned int val) {
    mpz_set_ui(z, val);
    return *this;
  }

  MpInteger& operator=(unsigned long val) {
    mpz_set_ui(z, val);
    return *this;
  }

  template <typename T,
            typename TT = REQUIRES((is_builtin_integer_v<T>)) RETURN(T)>
  MpInteger& operator=(T value) {
    *this = MpInteger(value);
    return *this;
  }

  MpInteger& operator=(const std::string& s) {
    mpz_set_str(z, s.c_str(), 10);
    return *this;
  }

  MpInteger& operator=(const char* s) {
    mpz_set_str(z, s, 10);
    return *this;
  }

  MpInteger& operator=(const MpInteger& o) {
    mpz_set(z, o.z);
    return *this;
  }

  MpInteger& operator=(MpInteger&& o) noexcept {
    mpz_swap(z, o.z);
    return *this;
  }

  // Defiend in pe_mpf
  inline MpInteger& operator=(const Mpf& o);

#if ENABLE_MPFR
  inline MpInteger& operator=(const Mpfr& o);
#endif

 public:
  __mpz_struct* mpz() { return z; }

  const __mpz_struct* mpz() const { return z; }

  int size() const { return pe::Abs(z[0]._mp_size); }

  mp_limb_t* data() { return z[0]._mp_d; }

  const mp_limb_t* data() const { return z[0]._mp_d; }

  mp_limb_t operator[](int idx) const { return data()[idx]; }

  mp_limb_t& operator[](int idx) { return data()[idx]; }

  int sign() const { return mpz_sgn(z); }

  int CompareTo(const MpInteger& other) const { return mpz_cmp(z, other.z); }

  int IntSign() const { return mpz_sgn(z); }

  int IsZero() const { return IntSign() == 0; }

  int IsEven() const { return mpz_even_p(z) ? 1 : 0; }

  int IsOdd() const { return mpz_odd_p(z) ? 1 : 0; }

  MpInteger Abs() const {
    MpInteger t;
    mpz_abs(t.z, z);
    return t;
  }

  MpInteger FAbs() const {
    MpInteger t;
    mpz_abs(t.z, z);
    return t;
  }

  uint32 LowerBits() const { return static_cast<uint32>(data()[0]); }

  int BitWidth() const { return IntSign() == 0 ? 0 : SizeInBase(2); }

  int Popcount() const { return mpz_popcount(z); }

  void SetBit(int idx) { mpz_setbit(z, idx); }

  void ResetBit(int idx) { mpz_clrbit(z, idx); }

  int GetBit(int idx) const { return mpz_tstbit(z, idx); }

  void RevBit(int idx) { mpz_combit(z, idx); }

  int SizeInBase(int base = 10) const {
    return static_cast<int>(mpz_sizeinbase(z, base));
  }

  std::string ToString() const {
    size_t size = mpz_sizeinbase(z, 10) + 1;

    char* buff = new char[size + 1];
    if (buff != nullptr) {
      gmp_sprintf(buff, "%Zd", z);
    }
    std::string ret(buff);
    delete[] buff;
    return ret;
  }

  std::string to_string() const { return ToString(); }

  template <typename T>
  REQUIRES((is_builtin_integer_v<T> && pe_is_signed_v<T>))
  RETURN(T) ToInt() const {
    using UnsignedT = pe_make_unsigned_t<T>;
    UnsignedT v = ToInt<UnsignedT>();
    if (IntSign() < 0) {
      v = ~v + 1;
    }
    return static_cast<T>(v);
  }

  template <typename T>
  REQUIRES((is_builtin_integer_v<T> && pe_is_unsigned_v<T>))
  RETURN(T) ToInt() const {
    T result = 0;
    const mp_limb_t* buff = data();
    for (int i = size() - 1; i >= 0; --i) {
#if defined(COMPILER_MSVC) || defined(COMPILER_CLANG)
      result <<= sizeof(mp_limb_t) * 2;
      result <<= sizeof(mp_limb_t) * 2;
      result <<= sizeof(mp_limb_t) * 2;
      result = static_cast<T>((result << sizeof(mp_limb_t) * 2) | buff[i]);
#else
      result = (result << sizeof(mp_limb_t) * 8) | buff[i];
#endif
    }
    return result;
  }

  template <typename T>
  REQUIRES((is_extended_integer_v<T>))
  RETURN(T) ToInt() const {
    T ret;
    ret.FromUInt32Vector(ToUInt32Vector());
    if (IntSign() < 0) {
      ret.FlipBits();
      ret.AddOne();
    }
    return ret;
  }

  template <typename T>
  T ToFloat() const {
    T result = 0;
    const mp_limb_t* buff = data();
    T each = 1;
    for (int i = 0; i < 8; ++i) {
      each *= 1LL << sizeof(mp_limb_t);
    }
    for (int i = size() - 1; i >= 0; --i) {
      result = result * each + buff[i];
    }
    if (IntSign() < 0) {
      result = -result;
    }
    return result;
  }

  MpInteger NRootI(int n) const {
    MpInteger ret;
    mpz_root(ret.mpz(), mpz(), n);
    return ret;
  }

  MpInteger SqrtI() const {
    MpInteger ret;
    mpz_sqrt(ret.mpz(), mpz());
    return ret;
  }

 public:
  // Operators
  const MpInteger& operator+() const { return *this; }

  const MpInteger operator-() const {
    MpInteger ret(*this);
    mpz_neg(ret.z, ret.z);
    return ret;
  }

  MpInteger operator~() const {
    MpInteger ret;
    mpz_com(ret.z, z);
    return ret;
  }

  template <typename T>
  REQUIRES((is_builtin_integer_v<T> && (std::is_same<T, unsigned int>::value ||
                                        std::is_same<T, unsigned long>::value)))
  RETURN(MpInteger&) operator+=(T val) {
    mpz_add_ui(z, z, val);
    return *this;
  }

  MpInteger& operator-=(const MpInteger& o) {
    mpz_sub(z, z, o.z);
    return *this;
  }

  template <typename T>
  REQUIRES((is_builtin_integer_v<T> && (std::is_same<T, unsigned int>::value ||
                                        std::is_same<T, unsigned long>::value)))
  RETURN(MpInteger&) operator-=(T val) {
    mpz_sub_ui(z, z, val);
    return *this;
  }

  MpInteger& operator*=(const MpInteger& o) {
    mpz_mul(z, z, o.z);
    return *this;
  }

  template <typename T>
  REQUIRES((is_builtin_integer_v<T> &&
            (std::is_same<T, int>::value || std::is_same<T, long>::value)))
  RETURN(MpInteger&) operator*=(T val) {
    mpz_mul_si(z, z, val);
    return *this;
  }

  template <typename T>
  REQUIRES((is_builtin_integer_v<T> && (std::is_same<T, unsigned int>::value ||
                                        std::is_same<T, unsigned long>::value)))
  RETURN(MpInteger&) operator*=(T val) {
    mpz_mul_ui(z, z, val);
    return *this;
  }

  MpInteger& operator/=(const MpInteger& o) {
    mpz_tdiv_q(z, z, o.z);
    return *this;
  }

  template <typename T>
  REQUIRES((is_builtin_integer_v<T> && (std::is_same<T, unsigned int>::value ||
                                        std::is_same<T, unsigned long>::value)))
  MpInteger&
  operator/=(T val) {
    mpz_tdiv_q_ui(z, z, val);
    return *this;
  }

  MpInteger& operator%=(const MpInteger& o) {
    mpz_tdiv_r(z, z, o.z);
    return *this;
  }

  MpInteger& operator&=(const MpInteger& o) {
    mpz_and(z, z, o.z);
    return *this;
  }

  MpInteger& operator^=(const MpInteger& o) {
    mpz_xor(z, z, o.z);
    return *this;
  }

  MpInteger& operator|=(const MpInteger& o) {
    mpz_ior(z, z, o.z);
    return *this;
  }

  MpInteger& operator>>=(int cnt) {
    mpz_tdiv_q_2exp(z, z, cnt);
    return *this;
  }

  MpInteger& operator<<=(int cnt) {
    mpz_mul_2exp(z, z, cnt);
    return *this;
  }

  MpInteger& operator++() {
    *this += 1;
    return *this;
  }

  MpInteger operator++(int) {
    MpInteger ret(*this);
    *this += 1;
    return ret;
  }

  MpInteger& operator--() {
    *this -= 1;
    return *this;
  }

  MpInteger operator--(int) {
    MpInteger ret(*this);
    *this -= 1;
    return ret;
  }

 public:
// compare operators
#if PE_HAS_CPP20
  friend inline int operator<=>(const MpInteger& l, const MpInteger& r) {
    return mpz_cmp(l.z, r.z);
  }

  friend inline int operator==(const MpInteger& l, const MpInteger& r) {
    return (l <=> r) == 0;
  }

  friend inline int operator!=(const MpInteger& l, const MpInteger& r) {
    return (l <=> r) != 0;
  }
#else
  friend inline int operator<(const MpInteger& l, const MpInteger& r) {
    return mpz_cmp(l.z, r.z) < 0;
  }

  friend inline int operator<=(const MpInteger& l, const MpInteger& r) {
    return mpz_cmp(l.z, r.z) <= 0;
  }

  friend inline int operator>(const MpInteger& l, const MpInteger& r) {
    return mpz_cmp(l.z, r.z) > 0;
  }

  friend inline int operator>=(const MpInteger& l, const MpInteger& r) {
    return mpz_cmp(l.z, r.z) >= 0;
  }

  friend inline int operator==(const MpInteger& l, const MpInteger& r) {
    return mpz_cmp(l.z, r.z) == 0;
  }

  friend inline int operator!=(const MpInteger& l, const MpInteger& r) {
    return mpz_cmp(l.z, r.z) != 0;
  }
#endif

  // binary operators
  friend inline MpInteger operator+(const MpInteger& l, const MpInteger& r) {
    MpInteger ret;
    mpz_add(ret.z, l.z, r.z);
    return ret;
  }

  template <typename T>
  friend inline REQUIRES((is_builtin_integer_v<T> &&
                          (std::is_same<T, unsigned int>::value ||
                           std::is_same<T, unsigned long>::value)))
      RETURN(MpInteger) operator+(const MpInteger & l, T r) {
    MpInteger ret;
    mpz_add_ui(ret.z, l.z, r);
    return ret;
  }

  template <typename T>
  friend inline REQUIRES((is_builtin_integer_v<T> &&
                          (std::is_same<T, unsigned int>::value ||
                           std::is_same<T, unsigned long>::value)))
      RETURN(MpInteger) operator+(T l, const MpInteger & r) {
    MpInteger ret;
    mpz_add_ui(ret.z, r.z, l);
    return ret;
  }

  friend inline MpInteger operator-(const MpInteger& l, const MpInteger& r) {
    MpInteger ret;
    mpz_sub(ret.z, l.z, r.z);
    return ret;
  }

  template <typename T>
  friend inline REQUIRES((is_builtin_integer_v<T> &&
                          (std::is_same<T, unsigned int>::value ||
                           std::is_same<T, unsigned long>::value)))
      RETURN(MpInteger) operator-(const MpInteger & l, T r) {
    MpInteger ret;
    mpz_sub_ui(ret.z, l.z, r);
    return ret;
  }

  template <typename T>
  friend inline REQUIRES((is_builtin_integer_v<T> &&
                          (std::is_same<T, unsigned int>::value ||
                           std::is_same<T, unsigned long>::value)))
      RETURN(MpInteger) operator-(T l, const MpInteger & r) {
    MpInteger ret;
    mpz_ui_sub(ret.z, l, r.z);
    return ret;
  }

  friend inline MpInteger operator*(const MpInteger& l, const MpInteger& r) {
    MpInteger ret;
    mpz_mul(ret.z, l.z, r.z);
    return ret;
  }

  template <typename T>
  friend inline REQUIRES((is_builtin_integer_v<T> &&
                          (std::is_same<T, int>::value ||
                           std::is_same<T, long>::value)))
      RETURN(MpInteger) operator*(const MpInteger & l, T r) {
    MpInteger ret;
    mpz_mul_si(ret.z, l.z, r);
    return ret;
  }

  template <typename T>
  friend inline REQUIRES((is_builtin_integer_v<T> &&
                          (std::is_same<T, int>::value ||
                           std::is_same<T, long>::value)))
      RETURN(MpInteger) operator*(T l, const MpInteger & r) {
    MpInteger ret;
    mpz_mul_si(ret.z, r.z, l);
    return ret;
  }

  template <typename T>
  friend inline REQUIRES((is_builtin_integer_v<T> &&
                          (std::is_same<T, unsigned int>::value ||
                           std::is_same<T, unsigned long>::value)))
      RETURN(MpInteger) operator*(const MpInteger & l, T r) {
    MpInteger ret;
    mpz_mul_ui(ret.z, l.z, r);
    return ret;
  }

  template <typename T>
  friend inline REQUIRES((is_builtin_integer_v<T> &&
                          (std::is_same<T, unsigned int>::value ||
                           std::is_same<T, unsigned long>::value)))
      RETURN(MpInteger) operator*(T l, const MpInteger & r) {
    MpInteger ret;
    mpz_mul_ui(ret.z, r.z, l);
    return ret;
  }

  friend inline MpInteger operator/(const MpInteger& l, const MpInteger& r) {
    MpInteger ret;
    mpz_tdiv_q(ret.z, l.z, r.z);
    return ret;
  }

  template <typename T>
  friend inline REQUIRES(
      (is_builtin_integer_v<T> &&
       !std::is_same<typename std::remove_cvref<T>::type, MpInteger>::value &&
       (std::is_same<T, unsigned int>::value ||
        std::is_same<T, unsigned long>::value)))
      RETURN(MpInteger) operator/(const MpInteger & l, T r) {
    MpInteger ret;
    mpz_tdiv_q_ui(ret.z, l.z, r);
    return ret;
  }

  friend inline MpInteger operator%(const MpInteger& l, const MpInteger& r) {
    MpInteger ret;
    mpz_tdiv_r(ret.z, l.z, r.z);
    return ret;
  }

  template <typename T>
  friend inline REQUIRES(
      (is_builtin_integer_v<T> &&
       !std::is_same<typename std::remove_cvref<T>::type, MpInteger>::value &&
       (std::is_same<T, unsigned int>::value ||
        std::is_same<T, unsigned long>::value)))
      RETURN(MpInteger) operator%(const MpInteger & l, T r) {
    MpInteger ret;
    mpz_tdiv_r_ui(ret.z, l.z, r);
    return ret;
  }

  friend inline MpInteger operator>>(const MpInteger& l, const MpInteger& cnt) {
    MpInteger ret;
    mpz_tdiv_q_2exp(ret.z, l.z, cnt.ToInt<int>());
    return ret;
  }

  friend inline MpInteger operator>>(const MpInteger& l, int cnt) {
    MpInteger ret;
    mpz_tdiv_q_2exp(ret.z, l.z, cnt);
    return ret;
  }

  friend inline MpInteger operator<<(const MpInteger& l, const MpInteger& cnt) {
    MpInteger ret;
    mpz_mul_2exp(ret.z, l.z, cnt.ToInt<int>());
    return ret;
  }

  friend inline MpInteger operator<<(const MpInteger& l, int cnt) {
    MpInteger ret;
    mpz_mul_2exp(ret.z, l.z, cnt);
    return ret;
  }

  friend inline MpInteger operator&(const MpInteger& l, const MpInteger& r) {
    MpInteger ret;
    mpz_and(ret.z, l.z, r.z);
    return ret;
  }

  friend inline MpInteger operator|(const MpInteger& l, const MpInteger& r) {
    MpInteger ret;
    mpz_ior(ret.z, l.z, r.z);
    return ret;
  }

  friend inline MpInteger operator^(const MpInteger& l, const MpInteger& r) {
    MpInteger ret;
    mpz_xor(ret.z, l.z, r.z);
    return ret;
  }

  friend inline std::ostream& operator<<(std::ostream& o,
                                         const MpInteger& val) {
    return o << val.ToString();
  }

  MpInteger& operator+=(const MpInteger& o) {
    mpz_add(z, z, o.z);
    return *this;
  }

 private:
  mpz_t z;
};

SL MpInteger Abs(const MpInteger& x) { return x.Abs(); }

SL MpInteger FAbs(const MpInteger& x) { return x.Abs(); }

SL std::tuple<MpInteger, MpInteger> Div(const MpInteger& a,
                                        const MpInteger& b) {
  MpInteger quotient, remainder;
  mpz_tdiv_qr(quotient.mpz(), remainder.mpz(), a.mpz(), b.mpz());
  return {std::move(quotient), std::move(remainder)};
}

template <typename T>
SL REQUIRES((is_builtin_integer_v<T> &&
             is_one_of_v<T, unsigned int, unsigned long>)) RETURN(MpInteger)
    Power(const MpInteger& base, T n) {
  MpInteger ret;
  mpz_pow_ui(ret.mpz(), base.mpz(), n);
  return ret;
}

template <typename T>
SL REQUIRES((is_builtin_integer_v<T> && is_one_of_v<T, int, long>))
    RETURN(MpInteger) Power(const MpInteger& base, T n) {
  using UnsignedT = pe_make_unsigned_t<T>;
  MpInteger ret;
  mpz_pow_ui(ret.mpz(), base.mpz(), static_cast<UnsignedT>(n));
  return ret;
}

SL MpInteger PowerMod(const MpInteger& base, const MpInteger& n,
                      const MpInteger& mod) {
  MpInteger ret;
  mpz_powm(ret.mpz(), base.mpz(), n.mpz(), mod.mpz());
  return ret;
}

template <typename T>
SL REQUIRES((is_builtin_integer_v<T> &&
             is_one_of_v<T, unsigned int, unsigned long>)) RETURN(MpInteger)
    PowerMod(const MpInteger& base, T n, const MpInteger& mod) {
  MpInteger ret;
  mpz_powm(ret.mpz(), base.mpz(), n, mod.mpz());
  return ret;
}

SL MpInteger Gcd(const MpInteger& m, const MpInteger& n) {
  MpInteger ret;
  mpz_gcd(ret.mpz(), m.mpz(), n.mpz());
  return ret;
}

using bn = MpInteger;
}  // namespace pe

#if PE_HAS_CPP20
namespace pe {
static_assert(PeGbi<MpInteger>);
static_assert(PeFraction<Fraction<MpInteger>>);
}  // namespace pe
#endif

inline pe::MpInteger operator"" _mpi(const char* sv, size_t /*sc*/) {
  return pe::MpInteger(std::string(sv));
}

inline pe::MpInteger operator"" _mpi(unsigned long long v) {
  return pe::MpInteger(v);
}

inline pe::MpInteger operator"" _bn(const char* sv, size_t /*sc*/) {
  return pe::MpInteger(std::string(sv));
}

inline pe::MpInteger operator"" _bn(unsigned long long v) {
  return pe::MpInteger(v);
}
#endif  // end ENABLE_GMP

#endif
