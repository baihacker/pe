#ifndef PE_TYPE_TRAITS_
#define PE_TYPE_TRAITS_

#include "pe_base"

#if PE_CPP_VERSION <= 201703L
namespace std {
template <typename T>
struct remove_cvref {
  using T1 = typename remove_cv<T>::type;
  using type = typename remove_reference<T1>::type;
};
template <typename T>
using remove_cvref_t = typename remove_cvref<T>::type;
}  // namespace std
#endif

namespace pe {
template <int v>
struct IntToType {
  enum { value = v };
};

// A simple concept implementation.
// Example usage:
// template<typename T, typename U>
// REQUIRES((is_builtin_integer_v<T> && pe_is_unsigned_v<U>))
// RETURN(void)  foo(T x, U y)  {}
template <typename T>
struct CheckConditionThen {
  template <typename U>
  struct IdenticalType {
    using type = U;
  };
};

#if defined(VSCODE_EDITOR)
#define REQUIRES(...) typename pe::CheckConditionThen<int[(__VA_ARGS__)]>::
#else
#define REQUIRES(...) \
  typename pe::CheckConditionThen<int[(__VA_ARGS__) * 2 - 1]>::
#endif
#define RETURN(...) template IdenticalType<__VA_ARGS__>::type

// pe type traits

// Forward declaration of integers.
template <typename ET, bool is_builtin>
struct ExtendedUnsignedIntImpl;

template <typename ET, bool is_builtin>
struct ExtendedSignedIntImpl;

class BigInteger;

#if ENABLE_GMP
class MpInteger;
#endif

// is_builtin_integer
template <typename T>
struct is_builtin_integer_impl {
  enum { value = std::is_integral_v<T> };
};

#if PE_HAS_INT128
template <>
struct is_builtin_integer_impl<int128> {
  enum { value = true };
};
template <>
struct is_builtin_integer_impl<uint128> {
  enum { value = true };
};
#endif

template <typename T>
struct is_builtin_integer : public is_builtin_integer_impl<T> {};

template <typename T>
inline constexpr bool is_builtin_integer_v = is_builtin_integer<T>::value;

// is_extended_integer
template <typename T>
struct is_extended_integer_impl {
  enum { value = false };
};

template <typename UT, bool is_builtin>
struct is_extended_integer_impl<ExtendedUnsignedIntImpl<UT, is_builtin>> {
  enum { value = true };
};

template <typename ET, bool is_builtin>
struct is_extended_integer_impl<ExtendedSignedIntImpl<ET, is_builtin>> {
  enum { value = true };
};

template <typename T>
struct is_extended_integer : public is_extended_integer_impl<std::decay_t<T>> {
};

template <typename T>
inline constexpr bool is_extended_integer_v = is_extended_integer<T>::value;

// is_builtin_or_extended_integer
template <typename T>
struct is_builtin_or_extended_integer {
  enum { value = is_builtin_integer_v<T> || is_extended_integer_v<T> };
};

template <typename T>
inline constexpr bool is_builtin_or_extended_integer_v =
    is_builtin_or_extended_integer<T>::value;

// is_gbi
template <typename T>
struct is_gbi_impl {
  enum { value = false };
};

template <>
struct is_gbi_impl<BigInteger> {
  enum { value = true };
};

#if ENABLE_GMP
template <>
struct is_gbi_impl<MpInteger> {
  enum { value = true };
};

#endif

#if defined(__GMP_PLUSPLUS__)
template <>
struct is_gbi_impl<mpz_class> {
  enum { value = true };
};
#endif

template <typename T>
struct is_gbi : public is_gbi_impl<std::decay_t<T>> {};

template <typename T>
inline constexpr bool is_gbi_v = is_gbi<T>::value;

// is_general_integer
template <typename T>
struct is_general_integer_impl {
  enum {
    value = is_builtin_integer_v<T> || is_extended_integer_v<T> || is_gbi_v<T>
  };
};

template <typename T>
struct is_general_integer : public is_general_integer_impl<std::decay_t<T>> {};

template <typename T>
inline constexpr bool is_general_integer_v = is_general_integer<T>::value;

// pe_is_signed
template <typename T>
struct pe_is_signed_impl {
  enum { value = std::is_signed_v<T> };
};

#if PE_HAS_INT128
template <>
struct pe_is_signed_impl<int128> {
  enum { value = true };
};

template <>
struct pe_is_signed_impl<uint128> {
  enum { value = false };
};
#endif

template <typename UT, bool is_builtin>
struct pe_is_signed_impl<ExtendedUnsignedIntImpl<UT, is_builtin>> {
  enum { value = false };
};

template <typename ET, bool is_builtin>
struct pe_is_signed_impl<ExtendedSignedIntImpl<ET, is_builtin>> {
  enum { value = true };
};

template <typename T>
struct pe_is_signed : public pe_is_signed_impl<std::decay_t<T>> {};

template <typename T>
inline constexpr bool pe_is_signed_v = pe_is_signed<T>::value;

// pe_is_unsigned
template <typename T>
struct pe_is_unsigned_impl {
  enum { value = std::is_unsigned_v<T> };
};

#if PE_HAS_INT128
template <>
struct pe_is_unsigned_impl<int128> {
  enum { value = false };
};

template <>
struct pe_is_unsigned_impl<uint128> {
  enum { value = true };
};
#endif

template <typename UT, bool is_builtin>
struct pe_is_unsigned_impl<ExtendedUnsignedIntImpl<UT, is_builtin>> {
  enum { value = true };
};

template <typename ET, bool is_builtin>
struct pe_is_unsigned_impl<ExtendedSignedIntImpl<ET, is_builtin>> {
  enum { value = false };
};

template <typename T>
struct pe_is_unsigned : public pe_is_unsigned_impl<std::decay_t<T>> {};

template <typename T>
inline constexpr bool pe_is_unsigned_v = pe_is_unsigned<T>::value;

// pe_make_signed
template <typename T>
struct pe_make_signed {
  using type = std::make_signed_t<T>;
};

#if PE_HAS_INT128
template <>
struct pe_make_signed<int128> {
  using type = int128;
};

template <>
struct pe_make_signed<uint128> {
  using type = int128;
};
#endif

template <typename ET, bool is_builtin>
struct pe_make_signed<ExtendedUnsignedIntImpl<ET, is_builtin>> {
  using type = typename ExtendedUnsignedIntImpl<ET, is_builtin>::SignedT;
};

template <typename ET, bool is_builtin>
struct pe_make_signed<ExtendedSignedIntImpl<ET, is_builtin>> {
  using type = typename ExtendedSignedIntImpl<ET, is_builtin>::SignedT;
};

// pe_make_unsigned
template <typename T>
struct pe_make_unsigned {
  using type = std::make_unsigned_t<T>;
};

#if PE_HAS_INT128
template <>
struct pe_make_unsigned<int128> {
  using type = uint128;
};

template <>
struct pe_make_unsigned<uint128> {
  using type = uint128;
};
#endif

template <typename ET, bool is_builtin>
struct pe_make_unsigned<ExtendedUnsignedIntImpl<ET, is_builtin>> {
  using type = typename ExtendedUnsignedIntImpl<ET, is_builtin>::UnsignedT;
};

template <typename ET, bool is_builtin>
struct pe_make_unsigned<ExtendedSignedIntImpl<ET, is_builtin>> {
  using type = typename ExtendedSignedIntImpl<ET, is_builtin>::UnsignedT;
};

template <typename T>
using pe_make_unsigned_t = typename pe_make_unsigned<T>::type;

// make_const_arg_type
template <typename T, bool value = false>
struct make_const_arg_type_impl {
  using type = std::add_lvalue_reference_t<std::add_const_t<T>>;
};

template <typename T>
struct make_const_arg_type_impl<T, /*value=**/ true> {
  using type = std::add_const_t<T>;
};

template <typename T>
struct make_const_arg_type
    : public make_const_arg_type_impl<T, (sizeof(T) <=
                                              2 * sizeof(std::nullptr_t) &&
                                          std::is_trivially_copyable_v<T>)> {};

template <typename T>
using make_const_arg_type_t = typename make_const_arg_type<T>::type;

// predicate_all
template <template <typename T> class predicate, typename... TL>
struct predicate_all {
  enum { value = (... && predicate<TL>::value) };
};

template <template <typename T> class predicate, typename... TL>
inline constexpr bool predicate_all_v = predicate_all<predicate, TL...>::value;

// predicate_any
template <template <typename T> class predicate, typename... TL>
struct predicate_any {
  enum { value = (... || predicate<TL>::value) };
};

template <template <typename T> class predicate, typename... TL>
inline constexpr bool predicate_any_v = predicate_any<predicate, TL...>::value;

// predicate_none
template <template <typename T> class predicate, typename... TL>
struct predicate_none {
  enum { value = (... && !predicate<TL>::value) };
};

template <template <typename T> class predicate, typename... TL>
inline constexpr bool predicate_none_v =
    predicate_none<predicate, TL...>::value;

// is_one_of
template <typename T, typename... TL>
struct is_one_of {
  enum { value = (... || std::is_same_v<std::decay_t<T>, std::decay_t<TL>>)};
};

template <typename T, typename... TL>
inline constexpr bool is_one_of_v = is_one_of<T, TL...>::value;

// reduce_type
template <template <typename T1, typename T2> class reducer, typename TH,
          typename... TL>
struct reduce_type {
  using type =
      typename reducer<TH, typename reduce_type<reducer, TL...>::type>::type;
};

template <template <typename T1, typename T2> class reducer, typename TH>
struct reduce_type<reducer, TH> {
  using type = TH;
};

template <template <typename T1, typename T2> class reducer, typename TH,
          typename... TL>
using reduce_type_t = typename reduce_type<reducer, TH, TL...>::type;

// Integer type promotion

// bigger_integral
template <typename T1, typename T2, bool ge, bool same>
struct bigger_integral_impl {
  using type = T1;
};

template <typename T1, typename T2>
struct bigger_integral_impl<T1, T2, false, false> {
  using type = T2;
};

template <typename T1, typename T2>
struct bigger_integral_impl<T1, T2, true, true> {
  using type = pe_make_unsigned_t<T1>;
};

template <typename T1, typename T2, bool is_t1_gbi, bool is_t2_gbi>
struct bigger_integral_handle_gbi;

template <typename T1, typename T2, bool is_t2_gbi>
struct bigger_integral_handle_gbi<T1, T2, true, is_t2_gbi> {
  using type = T1;
};

template <typename T1, typename T2>
struct bigger_integral_handle_gbi<T1, T2, false, true> {
  using type = T2;
};

template <typename T1, typename T2>
struct bigger_integral_handle_gbi<T1, T2, false, false> {
  using U1 = pe_make_unsigned_t<T1>;
  using U2 = pe_make_unsigned_t<T2>;
  using type = typename bigger_integral_impl<T1, T2, (sizeof(T1) >= sizeof(T2)),
                                             std::is_same<U1, U2>::value>::type;
};

template <typename T1, typename T2>
struct bigger_integral {
  using type = typename bigger_integral_handle_gbi<T1, T2, is_gbi_v<T1>,
                                                   is_gbi_v<T2>>::type;
};

template <typename T>
struct bigger_integral<T, T> {
  using type = T;
};

template <typename T1, typename T2>
using bigger_integral_t = typename bigger_integral<T1, T2>::type;

// biggest_integral
template <typename TH, typename... TT>
struct biggest_integral {
  using type = reduce_type_t<bigger_integral, TH, TT...>;
};

template <typename TH, typename... TT>
using biggest_integral_t = typename biggest_integral<TH, TT...>::type;

template <typename TH, typename... TT>
using int_promption_t = typename biggest_integral<TH, TT...>::type;

// at_least_uint64
template <typename T>
struct at_least_uint64 {
  using type = int_promption_t<T, uint64>;
};

template <typename T>
using at_least_uint64_t = typename at_least_uint64<T>::type;

// at_least_int64
template <typename T>
struct at_least_int64 {
  using type = int_promption_t<T, int64>;
};

template <typename T>
using at_least_int64_t = typename at_least_int64<T>::type;

// Span like
template <typename T>
struct span_like_impl {
  using ElementType = T;
  using NonConstElementType = std::remove_const_t<T>;
  using ConstElementType = std::add_const_t<T>;
  enum {
    value = false,
    is_element_type_const = std::is_same_v<ElementType, ConstElementType>
  };
};

template <typename T, uint64 N>
struct span_like_impl<T[N]> {
  using ElementType = T;
  using NonConstElementType = std::remove_const_t<T>;
  using ConstElementType = std::add_const_t<T>;
  enum {
    value = true,
    is_element_type_const = std::is_same_v<ElementType, ConstElementType>
  };
};

template <typename T>
struct span_like_impl<std::vector<T>> {
  using ElementType = T;
  using NonConstElementType = std::remove_const_t<T>;
  using ConstElementType = std::add_const_t<T>;
  enum {
    value = true,
    is_element_type_const = std::is_same_v<ElementType, ConstElementType>
  };
};

template <typename T, std::size_t N>
struct span_like_impl<std::array<T, N>> {
  using ElementType = T;
  using NonConstElementType = std::remove_const_t<T>;
  using ConstElementType = std::add_const_t<T>;
  enum {
    value = true,
    is_element_type_const = std::is_same_v<ElementType, ConstElementType>
  };
};

#if PE_HAS_CPP20 && !defined(COMPILER_MSVC)
template <typename T, std::size_t N>
struct span_like_impl<std::span<T, N>> {
  using ElementType = T;
  using NonConstElementType = std::remove_const_t<T>;
  using ConstElementType = std::add_const_t<T>;
  enum {
    value = true,
    is_element_type_const = std::is_same_v<ElementType, ConstElementType>
  };
};
#endif

template <typename T>
struct span_like : public span_like_impl<std::remove_reference_t<T>> {};

template <typename T>
inline constexpr bool is_span_like_v = span_like<T>::value;

template <typename... T>
inline constexpr bool is_all_span_like_v = (... && span_like<T>::value);

template <typename TH, typename... TL>
inline constexpr bool is_same_element_type_v =
    is_all_span_like_v<TH, TL...> &&
    (... && std::is_same_v<typename span_like<TH>::ElementType,
                           typename span_like<TL>::ElementType>);

template <typename TH, typename... TL>
inline constexpr bool is_same_const_element_type_v =
    is_all_span_like_v<TH, TL...> &&
    (... && std::is_same_v<typename span_like<TH>::ConstElementType,
                           typename span_like<TL>::ConstElementType>);

template <typename TH, typename... TL>
inline constexpr bool is_same_non_const_element_type_v =
    is_all_span_like_v<TH, TL...> &&
    (... && std::is_same_v<typename span_like<TH>::NonConstElementType,
                           typename span_like<TL>::NonConstElementType>);

}  // namespace pe
#endif
