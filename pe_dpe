#ifndef PE_DPE_
#define PE_DPE_

#include "pe_base"
#include "pe_time"
#include "pe_parallel"

namespace pe {
#if ENABLE_ZMQ
struct DpeCommand {
  std::string name;
  std::vector<std::vector<int64>> args;
  std::string ToString() const {
    std::stringstream ss;
    ss << name;
    ss << "(";
    int arg_idx = 0;
    for (const auto &arg : args) {
      if (arg_idx > 0) ss << ",";
      if (std::size(arg) == 1) {
        ss << arg[0];
      } else {
        ss << "{";
        int val_idx = 0;
        for (const int64 val : arg) {
          if (val_idx > 0) ss << ",";
          ss << val;
          ++val_idx;
        }
        ss << "}";
      }
      ++arg_idx;
    }
    ss << ")";
    return ss.str();
  }
};

SL std::ostream &operator<<(std::ostream &o, const DpeCommand &cmd) {
  return o << cmd.ToString();
}
namespace internal {

SL std::optional<std::string> ParseDpeToken(std::string_view cmd, int &i) {
  while (i < std::size(cmd) && std::isspace(cmd[i])) ++i;
  if (i == std::size(cmd)) return "$";

  if (cmd[i] == '(' || cmd[i] == ')' || cmd[i] == '{' || cmd[i] == '}' ||
      cmd[i] == ',') {
    return std::string(cmd.substr(i++, 1));
  } else if (std::isalpha(cmd[i])) {
    int j = i;
    while (i < std::size(cmd) && std::isalpha(cmd[i])) {
      ++i;
    }
    return std::string(cmd.substr(j, i - j));
  } else if (std::isdigit(cmd[i]) || cmd[i] == '+' || cmd[i] == '-') {
    int j = i;
    while (i < std::size(cmd) && (cmd[i] == '+' || cmd[i] == '-')) {
      ++i;
    }
    if (i == std::size(cmd) || !std::isdigit(cmd[i])) {
      return std::nullopt;
    }
    while (i < std::size(cmd) && std::isdigit(cmd[i])) {
      ++i;
    }
    return std::string(cmd.substr(j, i - j));
  }

  return std::nullopt;
}

SL std::optional<int64> ParseNumberToken(std::optional<std::string> s) {
  if (!s.has_value() || std::empty(s.value())) {
    return std::nullopt;
  }
  if (std::isdigit(s.value()[0]) || s.value()[0] == '+' ||
      s.value()[0] == '-') {
    std::string t = *s;
    const int size = static_cast<int>(std::size(t));
    int sgn = 1;
    int j = 0;
    while (j < size && (t[j] == '+' || t[j] == '-')) {
      if (t[j] == '-') {
        sgn = -sgn;
      }
      ++j;
    }
    int64 value = 0;
    while (j < size && std::isdigit(t[j])) {
      value = value * 10 + t[j] - '0';
      ++j;
    }
    return sgn < 0 ? -value : value;
  }
  return std::nullopt;
}

SL std::optional<std::vector<int64>> ParseDpeNumberList(std::string_view cmd,
                                                        int &i) {
  std::optional<std::string> token = ParseDpeToken(cmd, i);
  if (!token.has_value()) {
    return std::nullopt;
  }

  if (token == "{") {
    std::vector<int64> ret;
    for (;;) {
      std::optional<std::string> token = ParseDpeToken(cmd, i);
      if (!token.has_value()) {
        return std::nullopt;
      }
      if (token == "}") {
        break;
      }
      if (token == ",") {
        continue;
      }
      if (std::optional<int64> number = ParseNumberToken(token);
          number.has_value()) {
        ret.push_back(*number);
      } else {
        return std::nullopt;
      }
    }
    return ret;
  } else if (std::optional<int64> number = ParseNumberToken(token);
             number.has_value()) {
    return std::vector<int64>{*number};
  }

  return std::nullopt;
}

SL std::optional<std::vector<std::vector<int64>>> ParseDpeArgs(
    std::string_view cmd, int &i) {
  std::optional<std::string> start = ParseDpeToken(cmd, i);

  if (!start.has_value()) {
    return std::nullopt;
  }

  if (start == "$") {
    return std::vector<std::vector<int64>>{};
  }

  if (start != "(") {
    return std::nullopt;
  }

  std::vector<std::vector<int64>> ret;
  for (;;) {
    std::optional<std::string> token = ParseDpeToken(cmd, i);
    if (!token.has_value()) {
      return std::nullopt;
    }
    if (token == ")") {
      break;
    }
    if (token == ",") {
      continue;
    }
    std::string s = *std::move(token);
    if (s[0] == '{' || s[0] == '+' || s[0] == '-' || std::isdigit(s[0])) {
      i -= static_cast<int>(std::size(s));
      std::optional<std::vector<int64>> number_list =
          ParseDpeNumberList(cmd, i);
      if (!number_list.has_value()) {
        return std::nullopt;
      }
      ret.push_back(*std::move(number_list));
    } else {
      return std::nullopt;
    }
  }
  return ret;
}

SL std::optional<DpeCommand> ParseDpeCommand(std::string_view cmd, int &i) {
  std::optional<std::string> name = ParseDpeToken(cmd, i);
  if (!name.has_value() || std::empty(name.value()) ||
      !std::isalpha(name.value()[0])) {
    return std::nullopt;
  }

  std::optional<std::vector<std::vector<int64>>> args = ParseDpeArgs(cmd, i);
  if (!args.has_value()) {
    return std::nullopt;
  }

  return DpeCommand{.name = *std::move(name), .args = *std::move(args)};
}

SL std::optional<DpeCommand> ParseDpeCommand(std::string_view cmd) {
  int i = 0;
  return ParseDpeCommand(cmd, i);
}

void DeserializeField(const std::vector<int64> &src, int64 &value) {
  if (src.empty()) {
    std::cerr << "Cannot deserlize value" << std::endl;
    exit(-1);
  }
  value = src[0];
}

void DeserializeField(const std::vector<int64> &src,
                      std::vector<int64> &value) {
  value = src;
}

void DeserializeField(const std::vector<int64> &src, std::string &value) {
  for (auto iter : src) value += char(iter);
}

void DeserializeField(const std::vector<int64> &src,
                      std::vector<std::pair<int64, int64>> &value) {
  const int size = static_cast<int>(src.size());
  if (IsOdd(size)) {
    std::cerr << "Unexpected src size: " << size << std::endl;
    exit(-1);
  }
  for (int i = 0; i < size; i += 2) {
    value.push_back({src[i], src[i + 1]});
  }
}

std::vector<int64> SerializeField(int64 value) { return {value}; }

std::vector<int64> SerializeField(const std::vector<int64> &value) {
  return value;
}

std::vector<int64> SerializeField(const std::string &value) {
  std::vector<int64> ret;
  for (auto iter : value) {
    ret.push_back(iter);
  }
  return ret;
}

std::vector<int64> SerializeField(
    const std::vector<std::pair<int64, int64>> &value) {
  std::vector<int64> ret;
  for (auto iter : value) {
    ret.push_back(iter.first);
    ret.push_back(iter.second);
  }
  return ret;
}

template <typename... T>
void SerializeObject(std::tuple<T...> &&obj,
                     std::vector<std::vector<int64>> &target) {
  const int field_count = std::tuple_size_v<std::tuple<T...>>;
  target.push_back(std::vector<int64>{field_count});

  std::apply(
      [&](T &&...field) { ((target.push_back(SerializeField(field))), ...); },
      obj);
}

template <typename OT, typename... T>
void SerializeObject(const OT &obj, std::vector<std::vector<int64>> &target) {
  SerializeObject(obj.AsTuple(), target);
}

template <typename T>
bool AppendObject(const T &object, DpeCommand &command) {
  SerializeObject<T>(object, command.args);
  return true;
}

template <typename T>
bool AppendObjects(const std::vector<T> &objects, DpeCommand &command) {
  auto &args = command.args;
  for (const T &object : objects) {
    SerializeObject<T>(object, command.args);
  }
  return true;
}

template <typename... T>
void DeserializeObject(const std::vector<std::vector<int64>> &source,
                       int64 &idx, std::tuple<T...> &&obj) {
  const int field_count = std::tuple_size_v<std::tuple<T...>>;
  const int size = source.size();
  if (idx >= size) {
    std::cerr << "Invalid index, idx = " << idx << ", size = " << size
              << std::endl;
    exit(-1);
  }
  if (source[idx].size() != 1) {
    std::cerr << "Wrong object format" << std::endl;
    exit(-1);
  }
  int64 source_cnt = source[idx][0];
  if (idx + source_cnt >= size) {
    std::cerr << "Wrong object format, insufficient data, idx = " << idx
              << ", source_cnt = " << source_cnt << ", size = " << size
              << std::endl;
    exit(-1);
  }
  if (field_count != source_cnt) {
    std::cerr << "Wrong field count, expected " << field_count
              << ", actual = " << source_cnt << std::endl;
    exit(-1);
  }
  ++idx;
  std::apply(
      [&](T &&...field) { ((DeserializeField(source[idx++], field)), ...); },
      obj);
}

template <typename OT, typename... T>
OT DeserializeObject(const std::vector<std::vector<int64>> &source,
                     int64 &idx) {
  OT obj;
  DeserializeObject(source, idx, obj.AsTuple());
  return obj;
}

template <typename OT, typename... T>
OT DeserializeObject(const std::vector<std::vector<int64>> &source) {
  int64 idx = 0;
  return DeserializeObject<OT>(source, idx);
}

template <typename T>
T ParseObject(const DpeCommand &command) {
  return DeserializeObject<T>(command.args);
}

template <typename T>
std::vector<T> ParseObjects(const DpeCommand &command) {
  std::vector<T> ret;
  const int64 size = command.args.size();
  for (int64 i = 0; i < size;) {
    ret.push_back(DeserializeObject<T>(command.args, i));
  }
  return ret;
}
}  // namespace internal

#define DECLARE_SERIALIZATION(...)                              \
  auto AsTuple() { return std::forward_as_tuple(__VA_ARGS__); } \
  auto AsTuple() const { return std::forward_as_tuple(__VA_ARGS__); }

// Distributred PE
template <typename Derived, typename TaskType, typename ResultType>
class DpeServer {
 public:
  DpeServer(std::string_view server_address, std::string_view cache_path)
      : server_address(server_address), cache_path(cache_path) {}

  void RunReducer() {
    Initialize();

    void *context = zmq_ctx_new();
    void *responder = zmq_socket(context, ZMQ_REP);
    int rc = zmq_bind(responder, std::data(server_address));
    assert(rc == 0);

    constexpr int buffer_length = (1 << 20) * 100;
    char *buffer = new char[buffer_length + 1];
    for (; solved < total;) {
      int received = zmq_recv(responder, buffer, buffer_length, 0);
      buffer[received] = 0;
      std::string response = HandleRequest(std::string_view(buffer, received));
      zmq_send(responder, std::data(response), std::size(response), 0);
    }
    LogProgress();
    delete[] buffer;
    zmq_close(responder);
    zmq_ctx_destroy(context);

    AsDerived().OnFinish();
  }

  std::vector<ResultType> GetAllResults(const std::vector<TaskType> &tasks) {
    std::vector<ResultType> results;
    for (const auto &task : tasks) {
      results.push_back(*cache[task.Key()]);
    }
    return results;
  }

  void InitReducer() {}

  void OnFinish() {}

 private:
  void Initialize() {
    AsDerived().InitReducer();
    {
      std::vector<TaskType> task_list = AsDerived().GenerateTasks();

      cache.clear();
      const int64 size = std::size(task_list);
      for (int i = 0; i < size; ++i) {
        cache[task_list[i].Key()] = std::nullopt;
        task_map[task_list[i].Key()] = std::move(task_list[i]);
      }
    }

    total = std::size(cache);
    solved = 0;

    LoadCache();

    unsolved = std::queue<std::string>();
    for (const auto &[key, value] : cache) {
      if (value.has_value()) {
        ++solved;
        AsDerived().Reduce(task_map[key], *value);
      } else {
        unsolved.push(key);
      }
    }

    LogProgress();
  }

  void SaveCache() {
    if (std::empty(cache_path)) return;
    FILE *fp = fopen(std::data(cache_path), "w");
    if (!fp) return;

    for (const auto [key, value] : cache) {
      if (value.has_value()) {
        DpeCommand command;
        command.name = "Result";
        internal::AppendObject(*value, command);
        fprintf(fp, "%s %s\n", key.c_str(), command.ToString().c_str());
      }
    }
    fclose(fp);
  }

  void LoadCache() {
    if (std::empty(cache_path)) return;
    FILE *fp = fopen(std::data(cache_path), "r");
    if (!fp) return;

    int64 buff_size = (1 << 20) * 100;
    char *buff = new char[buff_size];
    while (fgets(buff, buff_size, fp) != nullptr) {
      auto *curr = buff;
      while (!std::isspace(*curr)) ++curr;
      std::string key(buff, curr);
      ++curr;
      auto where = cache.find(key);
      if (where != cache.end()) {
        std::optional<DpeCommand> command = internal::ParseDpeCommand(curr);
        if (!command.has_value()) {
          std::cerr << "Cannot parse cached result, key = " << key << std::endl;
          exit(-1);
        }
        where->second = internal::ParseObject<ResultType>(*command);
      }
    }
    delete[] buff;
    fclose(fp);
  }

  std::string HandleRequest(std::string_view request) {
    std::optional<DpeCommand> command = internal::ParseDpeCommand(request);
    if (!command.has_value()) {
      return "error()";
    }

    if (command->name == "GetTasks") {
      if (std::size(command->args) != 1 || std::size(command->args[0]) != 1) {
        return "error()";
      }

      return AsDerived().HandleGetTasks(command->args[0][0]);
    }

    if (command->name == "SetResults") {
      return AsDerived().HandleSetResults(
          internal::ParseObjects<ResultType>(*command));
    }
    return "error()";
  }

  std::string HandleGetTasks(int64 max_task_count) {
    DpeCommand command;
    command.name = "Tasks";
    for (int64 i = 0; i < max_task_count; ++i) {
      if (std::empty(unsolved)) {
        break;
      }
      internal::AppendObject(task_map[unsolved.front()], command);
      unsolved.pop();
    }

    return command.ToString();
  }

  std::string HandleSetResults(const std::vector<ResultType> &answers) {
    for (const auto &result : answers) {
      std::string key = result.Key();
      auto where = cache.find(key);
      if (where != cache.end()) {
        where->second = result;
        ++solved;
      }
      AsDerived().Reduce(task_map[key], result);
      if (solved % 1000 == 0) {
        SaveCache();
      }
      if (solved % 100 == 0) {
        LogProgress();
      }
    }
    return "ok()";
  }

  void LogProgress() {
    TimeDelta te = tr.Elapsed();

    char buff[32];
    sprintf(buff, "%2.2f%%", 100. * solved / total);

    std::string eta;
    while (std::size(history_progress) > 100) history_progress.pop();
    if (std::empty(history_progress) ||
        history_progress.front().second == solved) {
      eta = "n/a";
    } else {
      auto his = history_progress.front();
      // (total - solved) / eta = (solved - his.second) / (te - his.first)
      // eta = (total - solved) / (solved - his.second) * (te - his.first)

      eta = TimeDelta(duration_t(static_cast<int64>(
                          1. * (total - solved) / (solved - his.second) *
                          (te.NativeTime() - his.first.NativeTime()))))
                .Format();
    }
    history_progress.push({te, solved});
    std::cerr << std::setw(6) << buff << " " << solved << " " << total << " "
              << AsDerived().GetAnswer() << " " << te.Format() << " " << eta
              << std::endl;
  }

  Derived &AsDerived() { return static_cast<Derived &>(*this); }

 private:
  std::string server_address;
  std::string cache_path;

  int64 solved = 0;

  std::map<std::string, TaskType> task_map;
  std::map<std::string, std::optional<ResultType>> cache;

  std::queue<std::string> unsolved;
  int64 total = 0;
  TimeRecorder tr;

  std::queue<std::pair<TimeDelta, int64>> history_progress;
};

template <typename Derived, typename TaskType, typename ResultType>
class DpeClient {
 public:
  DpeClient(std::string_view target)
      : target(target),
        buffer_length((1 << 20) * 100),
        get_task_buffer(nullptr),
        send_result_buffer(nullptr) {}
  ~DpeClient() {
    if (get_task_buffer != nullptr) delete[] get_task_buffer;
    if (send_result_buffer != nullptr) delete[] send_result_buffer;
  }

  void InitWorker() {}

  void RunWorker(int thread_count, int task_count) {
    AsDerived().InitWorker();

    if (get_task_buffer == nullptr) {
      get_task_buffer = new char[buffer_length];
    }
    if (send_result_buffer == nullptr) {
      send_result_buffer = new char[buffer_length];
    }
#if ENABLE_OPENMP
#pragma omp parallel for schedule(dynamic, 1) num_threads(thread_count)
#endif
    for (int i = 0; i < thread_count; ++i) {
      for (;;) {
        std::optional<TaskType> task = GetNextTask(task_count);
        if (!task.has_value()) {
          break;
        }
        SetResult(static_cast<Derived &>(*this).Cal(*task), task_count);
      }
    }

    if (!outgoing.empty()) {
      SendResultsToServer(outgoing);
      outgoing.clear();
    }
  }

 private:
  std::optional<TaskType> GetNextTask(int task_count) {
#if ENABLE_OPENMP
    OmpGuard guard(incoming_lock);
#endif
    bool should_fetch = incoming.empty();
    if (!should_fetch) {
      should_fetch = (incoming.size() < task_count) && (rand() % 100 < 30);
    }
    if (should_fetch && !exhausted) {
      std::vector<TaskType> tasks = GetTasksFromServer(task_count);
      std::cerr << std::endl;
      std::cerr << "Received " << std::size(tasks) << " tasks" << std::endl;

      if (std::empty(tasks)) {
        exhausted = 1;
        std::cerr << "No more tasks" << std::endl;
      } else {
        std::cerr << "First task: " << tasks[0].Key() << std::endl;
        std::cerr << "Last task: " << tasks.back().Key() << std::endl;
        for (auto &task : tasks) {
          incoming.push(std::move(task));
        }
      }
    }
    if (!incoming.empty()) {
      TaskType task = incoming.front();
      incoming.pop();
      return task;
    }
    return std::nullopt;
  }

  void SetResult(ResultType result, int task_count) {
#if ENABLE_OPENMP
    OmpGuard guard(outgoing_lock);
#endif
    outgoing.push_back(result);
    if (outgoing.size() >= task_count) {
      SendResultsToServer(outgoing);
      outgoing.clear();
    }
  }

  std::vector<TaskType> GetTasksFromServer(int64 task_count) {
    void *context = zmq_ctx_new();
    void *requester = zmq_socket(context, ZMQ_REQ);
    zmq_connect(requester, std::data(target));

    DpeCommand raw_command;
    raw_command.name = "GetTasks";
    raw_command.args.push_back({task_count});
    std::string cmd = raw_command.ToString();

    zmq_send(requester, std::data(cmd), std::size(cmd), 0);
    int cnt = zmq_recv(requester, get_task_buffer, buffer_length, 0);
    zmq_close(requester);
    zmq_ctx_destroy(context);
    get_task_buffer[cnt] = 0;

    std::optional<DpeCommand> result =
        internal::ParseDpeCommand(std::string_view(get_task_buffer, cnt));
    if (!result.has_value() || result->name != "Tasks") {
      std::cerr << "Cannot parse tasks" << std::endl;
      exit(-1);
    }

    return internal::ParseObjects<TaskType>(*result);
  }

  int64 SendResultsToServer(const std::vector<ResultType> &answers) {
    void *context = zmq_ctx_new();
    void *requester = zmq_socket(context, ZMQ_REQ);
    zmq_connect(requester, std::data(target));

    DpeCommand command;
    command.name = "SetResults";
    internal::AppendObjects(answers, command);

    std::string cmd = command.ToString();
    zmq_send(requester, std::data(cmd), std::size(cmd), 0);
    zmq_recv(requester, send_result_buffer, buffer_length, 0);
    zmq_close(requester);
    zmq_ctx_destroy(context);

    return 0;
  }

  Derived &AsDerived() { return static_cast<Derived &>(*this); }

 private:
  std::string target;
  const int64 buffer_length;
  char *get_task_buffer;
  char *send_result_buffer;

#if ENABLE_OPENMP
  OmpLock incoming_lock;
#endif
  std::queue<TaskType> incoming;

#if ENABLE_OPENMP
  OmpLock outgoing_lock;
#endif
  std::vector<ResultType> outgoing;

  int64 exhausted = 0;
};

template <typename Derived, typename TaskType, typename ResultType = TaskType>
class DpeSolver : public DpeServer<Derived, TaskType, ResultType>,
                  public DpeClient<Derived, TaskType, ResultType> {
 public:
  DpeSolver(std::string_view server_address, std::string_view cache_path = "")
      : DpeServer<Derived, TaskType, ResultType>(server_address, cache_path),
        DpeClient<Derived, TaskType, ResultType>(server_address) {}
};
#endif
}  // namespace pe
#endif