#ifndef PE_IO_
#define PE_IO_

#include "pe_base"
#include "pe_int128"
#include "pe_type_traits"

namespace pe {
template <typename T>
SL T ReadInt() {
  struct X {
    int dig[256];
    X() {
      for (int i = '0'; i <= '9'; ++i) dig[i] = 1;
      dig['-'] = 1;
    }
  };
  static X f;
  T v = 0;
  int s = 1, c;
  for (; !f.dig[c = getchar()];) {
    ;
  }
  if (c == '-') {
    s = 0;
  } else if (f.dig[c]) {
    v = c ^ 48;
  }
  for (; f.dig[c = getchar()]; v = v * 10 + (c ^ 48)) {
    ;
  }
  return s ? v : -v;
}

#define Rint read_int<int>

template <typename T>
SL T ReadValue() {
  T v;
  std::cin >> v;
  return v;
}

template <>
inline int ReadValue<int>() {
  return ReadInt<int>();
}

template <>
inline int64 ReadValue<int64>() {
  return ReadInt<int64>();
}

#if PE_HAS_INT128
template <>
inline int128 ReadValue<int128>() {
  return ReadInt<int128>();
}
#endif

#define DV_IMPL_1(I, V1) V1 = I
#define DV_IMPL_2(I, V1, ...) V1 = I, DV_IMPL_1(I, __VA_ARGS__)
#define DV_IMPL_3(I, V1, ...) V1 = I, DV_IMPL_2(I, __VA_ARGS__)
#define DV_IMPL_4(I, V1, ...) V1 = I, DV_IMPL_3(I, __VA_ARGS__)
#define DV_IMPL_5(I, V1, ...) V1 = I, DV_IMPL_4(I, __VA_ARGS__)
#define DV_IMPL_6(I, V1, ...) V1 = I, DV_IMPL_5(I, __VA_ARGS__)
#define DV_IMPL_7(I, V1, ...) V1 = I, DV_IMPL_6(I, __VA_ARGS__)
#define DV_IMPL_8(I, V1, ...) V1 = I, DV_IMPL_7(I, __VA_ARGS__)
#define DV_IMPL_9(I, V1, ...) V1 = I, DV_IMPL_8(I, __VA_ARGS__)
#define DV_IMPL_10(I, V1, ...) V1 = I, DV_IMPL_9(I, __VA_ARGS__)
#define DV_IMPL_11(I, V1, ...) V1 = I, DV_IMPL_10(I, __VA_ARGS__)
#define DV_IMPL_12(I, V1, ...) V1 = I, DV_IMPL_11(I, __VA_ARGS__)
#define DV_IMPL_13(I, V1, ...) V1 = I, DV_IMPL_12(I, __VA_ARGS__)
#define DV_IMPL_14(I, V1, ...) V1 = I, DV_IMPL_13(I, __VA_ARGS__)
#define DV_IMPL_15(I, V1, ...) V1 = I, DV_IMPL_14(I, __VA_ARGS__)
#define DV_IMPL_16(I, V1, ...) V1 = I, DV_IMPL_15(I, __VA_ARGS__)

#define DV_IMPL(n, input, ...) PE_CONCAT(DV_IMPL_, n)(input, __VA_ARGS__)

#define DV(T, ...) \
  T DV_IMPL(PE_NARG(__VA_ARGS__), pe::ReadValue<T>(), __VA_ARGS__)
#define DVC(T, ...) \
  const T DV_IMPL(PE_NARG(__VA_ARGS__), pe::ReadValue<T>(), __VA_ARGS__)
}  // namespace pe

namespace pe {

#if OS_TYPE_WIN
SL bool CopyStringToClipboard(const std::string& s) {
  OpenClipboard(nullptr);
  EmptyClipboard();
  HGLOBAL hg = GlobalAlloc(GMEM_MOVEABLE, s.size() + 1);
  if (!hg) {
    CloseClipboard();
    return false;
  }
  memcpy(GlobalLock(hg), s.c_str(), s.size());
  GlobalUnlock(hg);
  SetClipboardData(CF_TEXT, hg);
  CloseClipboard();
  GlobalFree(hg);
  return true;
}

SL int PromptYesAndNo(const std::string& title, const std::string& content) {
  return MessageBoxA(nullptr, content.c_str(), title.c_str(), MB_OKCANCEL) == 1;
}

SL void PromptAnswer(const std::string& str) {
  std::cout << "Answer:" << std::endl << str << std::endl;
  if (PromptYesAndNo("Copy to clipboard?", str)) {
    CopyStringToClipboard(str);
  }
}

#else
SL void PromptAnswer(const std::string& str) {
  std::cout << "Answer:" << std::endl << str << std::endl;
}
#endif

template <typename T>
SL REQUIRES((is_general_integer<T>::value)) RETURN(void)
    PromptAnswer(const T& v) {
  PromptAnswer(ToString(v));
}

template <typename... T>
SL void PromptAnswer(const std::string& format, T... v) {
  char buff[1024];
  sprintf(buff, format.c_str(), v...);
  PromptAnswer(buff);
}

struct AnswerPrompter {
  template <typename... T>
  AnswerPrompter& operator()(const std::string& format, T... v) {
    char buff[1024];
    sprintf(buff, format.c_str(), v...);
    PromptAnswer(buff);
    return *this;
  }
};

template <typename T>
SL REQUIRES((is_general_integer<T>::value)) RETURN(AnswerPrompter&) operator<<(
    AnswerPrompter& ap, T v) {
  PromptAnswer(ToString(v));
  return ap;
}

template <typename T>
SL REQUIRES((!is_general_integer<T>::value)) RETURN(AnswerPrompter&) operator<<(
    AnswerPrompter& ap, T v) {
  std::stringstream ss;
  ss << v;
  PromptAnswer(v);
  return ap;
}

static AnswerPrompter ap;
}  // namespace pe
#endif
