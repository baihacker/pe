#ifndef PE_TYPE_TRAITS_
#define PE_TYPE_TRAITS_

#include "pe_base"
#include "pe_int128"

#if PE_CPP_VERSION <= 201703L
namespace std {
template <typename T>
struct remove_cvref {
  using T1 = typename remove_cv<T>::type;
  using type = typename remove_reference<T1>::type;
};
}  // namespace std
#endif

namespace pe {
template <int v>
struct IntToType {
  enum { value = v };
};

// A simple concept implementation, e.g.
// template<typename T, typename U>
// REQUIRES((is_builtin_integer_v<T> && pe_is_unsigned<U>::value))
// RETURN(void)  foo(T x, U y)  {}
template <int ok>
struct CheckConditionThen {};

template <>
struct CheckConditionThen<true> {
  template <typename U>
  struct IdenticalType {
    using type = U;
  };
  template <typename U>
  struct IdenticalTypeT {
    using type = typename U::type;
  };
};

#define REQUIRES(...) typename pe::CheckConditionThen<__VA_ARGS__>::
#define RETURN(...) template IdenticalType<__VA_ARGS__>::type

// If the return type depends on the condition and the return type
// is invalid if the condition is false, please use this one.
#define RETURN_T(...) template IdenticalTypeT<__VA_ARGS__>::type

// pe type traits

// Forward declaration of integers.
template <typename ET, bool is_builtin>
struct ExtendedUnsignedIntImpl;

template <typename ET, bool is_builtin>
struct ExtendedSignedIntImpl;

class BigInteger;

#if ENABLE_GMP
class MpInteger;
#endif

// is_builtin_integer
template <typename T>
struct is_builtin_integer {
  enum { value = std::is_integral_v<T> };
};

template <typename T>
struct is_builtin_integer<T&> {
  enum { value = is_builtin_integer<T>::value };
};

#if PE_HAS_INT128
template <>
struct is_builtin_integer<int128> {
  enum { value = true };
};
template <>
struct is_builtin_integer<uint128> {
  enum { value = true };
};
#endif

template <typename T>
inline constexpr bool is_builtin_integer_v = is_builtin_integer<T>::value;

// is_extended_integer
template <typename T>
struct is_extended_integer {
  enum { value = false };
};

template <typename UT, bool is_builtin>
struct is_extended_integer<ExtendedUnsignedIntImpl<UT, is_builtin>> {
  enum { value = true };
};

template <typename ET, bool is_builtin>
struct is_extended_integer<ExtendedSignedIntImpl<ET, is_builtin>> {
  enum { value = true };
};

template <typename UT, bool is_builtin>
struct is_extended_integer<ExtendedUnsignedIntImpl<UT, is_builtin>&> {
  enum { value = true };
};

template <typename ET, bool is_builtin>
struct is_extended_integer<ExtendedSignedIntImpl<ET, is_builtin>&> {
  enum { value = true };
};

template <typename UT, bool is_builtin>
struct is_extended_integer<const ExtendedUnsignedIntImpl<UT, is_builtin>&> {
  enum { value = true };
};

template <typename ET, bool is_builtin>
struct is_extended_integer<const ExtendedSignedIntImpl<ET, is_builtin>&> {
  enum { value = true };
};

template <typename T>
inline constexpr bool is_extended_integer_v = is_extended_integer<T>::value;

// is_builtin_or_extended_integer
template <typename T>
struct is_builtin_or_extended_integer {
  enum { value = is_builtin_integer_v<T> || is_extended_integer_v<T> };
};

template <typename T>
inline constexpr bool is_builtin_or_extended_integer_v =
    is_builtin_or_extended_integer<T>::value;

// is_gbi
template <typename T>
struct is_gbi {
  enum { value = false };
};

template <>
struct is_gbi<BigInteger> {
  enum { value = true };
};

template <>
struct is_gbi<BigInteger&> {
  enum { value = true };
};

template <>
struct is_gbi<const BigInteger&> {
  enum { value = true };
};

#if ENABLE_GMP
template <>
struct is_gbi<MpInteger> {
  enum { value = true };
};

template <>
struct is_gbi<MpInteger&> {
  enum { value = true };
};

template <>
struct is_gbi<const MpInteger&> {
  enum { value = true };
};
#endif

#if defined(__GMP_PLUSPLUS__)
template <>
struct is_gbi<mpz_class> {
  enum { value = true };
};

template <>
struct is_gbi<mpz_class&> {
  enum { value = true };
};

template <>
struct is_gbi<const mpz_class&> {
  enum { value = true };
};
#endif

template <typename T>
inline constexpr bool is_gbi_v = is_gbi<T>::value;

// is_general_integer
template <typename T>
struct is_general_integer {
  enum {
    value = is_builtin_integer_v<T> || is_extended_integer_v<T> || is_gbi_v<T>
  };
};

template <typename T>
struct is_general_integer<T&> {
  enum { value = is_general_integer<T>::value };
};

template <typename T>
inline constexpr bool is_general_integer_v = is_general_integer<T>::value;

// pe_is_signed
template <typename T>
struct pe_is_signed {
  enum { value = std::is_signed<T>::value };
};

#if PE_HAS_INT128
template <>
struct pe_is_signed<int128> {
  enum { value = true };
};

template <>
struct pe_is_signed<uint128> {
  enum { value = false };
};
#endif

template <typename UT, bool is_builtin>
struct pe_is_signed<ExtendedUnsignedIntImpl<UT, is_builtin>> {
  enum { value = false };
};

template <typename ET, bool is_builtin>
struct pe_is_signed<ExtendedSignedIntImpl<ET, is_builtin>> {
  enum { value = true };
};

template <typename T>
inline constexpr bool pe_is_signed_v = pe_is_signed<T>::value;

// pe_is_unsigned
template <typename T>
struct pe_is_unsigned {
  enum { value = std::is_unsigned<T>::value };
};

#if PE_HAS_INT128
template <>
struct pe_is_unsigned<int128> {
  enum { value = false };
};

template <>
struct pe_is_unsigned<uint128> {
  enum { value = true };
};
#endif

template <typename UT, bool is_builtin>
struct pe_is_unsigned<ExtendedUnsignedIntImpl<UT, is_builtin>> {
  enum { value = true };
};

template <typename ET, bool is_builtin>
struct pe_is_unsigned<ExtendedSignedIntImpl<ET, is_builtin>> {
  enum { value = false };
};

template <typename T>
inline constexpr bool pe_is_unsigned_v = pe_is_unsigned<T>::value;

// pe_make_signed
template <typename T>
struct pe_make_signed {
  using type = typename std::make_signed<T>::type;
};

#if PE_HAS_INT128
template <>
struct pe_make_signed<int128> {
  using type = int128;
};

template <>
struct pe_make_signed<uint128> {
  using type = int128;
};
#endif

template <typename ET, bool is_builtin>
struct pe_make_signed<ExtendedUnsignedIntImpl<ET, is_builtin>> {
  using type = typename ExtendedUnsignedIntImpl<ET, is_builtin>::SignedT;
};

template <typename ET, bool is_builtin>
struct pe_make_signed<ExtendedSignedIntImpl<ET, is_builtin>> {
  using type = typename ExtendedSignedIntImpl<ET, is_builtin>::SignedT;
};

// pe_make_unsigned
template <typename T>
struct pe_make_unsigned {
  using type = typename std::make_unsigned<T>::type;
};

#if PE_HAS_INT128
template <>
struct pe_make_unsigned<int128> {
  using type = uint128;
};

template <>
struct pe_make_unsigned<uint128> {
  using type = uint128;
};
#endif

template <typename ET, bool is_builtin>
struct pe_make_unsigned<ExtendedUnsignedIntImpl<ET, is_builtin>> {
  using type = typename ExtendedUnsignedIntImpl<ET, is_builtin>::UnsignedT;
};

template <typename ET, bool is_builtin>
struct pe_make_unsigned<ExtendedSignedIntImpl<ET, is_builtin>> {
  using type = typename ExtendedSignedIntImpl<ET, is_builtin>::UnsignedT;
};

// make_const_arg_type
template <typename T, int is_arithmetic_type>
struct make_const_arg_type_impl {
  using type = const T;
};

template <typename T>
struct make_const_arg_type_impl<T, 0> {
  using type = const T&;
};

template <typename T>
struct make_const_arg_type {
  using no_cvref_type = typename std::remove_cvref<T>::type;
  using type = typename make_const_arg_type_impl<
      no_cvref_type,
      static_cast<int>(std::is_arithmetic<no_cvref_type>::value)>::type;
};

// predicate_all
template <template <typename T> class predicate, typename TH, typename... TT>
struct predicate_all {
  enum {
    value = predicate<TH>::value && predicate_all<predicate, TT...>::value
  };
};

template <template <typename T> class predicate, typename TH>
struct predicate_all<predicate, TH> {
  enum { value = predicate<TH>::value };
};

// Integer type promotion
template <typename T1, typename T2, bool ge, bool same>
struct BiggerIntegralImpl {
  using type = T1;
};

template <typename T1, typename T2>
struct BiggerIntegralImpl<T1, T2, false, false> {
  using type = T2;
};

template <typename T1, typename T2>
struct BiggerIntegralImpl<T1, T2, true, true> {
  using type = typename pe_make_unsigned<T1>::type;
};

template <typename T1, typename T2, bool is_t1_gbi, bool is_t2_gbi>
struct BiggerIntegralHandleGbi;

template <typename T1, typename T2, bool is_t2_gbi>
struct BiggerIntegralHandleGbi<T1, T2, true, is_t2_gbi> {
  using type = T1;
};

template <typename T1, typename T2>
struct BiggerIntegralHandleGbi<T1, T2, false, true> {
  using type = T2;
};

template <typename T1, typename T2>
struct BiggerIntegralHandleGbi<T1, T2, false, false> {
  using U1 = typename pe_make_unsigned<T1>::type;
  using U2 = typename pe_make_unsigned<T2>::type;
  using type = typename BiggerIntegralImpl<T1, T2, (sizeof(T1) >= sizeof(T2)),
                                           std::is_same<U1, U2>::value>::type;
};

template <typename T1, typename T2>
struct BiggerIntegral {
  using type = typename BiggerIntegralHandleGbi<T1, T2, is_gbi_v<T1>,
                                                is_gbi<T2>::value>::type;
};

template <typename T>
struct BiggerIntegral<T, T> {
  using type = T;
};

template <typename TH, typename... TT>
struct BiggerIntegralN {
  using A = typename BiggerIntegralN<TT...>::type;
  using type = typename BiggerIntegral<TH, A>::type;
};

template <typename T>
struct BiggerIntegralN<T> {
  using type = T;
};

template <typename T>
struct AtLeastUint64 {
  using type = typename BiggerIntegral<T, uint64>::type;
};

template <typename T>
struct AtLeastInt64 {
  using type = typename BiggerIntegral<T, int64>::type;
};

#define IntPromotion(...) typename pe::BiggerIntegralN<__VA_ARGS__>::type
#define IntPromotionT(...) pe::BiggerIntegralN<__VA_ARGS__>
}  // namespace pe
#endif
