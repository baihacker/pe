#ifndef PE_TYPE_TRAITS_
#define PE_TYPE_TRAITS_

#include "pe_base"

template <int v>
struct IntToType {
  enum { value = v };
};

// A simple concept implementation, e.g.
/**
  template<typename T, typename U>
  REQUIRES((is_integral<T>::value && is_unsigned<U>::value))
  RETURN(void)  foo(T x, U y)  {}
*/
template <int ok>
struct CheckConditionThen {};

template <>
struct CheckConditionThen<true> {
  template <typename U>
  struct IdenticalType {
    using type = U;
  };
  template <typename U>
  struct IdenticalTypeT {
    using type = typename U::type;
  };
};

#define REQUIRES(...) typename CheckConditionThen<__VA_ARGS__>::
#define RETURN(...) template IdenticalType<__VA_ARGS__>::type

// If the return type depends on the condition and the return type
// is invalid if the condition is false, please use this one.
#define RETURN_T(...) template IdenticalTypeT<__VA_ARGS__>::type

#if PE_CPP_VERSION <= 201703L
namespace std {
// TODO(baihacker): add this template only if it is older than c++20
template <typename T>
struct remove_cvref {
  using T1 = typename remove_cv<T>::type;
  using type = typename remove_reference<T1>::type;
};
}  // namespace std
#endif

class BigInteger;

template <typename T>
struct is_native_integer {
  enum { value = is_integral<T>::value };
};

template <typename T>
struct is_native_integer<T&> {
  enum { value = is_native_integer<T>::value };
};

template <typename T>
struct is_general_integer {
  enum { value = is_integral<T>::value };
};

template <typename T>
struct is_general_integer<T&> {
  enum { value = is_general_integer<T>::value };
};

template <>
struct is_native_integer<BigInteger> {
  enum { value = false };
};

template <>
struct is_native_integer<BigInteger&> {
  enum { value = false };
};

template <>
struct is_native_integer<const BigInteger&> {
  enum { value = false };
};

template <>
struct is_general_integer<BigInteger> {
  enum { value = true };
};

#if defined(__GMP_PLUSPLUS__)
template <>
struct is_native_integer<mpz_class> {
  enum { value = false };
};

template <>
struct is_native_integer<mpz_class&> {
  enum { value = false };
};

template <>
struct is_native_integer<const mpz_class&> {
  enum { value = false };
};

template <>
struct is_general_integer<mpz_class> {
  enum { value = true };
};
#endif

template <typename T>
struct is_gbi {
  enum { value = false };
};

template <>
struct is_gbi<BigInteger> {
  enum { value = true };
};

template <>
struct is_gbi<BigInteger&> {
  enum { value = true };
};

template <>
struct is_gbi<const BigInteger&> {
  enum { value = true };
};

#if ENABLE_GMP
class MpInteger;

template <>
struct is_gbi<MpInteger> {
  enum { value = true };
};

template <>
struct is_gbi<MpInteger&> {
  enum { value = true };
};

template <>
struct is_gbi<const MpInteger&> {
  enum { value = true };
};
#endif

#if defined(__GMP_PLUSPLUS__)
template <>
struct is_gbi<mpz_class> {
  enum { value = true };
};

template <>
struct is_gbi<mpz_class&> {
  enum { value = true };
};

template <>
struct is_gbi<const mpz_class&> {
  enum { value = true };
};
#endif

template <typename T, int is_arithmetic_type>
struct make_const_arg_type_impl {
  using type = const T;
};

template <typename T>
struct make_const_arg_type_impl<T, 0> {
  using type = const T&;
};

template <typename T>
struct make_const_arg_type {
  using no_cvref_type = typename std::remove_cvref<T>::type;
  using type = typename make_const_arg_type_impl<
      no_cvref_type,
      static_cast<int>(is_arithmetic<no_cvref_type>::value)>::type;
};

// Integer type promotion
template <typename T1, typename T2, bool ge, bool same>
struct BiggerIntegralImpl {
  using type = T1;
};

template <typename T1, typename T2>
struct BiggerIntegralImpl<T1, T2, false, false> {
  using type = T2;
};

template <typename T1, typename T2>
struct BiggerIntegralImpl<T1, T2, true, true> {
  using type = typename std::make_unsigned<T1>::type;
};

template <typename T1, typename T2>
struct BiggerIntegral {
  using U1 = typename std::make_unsigned<T1>::type;
  using U2 = typename std::make_unsigned<T2>::type;
  using type = typename BiggerIntegralImpl<T1, T2, (sizeof(T1) >= sizeof(T2)),
                                           std::is_same<U1, U2>::value>::type;
};

template <typename T>
struct BiggerIntegral<T, T> {
  using type = T;
};

template <typename TH, typename... TT>
struct BiggerIntegralN : private BiggerIntegralN<TT...> {
  using A = typename BiggerIntegralN<TT...>::type;
  using type = typename BiggerIntegral<TH, A>::type;
};

template <typename T>
struct BiggerIntegralN<T> {
  using type = T;
};

template <typename T>
struct AtLeastUint64 {
  using type = typename BiggerIntegral<T, uint64>::type;
};

template <typename T>
struct AtLeastInt64 {
  using type = typename BiggerIntegral<T, int64>::type;
};

#define IntPromotion(...) typename BiggerIntegralN<__VA_ARGS__>::type
#define IntPromotionT(...) BiggerIntegralN<__VA_ARGS__>

#endif
