#ifndef PE_GBI_
#define PE_GBI_

// General Big integer.

#include "pe_base"
#include "pe_type_traits"
#include "pe_int"
#include "pe_nt"
#include "pe_fraction"

namespace pe {

template <typename T>
SL REQUIRES((is_gbi_v<T>)) RETURN(int) BitWidth(const T& x) {
  return x.BitWidth();
}

template <typename T>
SL REQUIRES((is_gbi_v<T>)) RETURN(int) Popcount(const T& x) {
  return x.Popcount();
}

template <typename T>
SL REQUIRES((is_gbi_v<T>)) RETURN(void) SetBit(const T& x, int idx) {
  x.SetBit(idx);
}

template <typename T>
SL REQUIRES((is_gbi_v<T>)) RETURN(void) ResetBit(const T& x, int idx) {
  x.ResetBit(idx);
}

template <typename T>
SL REQUIRES((is_gbi_v<T>)) RETURN(int) GetBit(const T& x, int idx) {
  return x.GetBit(idx);
}

template <typename T>
SL REQUIRES((is_gbi_v<T>)) RETURN(void) RevBit(const T& x, int idx) {
  x.RevBit(idx);
}

template <typename T>
SL REQUIRES((is_gbi_v<T>)) RETURN(int) IsZero(const T& x) {
  return x.IsZero();
}

template <typename T>
SL REQUIRES((is_gbi_v<T>)) RETURN(int) IntSign(const T& x) {
  return x.IntSign();
}

template <typename T>
SL REQUIRES((is_gbi_v<T>)) RETURN(int) IsEven(const T& x) {
  return x.IsEven();
}

template <typename T>
SL REQUIRES((is_gbi_v<T>)) RETURN(int) IsOdd(const T& x) {
  return x.IsOdd();
}

template <typename T0, typename T1>
SL REQUIRES((is_gbi_v<T0> && is_gbi_v<T1>)) RETURN(int)
    SameParity(const T0& v0, const T1& v1) {
  return IsEven(v0) == IsEven(v1);
}

template <typename T>
SL REQUIRES((is_gbi_v<T>)) RETURN(uint32) LowerBits(const T& x) {
  return x.LowerBits();
}

template <typename T>
SL REQUIRES((is_gbi_v<T>)) RETURN(T) Abs(const T& n) {
  return IntSign(n) >= 0 ? n : -n;
}

template <typename T>
SL REQUIRES((is_gbi_v<T>)) RETURN(T) FAbs(const T& n) {
  return IntSign(n) >= 0 ? n : -n;
}

template <typename T, typename TN>
SL REQUIRES((is_gbi_v<T> && is_builtin_integer_v<TN>)) RETURN(T)
    Power(T x, TN n) {
  PE_ASSERT(n >= 0);
  T ret = 1;
  for (; IntSign(n) > 0; n >>= 1) {
    if (n & 1) ret = ret * x;
    if (n > 1) x = x * x;
  }
  return ret;
}

template <typename T>
SL REQUIRES((is_gbi_v<T>)) RETURN(std::tuple<T, T>)
    Div(const T& l, const T& r) {
  return {l / r, l % r};
}

template <typename T>
SL REQUIRES((is_gbi_v<T>)) RETURN(T) FloorDiv(const T& a, const T& b) {
  const int sign_a = IntSign(a);
  const int sign_b = IntSign(b);
  if (sign_a > 0 && sign_b > 0) {
    return a / b;
  }
  if (sign_a < 0 && sign_b < 0) {
    return a / b;
  }
  T q = a / b;
  if (((sign_a < 0) != (sign_b < 0)) && !IsZero(a % b)) {
    --q;
  }
  return q;
}

template <typename T>
SL REQUIRES((is_gbi_v<T>)) RETURN(T) CeilDiv(const T& a, const T& b) {
  const int sign_a = IntSign(a);
  const int sign_b = IntSign(b);
  if (sign_a > 0 && sign_b > 0) {
    return 1 + (a - 1) / b;
  }
  if (sign_a < 0 && sign_b < 0) {
    return 1 + (a + 1) / b;
  }
  T q = a / b;
  if (((sign_a < 0) == (sign_b < 0)) && !IsZero(a % b)) {
    ++q;
  }
  return q;
}

template <typename T, typename TM>
SL REQUIRES((is_gbi_v<T>)) RETURN(int_promotion_t<T, TM>)
    Mod(const T& a, TM mod) {
  if (IntSign(a) >= 0) {
    return a >= mod ? a % mod : a;
  } else {
    auto tmp = a % mod;
    if (tmp < 0) tmp += mod;
    return tmp;
  }
}

template <typename T, typename TM>
SL REQUIRES((is_gbi_v<T>)) RETURN(T) AddMod(T a, const T& b, TM mod) {
  a += b;
  if (a >= mod) {
    a -= mod;
  }
  return a;
}

template <typename T, typename TM>
SL REQUIRES((is_gbi_v<T>)) RETURN(T) SubMod(T a, const T& b, TM mod) {
  a -= b;
  if (IntSign(a) < 0) {
    a += mod;
  }
  return a;
}

template <typename T, typename TM>
SL REQUIRES((is_gbi_v<T>)) RETURN(T) MulMod(const T& a, const T& b, TM mod) {
  return a * b % mod;
}

template <typename T, typename TN>
SL REQUIRES((is_gbi_v<T> && is_builtin_integer_v<TN>)) RETURN(T)
    PowerMod(const T& l, TN n, const T& mod) {
  PE_ASSERT(n >= 0);
  if (mod == 1) {
    return 0;
  }
  T ret = 1;
  T x = l % mod;
  for (; n > 0; n >>= 1) {
    if (n & 1) ret = ret * x % mod;
    if (n > 1) x = x * x % mod;
  }
  return ret;
}

template <typename T, typename TN, typename TM>
SL REQUIRES((is_gbi_v<T> && is_builtin_integer_v<TN> &&
             is_builtin_integer_v<TM>)) RETURN(T)
    PowerMod(const T& l, TN n, TM mod) {
  PE_ASSERT(n >= 0);
  if (mod == 1) {
    return 0;
  }
  T ret = 1;
  T x = l % mod;
  for (; n > 0; n >>= 1) {
    if (n & 1) ret = ret * x % mod;
    if (n > 1) x = x * x % mod;
  }
  return ret;
}

template <typename T>
SL REQUIRES((is_gbi_v<T>)) RETURN(T)
    PowerMod(const T& l, const T& m, const T& mod) {
  PE_ASSERT(IntSign(m) >= 0);
  if (mod == 1) {
    return 0;
  }
  T ret = 1;
  T x = l % mod;
  T n = m;
  for (; !IsZero(n);) {
    if (IsOdd(n)) ret = ret * x % mod;
    n >>= 1;
    if (!IsZero(n)) x = x * x % mod;
  }
  return ret;
}

template <typename TT, typename T>
SL REQUIRES((is_gbi_v<T>)) RETURN(TT) ToInt(const T& x) {
  return x.template ToInt<TT>();
}

template <typename TT, typename T>
SL REQUIRES((is_gbi_v<T>)) RETURN(TT) ToFloat(const T& x) {
  return x.template ToFloat<TT>();
}

template <typename T>
SL REQUIRES((is_gbi_v<T>)) RETURN(std::string) ToString(const T& x) {
  return x.ToString();
}

template <typename T>
SL REQUIRES((is_gbi_v<T>)) RETURN(std::string) to_string(const T& x) {
  return x.ToString();
}

#if PE_HAS_CPP20
template <class T>
concept PeGbi = requires(T v) {
  requires static_cast<bool>(is_gbi_v<T>);
  requires PeArithmeticOperation<T>;
  requires PeSelfOperation<T>;
  requires PeComparable<T>;
  requires PeIntegerUtil<T>;
};
#endif
}  // namespace pe
#endif
