#ifndef PE_GBI_
#define PE_GBI_

// General big integer.

#include "pe_type_traits"
#include "pe_nt"

template <typename GBI>
struct Gbi;

template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(int) IsZero(const GBI& x);

template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(int) IntSign(const GBI& x);

template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(int) IsEven(const GBI& x);

template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(int) IsOdd(const GBI& x);

template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(unsigned int) LowerBits(const GBI& x);

template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(tuple<GBI, GBI>)
    Div(const GBI& l, const GBI& r);

template <typename T, typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(T) ToInt(const GBI& x);

template <typename T, typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(T) ToFloat(const GBI& x);

#if PE_HAS_CPP20
template <class T>
concept PeGbiArithmeticOperation = requires(T v) {
  v + 1;
  v - 1;
  v * 1;
  v / 1;
  v % 1;
  1 - v;
  1 * v;
  1 + v;
  1 / v;
  1 % v;
  v + 1LL;
  v - 1LL;
  v * 1LL;
  v / 1LL;
  v % 1LL;
  1LL + v;
  1LL - v;
  1LL * v;
  1LL / v;
  1LL % v;
#if PE_HAS_INT128
  v + (int128)1;
  v - (int128)1;
  v*(int128)1;
  v / (int128)1;
  v % (int128)1;
  (int128)1 + v;
  (int128)1 - v;
  (int128)1 * v;
  (int128)1 / v;
  (int128)1 % v;
#endif
  v + v;
  v - v;
  v* v;
  v / v;
  v % v;
};
template <class T>
concept PeGbiSelfOperation = requires(T v) {
  v += 1;
  v -= 1;
  v *= 1;
  v /= 1;
  v %= 1;
  v += 1LL;
  v -= 1LL;
  v *= 1LL;
  v /= 1LL;
  v %= 1LL;
#if PE_HAS_INT128
  v += (int128)1;
  v -= (int128)1;
  v *= (int128)1;
  v /= (int128)1;
  v %= (int128)1;
#endif
  v += v;
  v -= v;
  v *= v;
  v /= v;
  v %= v;
  ++v;
  --v;
  v++;
  v--;
};
template <class T>
concept PeGbi = requires(T v) {
  IsZero(v);
  IntSign(v);
  IsEven(v);
  IsOdd(v);
  LowerBits(v);
  Div(v, v);
  ToInt<int>(v);
  ToInt<unsigned int>(v);
  ToInt<long long>(v);
  ToInt<unsigned long long>(v);
  ToFloat<float>(v);
  ToFloat<double>(v);
  requires static_cast<bool>(is_gbi<T>::value);
  requires PeGbiArithmeticOperation<T>;
  requires PeGbiSelfOperation<T>;
};
#endif

template <typename T0, typename T1>
SL REQUIRES((is_gbi<T0>::value && is_gbi<T1>::value)) RETURN(int)
    SameParity(const T0& v0, const T1& v1) {
  return IsEven(v0) == IsEven(v1);
}

template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(GBI) FAbs(const GBI& n) {
  return IntSign(n) >= 0 ? n : -n;
}

template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(GBI) Abs(const GBI& n) {
  return IntSign(n) >= 0 ? n : -n;
}

template <typename GBI, typename T>
SL REQUIRES((is_gbi<GBI>::value && is_native_integer<T>::value)) RETURN(GBI)
    Power(const GBI& l, T n) {
  GBI ret(1);
  GBI x(l);
  for (; n > 0; n >>= 1) {
    if (n & 1) ret = ret * x;
    if (n > 1) x = x * x;
  }
  return ret;
}

template <typename GBI, typename T>
SL REQUIRES((is_gbi<GBI>::value && is_native_integer<T>::value)) RETURN(GBI)
    PowerMod(const GBI& l, T n, const GBI& mod) {
  if (mod == 1) {
    return 0;
  }
  GBI ret(1);
  GBI x(l % mod);
  for (; n > 0; n >>= 1) {
    if (n & 1) ret = ret * x % mod;
    if (n > 1) x = x * x % mod;
  }
  return ret;
}

template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(GBI)
    PowerMod(const GBI& l, const GBI& m, const GBI& mod) {
  if (mod == 1) {
    return 0;
  }
  GBI ret(1);
  GBI x(l % mod);
  GBI n(m);
  for (; !IsZero(n);) {
    if (IsOdd(n)) ret = ret * x % mod;
    n >>= 1;
    if (!IsZero(n)) x = x * x % mod;
  }
  return ret;
}

// Gcd is only for BigInteger
template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value && std::is_same<GBI, BigInteger>::value))
    RETURN(GBI) Gcd(GBI m, GBI n) {
  while (!IsZero(n)) {
    GBI t = m % n;
    m = std::move(n);
    n = std::move(t);
  }
  return m;
}

template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(GBI)
    ExGcd(const GBI& a, const GBI& b, GBI& x, GBI& y) {
  if (IsZero(b)) {
    x = 1;
    y = 0;
    return a;
  }

  GBI x1 = 0, y1 = 0;
  GBI ret = ExGcd(b, GBI(a % b), x1, y1);
  // b * x1 + (a%b) * y1 = ret
  // b * x1 + (a - a / b * b) * y1 = ret
  // b * x1 + a * y1 - a / b * b * y1 = ret
  // y1 * a + (x1 - a / b * y1) b = ret
  y = x1 - a / b * y1;
  x = std::move(y1);
  return ret;
}

template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(tuple<GBI, GBI, GBI>)
    ExGcd(const GBI& a, const GBI& b) {
  PE_ASSERT(!IsZero(a) || !IsZero(b));
  GBI x = 0, y = 0;
  const GBI r = ExGcd(a, b, x, y);
  PE_ASSERT(a * x + b * y == r);
  return tuple<GBI, GBI, GBI>{r, x, y};
}

template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(GBI)
    ModInv(const GBI& a, const GBI& mod) {
  GBI x, y;
  ExGcd(a, mod, x, y);
  x %= mod;
  if (IntSign(x) < 0) {
    x += mod;
  }
  return x;
}

// solve equation a x = b (mod m)
// return 0 and set u = -1 and v = 0 if failed
// return 1, x = v (mod u)
template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(int)
    SolveLinearEquation(GBI a, GBI b, const GBI& m, GBI& v, GBI& u) {
  v = 0;
  u = 0;

  PE_ASSERT(!IsZero(m));

  a %= m;
  b %= m;

  if (a < 0) a += m;
  if (b < 0) b += m;

  GBI xx = 0, yy = 0, d = ExGcd(a, m, xx, yy);

  if (!(b % d).isZero()) return 0;

  xx = (xx % m + m) % m;
  xx = xx * (b / d) % m;

  u = m / d;
  v = xx % u;

  return 1;
}

// solve equation x = a (mod m1) x = b (mod m2)
// return 0 and set u = 0 and t = 0 if failed
// return 1, x = v (mod u)
template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(int)
    Crt2(GBI a, const GBI& m1, GBI b, const GBI& m2, GBI& v, GBI& u) {
  v = 0;
  u = 0;

  PE_ASSERT(!IsZero(m1) && !IsZero(m2));
  // x = a (mod m1)
  // x = b (mod m2)
  // x = k0 m1 + a
  // k0 m1 + a = b (mod m2)
  // k0 m1 = b - a (mod m2)
  a %= m1;
  b %= m2;
  if (a < 0) a = -a;
  if (b < 0) b = -b;

  GBI s = 0, t = 0;
  if (!SolveLinearEquation(m1, b - a, m2, t, s)) return 0;
  // k0 = k1 * s + t
  // x = (k1 * s + t) * m1 + a
  // x = k1 * s * m1 + (a + t * m1)

  u = s * m1;
  v = ((a + t * m1) % u + u) % u;
  return 1;
}

template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(tuple<int, GBI, GBI>)
    Crt2(const GBI& a, const GBI& m1, const GBI& b, const GBI& m2) {
  GBI v = 0, u = 0;
  int r = Crt2(a, m1, b, m2, v, u);
  return tuple<int, GBI, GBI>{r, v, u};
}

template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(tuple<int, GBI, GBI>)
    CrtN(const GBI* val, const GBI* mod, int n) {
  GBI v = 0, u = 1;
  int have = 1;
  for (int i = 0; i < n; ++i) {
    tie(have, v, u) = Crt2(v, u, val[i], mod[i]);
    if (!have) {
      return tuple<int, GBI, GBI>{0, 0, 0};
    }
  }
  return tuple<int, GBI, GBI>{have, v, u};
}

template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(tuple<int, GBI, GBI>)
    CrtN(const vector<GBI>& val, const vector<GBI>& mod) {
  return CrtN<GBI>(&val[0], &mod[0], val.size());
}

template <typename GBI>
struct GbiFraction {
  GbiFraction(const GBI& u = 0, const GBI& v = 1) : a(u), b(v) {
    GBI d = Gcd(Abs(a), Abs(b));
    if (d > 1) a /= d, b /= d;
    if (b < 0) b = -b, a = -a;
  }
  int operator<(const GbiFraction& o) const { return a * o.b < b * o.a; }
  int operator<=(const GbiFraction& o) const { return a * o.b <= b * o.a; }
  int operator>(const GbiFraction& o) const { return a * o.b > b * o.a; }
  int operator>=(const GbiFraction& o) const { return a * o.b >= b * o.a; }
  int operator==(const GbiFraction& o) const { return a * o.b == b * o.a; }
  int operator!=(const GbiFraction& o) const { return a * o.b != b * o.a; }
  GbiFraction operator+(const GbiFraction& o) const {
    return GbiFraction(a * o.b + o.a * b, b * o.b);
  }
  GbiFraction operator-(const GbiFraction& o) const {
    return GbiFraction(a * o.b - o.a * b, b * o.b);
  }
  GbiFraction operator*(const GbiFraction& o) const {
    return GbiFraction(a * o.a, b * o.b);
  }
  GbiFraction operator/(const GbiFraction& o) const {
    return GbiFraction(a * o.b, b * o.a);
  }
  double ToDouble() { return 1. * ToFloat<double>(a) / ToFloat<double>(b); }
  long double ToLongDouble() {
    return static_cast<long double>(1.) * ToFloat<long double>(a) /
           ToFloat<long double>(b);
  }
  GBI a, b;
};

template <typename T>
GbiFraction<T> operator+(const GbiFraction<T>& f) {
  return f;
}

template <typename T>
GbiFraction<T> operator-(const GbiFraction<T>& f) {
  return GbiFraction<T>(-f.a, f.b);
}

template <typename T>
ostream& operator<<(ostream& o, const GbiFraction<T>& f) {
  return o << f.a << "/" << f.b;
}

// Find f[0], f[1], f[2], ..., f[pos] if pos >= 0 else
// f[0], f[1], f[2], ..., f[data.size()-1]
// https://en.wikipedia.org/wiki/Continued_fraction#Some_useful_theorems
template <typename GBI, typename T>
SL vector<GbiFraction<GBI>> FromContinuedFractionN(const vector<T>& data,
                                                   int pos = -1) {
  const int size = (int)data.size();
  const int n = pos < 0 ? size : min(size, pos + 1);
  if (n == 0) {
    return vector<GbiFraction<GBI>>();
  }

  vector<GBI> p(n + 1), q(n + 1);
  p[0] = 1, q[0] = 0;
  p[1] = data[0], q[1] = 1;

  for (int i = 2; i <= n; ++i) {
    p[i] = p[i - 1] * data[i - 1] + p[i - 2];
    q[i] = q[i - 1] * data[i - 1] + q[i - 2];
  }

  vector<GbiFraction<GBI>> result(n);
  for (int i = 0; i < n; ++i) {
    result[i].a = std::move(p[i + 1]), result[i].b = std::move(q[i + 1]);
  }

  return result;
}

// Find f[pos] if pos >= 0 else f[data.size()-1]
template <typename GBI, typename T>
SL GbiFraction<GBI> FromContinuedFraction(const vector<T>& data, int pos = -1) {
  const int size = (int)data.size();
  const int n = pos < 0 ? size - 1 : min(size - 1, pos);
  PE_ASSERT(n >= 0);

  GBI p0 = 1, q0 = 0, p1 = data[0], q1 = 1;

  for (int i = 1; i <= n; ++i) {
    GBI p = p1 * data[i] + p0;
    GBI q = q1 * data[i] + q0;
    p0 = std::move(p1), p1 = std::move(p);
    q0 = std::move(q1), q1 = std::move(q);
  }

  GbiFraction<GBI> t;
  t.a = p1, t.b = q1;
  return t;
}

template <typename GBI>
SL GBI FindIntegerPart(const GBI& a, const GBI& q, const GBI& b, const GBI& c) {
  // a q^(1/2) + b >= c x
  long double test = (ToFloat<long double>(a) * sqrt(ToFloat<long double>(q)) +
                      ToFloat<long double>(b)) /
                     ToFloat<long double>(c);
  GBI now(Gbi<GBI>::Of(static_cast<int64>(test)));
  const GBI target = a * a * q;
  for (;;) {
    GBI next = now + 1;
    GBI t = sq(GBI(c * next - b));
    if (t <= target) {
      now = next;
    } else {
      break;
    }
  }
  return now;
}

// convert p sqrt(q) to continued fraction
// q is square free
template <typename GBI>
SL vector<GBI> ToContinuedFraction(int64 p, int64 q, int n) {
  vector<GBI> result;
  GBI a = Gbi<GBI>::Of(p), f = Gbi<GBI>::Of(q), b = 0, c = 1;
  // (a f^(1/2) + b) / c
  GBI val = FindIntegerPart(a, f, b, c);
  result.pb(val);
  b = b - val * c;

  while (result.size() < n) {
    // (a f^(1/2) + b) / c
    // c * (aq^(1/2) - b)
    GBI cc = a * a * f - b * b;
    GBI aa = c * a;
    GBI bb = -c * b;
    GBI val = FindIntegerPart(aa, f, bb, cc);
    result.pb(val);
    a = aa;
    b = bb - val * cc;
    c = cc;
    GBI d = Abs(Gcd(GBI(Gcd(a, b)), c));
    if (d > 1) {
      a /= d;
      b /= d;
      c /= d;
    }
  }

  return result;
}

#define FromCfN FromContinuedFractionN
#define FromCf FromContinuedFraction
#define ToCf ToContinuedFraction

// Compute n! mod p^e
// Note: if i % p == 0, then the contribution of i is 1.
// The complexity is at least max(e*e, p*e)
// It is slow if N is very big, e.g. N = 10^10000. ((10^10000)! mod p^e)
#if PE_HAS_CPP20
template <PeGbi GBI>
#else
template <typename GBI>
#endif
struct FactPPowerModer {
  static_assert(is_gbi<GBI>::value);

  std::vector<GBI> f_;
  int64 p_;
  int64 e_;
  GBI mod_;
  GBI phi_;

  FactPPowerModer(const int64 p, const int64 e) : p_(p), e_(e) {
    int64 pe = p_ * e_;
    mod_ = Power(GBI(p_), e_);
    phi_ = Power(GBI(p_), (e_ - 1)) * (p_ - 1);
    f_.resize(pe + 1, 1);
    for (int i = 1; i <= pe; ++i) {
      if (i % p_ == 0)
        f_[i] = f_[i - 1];
      else
        f_[i] = f_[i - 1] * i % mod_;
    }
  }

  GBI Cal(const GBI& n) {
    GBI u;
    GBI v;
    tie(u, v) = Div(n, p_);
    auto vv = ToInt<int64>(v);
    int64 r = (e_ + 1) >> 1;

    GBI ret = 1;
    // f_(up, p_)
    const GBI u2 = u * u;

    for (int j = 1; j <= r; ++j) {
      GBI beta_numer = u;
      GBI beta_denom = j;
      const int j2 = j * j;
      for (int i = 1; i <= r; ++i)
        if (i != j) beta_numer *= u2 - i * i, beta_denom *= j2 - i * i;
      auto beta = beta_numer / beta_denom % phi_;
      if (IntSign(beta) < 0) beta += phi_;
      ret = ret * PowerMod(f_[j * p_], beta, mod_) % mod_;
    }

    if (p_ == 2) {
      int64 left_mod4 = ((LowerBits(u * p_ + 1) & 4) >> 1) + 1;
      int64 right_mod4 = LowerBits(ret) & 3;
      if (left_mod4 != right_mod4) {
        ret = (mod_ - ret) % mod_;
      }
    }

    // f_(v, p_)
    ret = ret * f_[vv] % mod_;

    // (p_ + v, v)_p
    for (int j = 1; j < e_; ++j) {
      auto base = f_[j * p_ + vv] * ModInv(f_[vv] * f_[j * p_], mod_) % mod_;
      GBI alpha_numer = u;
      GBI alpha_denom = j;
      for (int i = 1; i < e_; ++i)
        if (i != j) {
          alpha_numer *= u - i;
          alpha_denom *= j - i;
        }
      auto alpha = alpha_numer / alpha_denom % phi_;
      if (IntSign(alpha) < 0) alpha += phi_;
      ret = ret * PowerMod(base, alpha, mod_) % mod_;
    }

    return ret;
  }
};
#endif
