#ifndef PE_PERSISTANCE_
#define PE_PERSISTANCE_

#include "pe_base"
#include "pe_time"

template <typename T>
class SavePolicy {
 public:
  SavePolicy() : time_limit_(TimeDelta::from_second(10)) { on_saved(); }

  ~SavePolicy() = default;

  void enable_auto_save(bool enable = true) { auto_save_ = enable; }

  void set_dirty_limit(int d) { dirty_limit_ = d; }

  void disable_dirty_limit() { dirty_limit_ = 2000000000; }

  void set_time_limit(TimeDelta t) { time_limit_ = t; }

  void disable_time_limit() { time_limit_ = TimeDelta::from_day(10); }

  void on_closing() {
    if (dirty_ > 0) {
      static_cast<T&>(*this).save();
    }
  }

  void on_updated() {
    ++dirty_;
    if (auto_save_ &&
        (tr_.elapsed() >= time_limit_ || dirty_ >= dirty_limit_)) {
      static_cast<T&>(*this).save();
    }
  }

  void on_saved() {
    tr_.record();
    dirty_ = 0;
  }

 private:
  bool auto_save_{true};
  int dirty_{0};
  int dirty_limit_{10};
  TimeDelta time_limit_;
  TimeRecorder tr_;
};

class KVPersistance : public SavePolicy<KVPersistance> {
 public:
  KVPersistance(const string& path, bool check = false)
      : path_(path), check_(check) {
    load();
  }

  ~KVPersistance() { on_closing(); }

  void load(bool check = false) {
    on_saved();

    FILE* fp = fopen(path_.c_str(), "r");
    if (!fp) return;

    vector<pair<int64, int64> > vec;
    int64 k, v;
    while (fscanf(fp, "%I64d %I64d", &k, &v) == 2) vec.emplace_back(k, v);
    fclose(fp);

    if (check || check_) {
      stable_sort(vec.begin(), vec.end());
      const int n = static_cast<int>(vec.size());
      for (int i = 1; i < n; ++i)
        if (vec[i - 1].first == vec[i].first) {
          if (vec[i - 1].second != vec[i].second) {
            fprintf(stderr, "key = %I64d, value = %I64d, %I64d\n", vec[i].first,
                    vec[i - 1].second, vec[i].second);
            assert(0);
          }
        }
    }
    kv_ = std::move(map<int64, int64>(vec.begin(), vec.end()));
  }

  void save() {
    FILE* fp = fopen(path_.c_str(), "w");
    if (!fp) return;
    for (auto& iter : kv_) {
      fprintf(fp, "%I64d %I64d\n", iter.first, iter.second);
    }
    fclose(fp);
    string cmd = "copy " + path_ + " " + path_ + ".bak /Y";
    system(cmd.c_str());
    on_saved();
  }

  void set(int64 key, int64 v) {
    bool skip = false;
    if (check_) {
      auto where = kv_.find(key);
      if (where != kv_.end()) {
        if (where->second != v) {
          fprintf(stderr, "invalid set: key = %I64d, value = %I64d, %I64d\n",
                  key, where->second, v);
          assert(0);
        } else {
          skip = true;
        }
      }
    }
    if (skip) return;

    kv_[key] = v;

    on_updated();
  }

  map<int64, int64>& storage() { return kv_; }

  int64 size() const { return kv_.size(); }

  void visit(const function<bool(int64, int64)>& f) {
    for (auto& iter : kv_) {
      if (!f(iter.first, iter.second)) break;
    }
  }

 private:
  string path_;
  bool check_;
  map<int64, int64> kv_;
};

#endif
