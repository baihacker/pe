#ifndef PE_GBI_
#define PE_GBI_

// General big integer.

#include "pe_base"
#include "pe_int128"
#include "pe_type_traits"
#include "pe_int"
#include "pe_nt"
#include "pe_fraction"

namespace pe {
// Each gbi implements this class. It should provide a method "Of" to convert
// which is similar to constructor.
template <typename GBI>
struct Gbi;

template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(int) IsZero(const GBI& x);

template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(int) IntSign(const GBI& x);

template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(int) IsEven(const GBI& x);

template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(int) IsOdd(const GBI& x);

template <typename T0, typename T1>
SL REQUIRES((is_gbi<T0>::value && is_gbi<T1>::value)) RETURN(int)
    SameParity(const T0& v0, const T1& v1) {
  return IsEven(v0) == IsEven(v1);
}

template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(unsigned int) LowerBits(const GBI& x);

template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(GBI) Abs(const GBI& n) {
  return IntSign(n) >= 0 ? n : -n;
}

template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(GBI) FAbs(const GBI& n) {
  return IntSign(n) >= 0 ? n : -n;
}

template <typename GBI, typename TN>
SL REQUIRES((is_gbi<GBI>::value && is_builtin_integer<TN>::value)) RETURN(GBI)
    Power(const GBI& l, TN n) {
  PE_ASSERT(n >= 0);
  GBI ret(1);
  GBI x(l);
  for (; IntSign(n) > 0; n >>= 1) {
    if (n & 1) ret = ret * x;
    if (n > 1) x = x * x;
  }
  return ret;
}

template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(std::tuple<GBI, GBI>)
    Div(const GBI& l, const GBI& r);

template <typename T, typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(T) ToInt(const GBI& x);

template <typename T, typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(T) ToFloat(const GBI& x);

template <typename T, typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(T) ToString(const GBI& x);

#if PE_HAS_CPP20
#define PE_ARTHMETIC_OPERATION_IMPL(type) \
  v + static_cast<type>(1);               \
  v - static_cast<type>(1);               \
  v* static_cast<type>(1);                \
  v / static_cast<type>(1);               \
  v % static_cast<type>(1);               \
  static_cast<type>(1) + v;               \
  static_cast<type>(1) - v;               \
  static_cast<type>(1) * v;               \
  static_cast<type>(1) / v;               \
  static_cast<type>(1) % v;               \
  v << static_cast<type>(1);              \
  v >> static_cast<type>(1);              \
  v | static_cast<type>(1);               \
  v& static_cast<type>(1);                \
  v ^ static_cast<type>(1)

#define PE_SELF_ARTHMETIC_OPERATION_IMPL(type) \
  v += static_cast<type>(1);                   \
  v -= static_cast<type>(1);                   \
  v *= static_cast<type>(1);                   \
  v /= static_cast<type>(1);                   \
  v %= static_cast<type>(1);                   \
  v <<= static_cast<type>(1);                  \
  v >>= static_cast<type>(1);                  \
  v &= static_cast<type>(1);                   \
  v ^= static_cast<type>(1)

template <class T>
concept PeGbiArithmeticOperation = requires(T v) {
  PE_ARTHMETIC_OPERATION_IMPL(char);
  PE_ARTHMETIC_OPERATION_IMPL(unsigned char);
  PE_ARTHMETIC_OPERATION_IMPL(signed char);
  PE_ARTHMETIC_OPERATION_IMPL(int);
  PE_ARTHMETIC_OPERATION_IMPL(unsigned int);
  PE_ARTHMETIC_OPERATION_IMPL(signed int);
  PE_ARTHMETIC_OPERATION_IMPL(short int);
  PE_ARTHMETIC_OPERATION_IMPL(unsigned short int);
  PE_ARTHMETIC_OPERATION_IMPL(long int);
  PE_ARTHMETIC_OPERATION_IMPL(signed long int);
  PE_ARTHMETIC_OPERATION_IMPL(unsigned long int);
  PE_ARTHMETIC_OPERATION_IMPL(long long int);
  PE_ARTHMETIC_OPERATION_IMPL(signed long long int);
  PE_ARTHMETIC_OPERATION_IMPL(unsigned long long int);
#if PE_HAS_INT128
  PE_ARTHMETIC_OPERATION_IMPL(int128);
  PE_ARTHMETIC_OPERATION_IMPL(uint128);
#endif
  v + v;
  v - v;
  v* v;
  v / v;
  v % v;
  ~v;
};
template <class T>
concept PeGbiSelfOperation = requires(T v) {
  PE_SELF_ARTHMETIC_OPERATION_IMPL(char);
  PE_SELF_ARTHMETIC_OPERATION_IMPL(unsigned char);
  PE_SELF_ARTHMETIC_OPERATION_IMPL(signed char);
  PE_SELF_ARTHMETIC_OPERATION_IMPL(int);
  PE_SELF_ARTHMETIC_OPERATION_IMPL(unsigned int);
  PE_SELF_ARTHMETIC_OPERATION_IMPL(signed int);
  PE_SELF_ARTHMETIC_OPERATION_IMPL(short int);
  PE_SELF_ARTHMETIC_OPERATION_IMPL(unsigned short int);
  PE_SELF_ARTHMETIC_OPERATION_IMPL(long int);
  PE_SELF_ARTHMETIC_OPERATION_IMPL(signed long int);
  PE_SELF_ARTHMETIC_OPERATION_IMPL(unsigned long int);
  PE_SELF_ARTHMETIC_OPERATION_IMPL(long long int);
  PE_SELF_ARTHMETIC_OPERATION_IMPL(signed long long int);
  PE_SELF_ARTHMETIC_OPERATION_IMPL(unsigned long long int);
#if PE_HAS_INT128
  PE_SELF_ARTHMETIC_OPERATION_IMPL(int128);
  PE_SELF_ARTHMETIC_OPERATION_IMPL(uint128);
#endif
  v += v;
  v -= v;
  v *= v;
  v /= v;
  v %= v;
  ++v;
  --v;
  v++;
  v--;
};
template <class T>
concept PeGbi = requires(T v) {
  requires static_cast<bool>(is_gbi<T>::value);
  requires PeGbiArithmeticOperation<T>;
  requires PeGbiSelfOperation<T>;
  requires PeComparable<T>;
  requires PeNumberUtil<T>;
};

#undef PE_ARTHMETIC_OPERATION_IMPL
#undef PE_SELF_ARTHMETIC_OPERATION_IMPL
#endif

template <typename GBI, typename TM>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(GBI)
    RegulateMod(const GBI& a, TM mod) {
  if (IntSign(a) >= 0) {
    return a >= mod ? a % mod : a;
  } else {
    auto tmp = a % mod;
    if (tmp < 0) tmp += mod;
    return tmp;
  }
}

template <typename GBI, typename TM>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(GBI)
    AddMod(GBI a, const GBI& b, TM mod) {
  a += b;
  if (a >= mod) {
    a -= mod;
  }
  return a;
}

template <typename GBI, typename TM>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(GBI)
    SubMod(GBI a, const GBI& b, TM mod) {
  a -= b;
  if (IntSign(a) < 0) {
    a += mod;
  }
  return a;
}

template <typename GBI, typename TM>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(GBI)
    MulMod(const GBI& a, const GBI& b, TM mod) {
  return a * b % mod;
}

template <typename GBI, typename TN>
SL REQUIRES((is_gbi<GBI>::value && is_builtin_integer<TN>::value)) RETURN(GBI)
    PowerMod(const GBI& l, TN n, const GBI& mod) {
  PE_ASSERT(n >= 0);
  if (mod == 1) {
    return 0;
  }
  GBI ret(1);
  GBI x(l % mod);
  for (; n > 0; n >>= 1) {
    if (n & 1) ret = ret * x % mod;
    if (n > 1) x = x * x % mod;
  }
  return ret;
}

template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(GBI)
    PowerMod(const GBI& l, const GBI& m, const GBI& mod) {
  PE_ASSERT(IntSign(m) >= 0);
  if (mod == 1) {
    return 0;
  }
  GBI ret(1);
  GBI x(l % mod);
  GBI n(m);
  for (; !IsZero(n);) {
    if (IsOdd(n)) ret = ret * x % mod;
    n >>= 1;
    if (!IsZero(n)) x = x * x % mod;
  }
  return ret;
}

template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(GBI) Gcd(GBI m, GBI n) {
  while (!IsZero(n)) {
    GBI t = m % n;
    m = std::move(n);
    n = std::move(t);
  }
  return m;
}

template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(GBI)
    ExGcd(const GBI& a, const GBI& b, GBI& x, GBI& y) {
  if (IsZero(b)) {
    x = 1;
    y = 0;
    return a;
  }

  GBI x1 = 0, y1 = 0;
  GBI ret = ExGcd(b, GBI(a % b), x1, y1);
  // b * x1 + (a%b) * y1 = ret
  // b * x1 + (a - a / b * b) * y1 = ret
  // b * x1 + a * y1 - a / b * b * y1 = ret
  // y1 * a + (x1 - a / b * y1) b = ret
  y = x1 - a / b * y1;
  x = std::move(y1);
  return ret;
}

template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(std::tuple<GBI, GBI, GBI>)
    ExGcd(const GBI& a, const GBI& b) {
  PE_ASSERT(!IsZero(a) || !IsZero(b));
  GBI x = 0, y = 0;
  const GBI r = ExGcd(a, b, x, y);
  PE_ASSERT(a * x + b * y == r);
  return std::tuple<GBI, GBI, GBI>{r, x, y};
}

template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(GBI)
    ModInv(const GBI& a, const GBI& mod) {
  GBI x, y;
  ExGcd(a, mod, x, y);
  x %= mod;
  if (IntSign(x) < 0) {
    x += mod;
  }
  return x;
}

// solve equation a x = b (mod m)
// return 0 and set u = -1 and v = 0 if failed
// return 1, x = v (mod u)
template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(int)
    SolveLinearEquation(GBI a, GBI b, const GBI& m, GBI& v, GBI& u) {
  v = 0;
  u = 0;

  PE_ASSERT(!IsZero(m));

  a %= m;
  b %= m;

  if (a < 0) a += m;
  if (b < 0) b += m;

  GBI xx = 0, yy = 0, d = ExGcd(a, m, xx, yy);

  if (!(b % d).isZero()) return 0;

  xx = (xx % m + m) % m;
  xx = xx * (b / d) % m;

  u = m / d;
  v = xx % u;

  return 1;
}

template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(std::tuple<int, GBI, GBI>)
    SolveLinearEquation(const GBI& a, const GBI& b, const GBI& m) {
  GBI v = 0, u = 0;
  int r = SolveLinearEquation<GBI>(a, b, m, v, u);
  return std::tuple<int, GBI, GBI>{r, v, u};
}

// solve equation x = a (mod m1) x = b (mod m2)
// return 0 and set u = 0 and t = 0 if failed
// return 1, x = v (mod u)
template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(int)
    Crt2(GBI a, const GBI& m1, GBI b, const GBI& m2, GBI& v, GBI& u) {
  v = 0;
  u = 0;

  PE_ASSERT(!IsZero(m1) && !IsZero(m2));
  // x = a (mod m1)
  // x = b (mod m2)
  // x = k0 m1 + a
  // k0 m1 + a = b (mod m2)
  // k0 m1 = b - a (mod m2)
  a %= m1;
  b %= m2;
  if (a < 0) a = -a;
  if (b < 0) b = -b;

  GBI s = 0, t = 0;
  if (!SolveLinearEquation(m1, b - a, m2, t, s)) return 0;
  // k0 = k1 * s + t
  // x = (k1 * s + t) * m1 + a
  // x = k1 * s * m1 + (a + t * m1)

  u = s * m1;
  v = ((a + t * m1) % u + u) % u;
  return 1;
}

template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(std::tuple<int, GBI, GBI>)
    Crt2(const GBI& a, const GBI& m1, const GBI& b, const GBI& m2) {
  GBI v = 0, u = 0;
  int r = Crt2(a, m1, b, m2, v, u);
  return std::tuple<int, GBI, GBI>{r, v, u};
}

template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(std::tuple<int, GBI, GBI>)
    CrtN(const GBI* val, const GBI* mod, int n) {
  GBI v = 0, u = 1;
  int have = 1;
  for (int i = 0; i < n; ++i) {
    std::tie(have, v, u) = Crt2(v, u, val[i], mod[i]);
    if (!have) {
      return std::tuple<int, GBI, GBI>{0, 0, 0};
    }
  }
  return std::tuple<int, GBI, GBI>{have, v, u};
}

template <typename GBI>
SL REQUIRES((is_gbi<GBI>::value)) RETURN(std::tuple<int, GBI, GBI>)
    CrtN(const std::vector<GBI>& val, const std::vector<GBI>& mod) {
  return CrtN<GBI>(&val[0], &mod[0], val.size());
}

// Returns f[0], f[1], f[2], ..., f[min(pos, data.size()-1)] if pos >= 0
// Returns f[0], f[1], f[2], ..., f[data.size()-1] if pos < 0
// https://en.wikipedia.org/wiki/Continued_fraction#Some_useful_theorems
template <typename GBI, typename T>
SL std::vector<Fraction<GBI>> FromContinuedFractionN(const std::vector<T>& data,
                                                     int pos = -1) {
  const int size = static_cast<int>(data.size());
  const int n = pos < 0 ? size : std::min(size, pos + 1);
  if (n == 0) {
    return std::vector<Fraction<GBI>>();
  }

  std::vector<GBI> p(n + 1), q(n + 1);
  p[0] = 1, q[0] = 0;
  p[1] = data[0], q[1] = 1;

  for (int i = 2; i <= n; ++i) {
    p[i] = p[i - 1] * data[i - 1] + p[i - 2];
    q[i] = q[i - 1] * data[i - 1] + q[i - 2];
  }

  std::vector<Fraction<GBI>> result(n);
  for (int i = 0; i < n; ++i) {
    result[i].a = std::move(p[i + 1]), result[i].b = std::move(q[i + 1]);
  }

  return result;
}

// Returns f[min(pos, data.size()-1)] if pos >= 0
// Returns f[data.size()-1] if pos < 0
template <typename GBI, typename T>
SL Fraction<GBI> FromContinuedFraction(const std::vector<T>& data,
                                       int pos = -1) {
  const int size = static_cast<int>(data.size());
  const int n = pos < 0 ? size - 1 : std::min(size - 1, pos);
  PE_ASSERT(n >= 0);

  GBI p0 = 1, q0 = 0, p1 = data[0], q1 = 1;

  for (int i = 1; i <= n; ++i) {
    GBI p = p1 * data[i] + p0;
    GBI q = q1 * data[i] + q0;
    p0 = std::move(p1), p1 = std::move(p);
    q0 = std::move(q1), q1 = std::move(q);
  }

  Fraction<GBI> t;
  t.a = p1, t.b = q1;
  return t;
}

template <typename GBI>
SL GBI FindIntegerPart(const GBI& a, const GBI& q, const GBI& b, const GBI& c) {
  // a q^(1/2) + b >= c x
  long double test = (ToFloat<long double>(a) * sqrt(ToFloat<long double>(q)) +
                      ToFloat<long double>(b)) /
                     ToFloat<long double>(c);
  GBI now(Gbi<GBI>::Of(static_cast<int64>(test)));
  const GBI target = a * a * q;
  for (;;) {
    GBI next = now + 1;
    GBI t = sq(GBI(c * next - b));
    if (t <= target) {
      now = next;
    } else {
      break;
    }
  }
  return now;
}

// convert p sqrt(q) to continued fraction
// q is square free
template <typename GBI>
SL std::vector<GBI> ToContinuedFraction(int64 p, int64 q, int n) {
  std::vector<GBI> result;
  GBI a = Gbi<GBI>::Of(p), f = Gbi<GBI>::Of(q), b = 0, c = 1;
  // (a f^(1/2) + b) / c
  GBI val = FindIntegerPart(a, f, b, c);
  result.pb(val);
  b = b - val * c;

  while (result.size() < n) {
    // (a f^(1/2) + b) / c
    // c * (aq^(1/2) - b)
    GBI cc = a * a * f - b * b;
    GBI aa = c * a;
    GBI bb = -c * b;
    GBI val = FindIntegerPart(aa, f, bb, cc);
    result.pb(val);
    a = aa;
    b = bb - val * cc;
    c = cc;
    GBI t = Gcd(a, b);
    GBI d = Abs(Gcd(t, c));
    if (d > 1) {
      a /= d;
      b /= d;
      c /= d;
    }
  }

  return result;
}

template <typename GBI, typename T>
SL std::vector<Fraction<GBI>> FromCfN(const std::vector<T>& data,
                                      int pos = -1) {
  return FromContinuedFractionN<GBI, T>(data, pos);
}

template <typename GBI, typename T>
SL Fraction<GBI> FromCf(const std::vector<T>& data, int pos = -1) {
  return FromContinuedFraction<GBI, T>(data, pos);
}

template <typename GBI>
SL std::vector<GBI> ToCf(int64 p, int64 q, int n) {
  return ToContinuedFraction<GBI>(p, q, n);
}

// Compute n! mod p^e
// Note: if i % p == 0, then the contribution of i is 1.
// The complexity is at least max(e*e, p*e)
// It is slow if N is very big, e.g. N = 10^10000. ((10^10000)! mod p^e)
#if PE_HAS_CPP20
template <PeGbi GBI>
#else
template <typename GBI>
#endif
struct FactPPowerModer {
  static_assert(is_gbi<GBI>::value);

  std::vector<GBI> f_;
  int64 p_;
  int64 e_;
  GBI mod_;
  GBI phi_;

  FactPPowerModer(const int64 p, const int64 e) : p_(p), e_(e) {
    int64 pe = p_ * e_;
    mod_ = Power(GBI(p_), e_);
    phi_ = Power(GBI(p_), (e_ - 1)) * (p_ - 1);
    f_.resize(pe + 1, 1);
    for (int i = 1; i <= pe; ++i) {
      if (i % p_ == 0) {
        f_[i] = f_[i - 1];
      } else {
        f_[i] = f_[i - 1] * i % mod_;
      }
    }
  }

  GBI Cal(const GBI& n) {
    GBI u;
    GBI v;
    std::tie(u, v) = Div(n, p_);
    auto vv = ToInt<int64>(v);
    int64 r = (e_ + 1) >> 1;

    GBI ret = 1;
    // f_(up, p_)
    const GBI u2 = u * u;

    for (int j = 1; j <= r; ++j) {
      GBI beta_numer = u;
      GBI beta_denom = j;
      const int j2 = j * j;
      for (int i = 1; i <= r; ++i) {
        if (i != j) beta_numer *= u2 - i * i, beta_denom *= j2 - i * i;
      }
      auto beta = beta_numer / beta_denom % phi_;
      if (IntSign(beta) < 0) beta += phi_;
      ret = ret * PowerMod(f_[j * p_], beta, mod_) % mod_;
    }

    if (p_ == 2) {
      int64 left_mod4 = ((LowerBits(u * p_ + 1) & 4) >> 1) + 1;
      int64 right_mod4 = LowerBits(ret) & 3;
      if (left_mod4 != right_mod4) {
        ret = (mod_ - ret) % mod_;
      }
    }

    // f_(v, p_)
    ret = ret * f_[vv] % mod_;

    // (p_ + v, v)_p
    for (int j = 1; j < e_; ++j) {
      auto base = f_[j * p_ + vv] * ModInv(f_[vv] * f_[j * p_], mod_) % mod_;
      GBI alpha_numer = u;
      GBI alpha_denom = j;
      for (int i = 1; i < e_; ++i) {
        if (i != j) {
          alpha_numer *= u - i;
          alpha_denom *= j - i;
        }
      }
      auto alpha = alpha_numer / alpha_denom % phi_;
      if (IntSign(alpha) < 0) alpha += phi_;
      ret = ret * PowerMod(base, alpha, mod_) % mod_;
    }

    return ret;
  }
};
}  // namespace pe
#endif
