#ifndef PE_INT_
#define PE_INT_

#include "pe_base"
#include "pe_int128"
#include "pe_type_traits"
#include "pe_bit"

namespace pe {
// Operation on native integers
template <typename T>
SL REQUIRES((is_builtin_integer<T>::value)) RETURN(int) IsZero(T v) {
  return v ? 0 : 1;
}

template <typename T>
SL REQUIRES((is_builtin_integer<T>::value)) RETURN(int) IntSign(T v) {
  return v < 0 ? -1 : (v > 0);
}

template <typename T>
SL REQUIRES((is_builtin_integer<T>::value)) RETURN(int) IsEven(T v) {
  return (v & 1) == 0 ? 1 : 0;
}

template <typename T>
SL REQUIRES((is_builtin_integer<T>::value)) RETURN(int) IsOdd(T v) {
  return (v & 1) == 0 ? 0 : 1;
}

template <typename T0, typename T1>
SL REQUIRES((is_builtin_integer<T0>::value && is_builtin_integer<T1>::value))
    RETURN(int) SameParity(T0 v0, T1 v1) {
  const int x = static_cast<int>(v0 & 1);
  const int y = static_cast<int>(v1 & 1);
  return x == y ? 1 : 0;
}

template <typename T>
SL REQUIRES((is_builtin_integer<T>::value)) RETURN(unsigned int)
    LowerBits(T x) {
  return static_cast<unsigned int>(x);
}

template <typename T>
SL REQUIRES((is_builtin_integer<T>::value)) RETURN(T) Abs(const T n) {
  return n >= 0 ? n : -n;
}

template <typename T>
SL REQUIRES((is_builtin_integer<T>::value)) RETURN(T) FAbs(const T n) {
  return n >= 0 ? n : -n;
}

SL float FAbs(const float n) { return fabs(n); }

SL double FAbs(const double n) { return fabs(n); }

SL long double FAbs(const long double n) { return fabs(n); }

template <typename T1, typename T2>
SL REQUIRES((is_builtin_integer<T1>::value && is_builtin_integer<T2>::value))
    RETURN(T1) Power(T1 x, T2 n) {
  PE_ASSERT(n >= 0);
  T1 ret = 1;
  for (; n > 0; n >>= 1) {
    if (n & 1) ret = ret * x;
    if (n > 1) x = x * x;
  }
  return ret;
}

template <typename TARGET, typename T>
SL REQUIRES((is_builtin_integer<T>::value)) RETURN(TARGET) ToInt(T v) {
  return static_cast<TARGET>(v);
}

template <typename TARGET, typename T>
SL REQUIRES((is_builtin_integer<T>::value)) RETURN(TARGET) ToFloat(T v) {
  return static_cast<TARGET>(v);
}

template <typename T>
SL REQUIRES((is_builtin_integer<T>::value)) RETURN(std::string) ToString(T v) {
  return pe::to_string(v);
}

SL std::string ToString(double v) { return pe::to_string(v); }

SL std::string ToString(long double v) { return pe::to_string(v); }

SL std::string ToString(float v) { return pe::to_string(v); }

template <typename T>
SL std::tuple<T, T> Div(const T& l, const T& r) {
  return {l / r, l % r};
}

#if PE_HAS_CPP20
template <class T>
concept PeComparable = requires(T v) {
  v < v;
  v <= v;
  v > v;
  v >= v;
  v == v;
  v != v;
  v <=> v;
};
template <class T>
concept PeNumberUtil = requires(T v) {
  requires PeComparable<T>;
  IsZero(v);
  IntSign(v);
  IsEven(v);
  IsOdd(v);
  SameParity(v, v);
  LowerBits(v);
  Abs(v);
  FAbs(v);
  Power(v, 10);
  ToInt<char>(v);
  ToInt<unsigned char>(v);
  ToInt<signed char>(v);
  ToInt<int>(v);
  ToInt<unsigned int>(v);
  ToInt<signed int>(v);
  ToInt<short int>(v);
  ToInt<unsigned short int>(v);
  ToInt<long int>(v);
  ToInt<signed long int>(v);
  ToInt<unsigned long int>(v);
  ToInt<long long int>(v);
  ToInt<signed long long int>(v);
  ToInt<unsigned long long int>(v);
#if PE_HAS_INT128
  ToInt<int128>(v);
  ToInt<uint128>(v);
#endif
  ToFloat<float>(v);
  ToFloat<double>(v);
  ToFloat<long double>(v);
  ToString(v);
  Div(v, v);
};
static_assert(PeNumberUtil<char>);
static_assert(PeNumberUtil<unsigned char>);
static_assert(PeNumberUtil<signed char>);
static_assert(PeNumberUtil<int>);
static_assert(PeNumberUtil<unsigned int>);
static_assert(PeNumberUtil<signed int>);
static_assert(PeNumberUtil<short int>);
static_assert(PeNumberUtil<unsigned short int>);
static_assert(PeNumberUtil<long int>);
static_assert(PeNumberUtil<signed long int>);
static_assert(PeNumberUtil<unsigned long int>);
static_assert(PeNumberUtil<long long int>);
static_assert(PeNumberUtil<signed long long int>);
static_assert(PeNumberUtil<unsigned long long int>);
#if PE_HAS_INT128
static_assert(PeNumberUtil<int128>);
static_assert(PeNumberUtil<uint128>);
#endif
#endif

// Modular arithmetic is implemented in pe_mod.
// Other utilities are implemented in pe_nt_base and pe_nt.

}  // namespace pe
#endif
