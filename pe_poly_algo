#ifndef PE_POLY_ALGO_
#define PE_POLY_ALGO_

#include "pe_base"
#include "pe_type_traits"
#include "pe_mod"
#include "pe_mat"
#include "pe_nt"
#include "pe_poly_base"
#include "pe_poly"

namespace pe {
// Initialize the bernoulli numbers.
// B[1] = -1/2
// invs[n] should be available.
SL void InitBernoulliNumber(int64* dest, int64 n, int64* invs, int64 mod) {
  std::vector<uint64> t(n);
  uint64 v = 1;
  for (int64 i = 0; i < n; ++i) {
    v = MulMod(v, invs[i + 1], mod);
    t[i] = v;
  }

  std::vector<uint64> result = PolyInv<uint64>(t, static_cast<int64>(n), mod);

  uint64 c = 1;
  dest[0] = result[0];
  for (int64 i = 1; i < n; ++i) {
    c = MulMod(c, i, mod);
    dest[i] = MulMod(result[i], c, mod);
  }
}

SL void InitBernoulliNumber(int64* dest, int64 n, int64 mod) {
  std::vector<uint64> invs(n + 1);
  InitInverse(reinterpret_cast<int64*>(&invs[0]), n, mod);
  InitBernoulliNumber(dest, n, reinterpret_cast<int64*>(&invs[0]), mod);
}

// Returns [n, 0], [n, 1], ..., [n, n]
// The nth row of the stirling number of the first kind.
// Formula: x^(n) rising factorial
SL std::vector<int64> GenStirling1(int64 n, int64 mod, int has_sign = 0) {
  PE_ASSERT(n > 0);
  std::vector<int64> t(2 * n);
  if (has_sign) {
    for (int64 i = 0, j = 0; i < 2 * n; i += 2, ++j) {
      t[i] = j == 0 ? 0 : mod - j;
      t[i + 1] = 1;
    }
  } else {
    for (int64 i = 0, j = 0; i < 2 * n; i += 2, ++j) {
      t[i] = j;
      t[i + 1] = 1;
    }
  }
  return PolyBatchMul(t, mod);
}

namespace pmod {
// Returns [0, n], [1, n], ..., [cnt, n]
// The nth column of the stirling number of the first kind.
// Formula: ((-log(1-x))^m)/m!
// http://oeis.org/A008275
SL std::vector<int64> GenStirling1Column(int64 n, int64 m, int64 mod) {
  std::vector<int64> a = PolyLog(std::vector<int64>{1, mod - 1}, m + 1, mod);
  for (int64& i : a) i = i == 0 ? 0 : mod - i;
  std::vector<int64> b = {1};
  for (int64 t = n; t > 0; t >>= 1) {
    if (t & 1) {
      b = PolyMul(b, a, mod);
      if (static_cast<int64>(std::size(b)) > m + 1) b.resize(m + 1);
    }
    if (t > 1) {
      a = PolyMul(a, a, mod);
      if (static_cast<int64>(std::size(a)) > m + 1) a.resize(m + 1);
    }
  }
  int64 t = 1;
  for (int64 i = 1; i <= n; ++i) t = MulMod(t, i, mod);
  t = ModInv(t, mod);
  int64 now = 1;
  const int64 limit = std::min<int64>(static_cast<int64>(std::size(b)), m + 1);
  for (int64 i = 0; i < limit; ++i) {
    b[i] = MulMod(b[i], now, mod);
    b[i] = MulMod(b[i], t, mod);
    now = MulMod(now, i + 1, mod);
  }
  for (int64 i = limit; i <= m; ++i) {
    b.push_back(0);
  }
  return b;
}

// Returns {n, 0}, {n, 1}, ..., {n, n}
// The nth row of the stirling number of the second kind.
// Formula: (the point value egf of x^n) * (e^(-x))
SL std::vector<int64> GenStirling2(int64 n, int64 mod) {
  // x^n at {0, 1, 2, ..., n}
  std::vector<int64> a(n + 1);
  int64 now = 1;
  for (int64 i = 1; i <= n; ++i) now = MulMod(now, i, mod);
  now = ModInv(now, mod);
  for (int64 i = n; i >= 0; --i) {
    a[i] = MulMod(now, PowerMod(i, n, mod), mod);
    if (i > 0) now = MulMod(now, i, mod);
  }
  // e^(-x)
  std::vector<int64> b = PolyExp(std::vector<int64>{0, mod - 1}, n + 1, mod);
  std::vector<int64> c = PolyMul(a, b, mod);
  c.resize(n + 1);
  return c;
}
}  // namespace pmod

// Finds the coefficient of x^0,x1,...x^n of f such that: A*f = B
// Returns empty vector if there is no integer solution.
// Complexity: O(size(A) * n)
// Consider PolyMul(A.inv(n+1), B)[n] if it has a better complexity.
SL std::vector<int64> GfFirst(const std::vector<int64>& A,
                              const std::vector<int64>& B, const int64 n,
                              const int64 mod) {
  const int sa = static_cast<int>(std::size(A));
  const int sb = static_cast<int>(std::size(B));
  PE_ASSERT(sa > 0);
  PE_ASSERT(sb > 0);

  ModValue<int64> mod_value = SolveLinearEquation<int64>(A[0], 1, mod);

  if (!mod_value.ok) return std::vector<int64>();

  std::vector<int64> result(n + 1, 0);

  // if mod_value.mod < mod, we have more than one solution.
  PE_ASSERT(mod_value.mod == mod);
  const int64 invA0 = mod_value.value;
  result[0] = invA0 * B[0] % mod;

  for (int64 i = 1; i <= n; ++i) {
    int64 t = Mod(i < sb ? B[i] : 0, mod);
    for (int64 j = 1; j <= std::min<int64>(i, sa - 1); ++j) {
      t = SubMod(t, (j < sa ? A[j] : 0) * result[i - j] % mod, mod);
    }
    result[i] = invA0 * t % mod;
  }

  return result;
}

// Finds the coefficient of x^0,x1,...x^n of f such that: A*f = B
// Returns empty vector if there is no integer solution.
// Complexity: O(size(A) * n)
// Consider PolyMul(A.inv(n+1), B)[n] if it has a better complexity.
SL std::vector<int64> GfFirst(const NModPoly& A, const NModPoly& B,
                              const int64 n) {
  return GfFirst(A.data, B.data, n, A.mod);
}

// Finds the coefficient of x^n of f such that: A*f = B
// Returns -1 if there is no integer solution.
// O(MatrixMultiplicationComplexity(size(A)) * log n) for big n
SL int64 GfAt(const std::vector<int64>& A, const std::vector<int64>& B,
              const int64 n, const int64 mod) {
  const int sa = static_cast<int>(std::size(A));
  const int sb = static_cast<int>(std::size(B));
  PE_ASSERT(sa > 0);
  PE_ASSERT(sb > 0);

  ModValue<int64> mod_value = SolveLinearEquation<int64>(A[0], 1, mod);

  if (!mod_value.ok) return -1;

  const int64 m = std::min(static_cast<int64>(std::max(sa - 1, sb - 1)), n);
  std::vector<int64> result(m + 1, 0);

  // if mod_value.mod < mod, we have more than one solution.
  PE_ASSERT(mod_value.mod == mod);
  const int64 invA0 = mod_value.value;
  result[0] = invA0 * B[0] % mod;

  for (int i = 1; i <= m; ++i) {
    int64 t = Mod(i < sb ? B[i] : 0, mod);
    for (int j = 1; j <= std::min(i, sa - 1); ++j) {
      t = SubMod(t, (j < sa ? A[j] : 0) * result[i - j] % mod, mod);
    }
    result[i] = invA0 * t % mod;
  }

  if (m == n) {
    return result[m];
  }

  const int64 D = sa - 1;
#if PE_HAS_INT128
  return MatrixPowerMod(
      [&](auto& mat, auto& v) {
        for (int i = 0; i < D; ++i) {
          mat(0, i) = MulMod(invA0, Mod(i + 1 < sa ? -A[i + 1] : 0, mod), mod);
        }
        for (int i = 1; i < D; ++i) {
          mat(i, i - 1) = 1;
        }
        for (int i = 0; i < D; ++i) {
          v[i] = result[m - i];
        }
      },
      D, n - m, mod)[0];
#else
  const int64 size = D * D;
  std::string data(size * sizeof(int64) * 3, '\0');
  int64* buffer = reinterpret_cast<int64*>(const_cast<char*>(data.c_str()));

  int64* mat = buffer;
  int64* res = mat + size;
  int64* tmp = res + size;

  for (int i = 0; i < D; ++i) {
    mat[i] = MulMod(invA0, Mod(i + 1 < sa ? -A[i + 1] : 0, mod), mod);
  }
  for (int i = 1; i < D; ++i) {
    (mat + i * D)[i - 1] = 1;
  }
  for (int i = 0; i < D; ++i) {
    res[i] = result[m - i];
  }

  for (int64 t = n - m; t > 0; t >>= 1) {
    if (t & 1) {
      MatMulVecMod(mat, res, tmp, mod, static_cast<int>(D));
      std::swap(res, tmp);
    }
    if (t > 1) {
      MatMulMatMod(mat, mat, tmp, mod, static_cast<int>(D));
      std::swap(mat, tmp);
    }
  }
  return res[0];
#endif
}

// Finds the coefficient of x^n of f such that: A*f = B
// Returns -1 if there is no integer solution.
// O(MatrixMultiplicationComplexity(size(A)) * log n) for big n
SL int64 GfAt(const NModPoly& A, const NModPoly& B, const int64 n) {
  return GfAt(A.data, B.data, n, A.mod);
}

namespace internal {
// If the following equations holds for all n
//
// A[n] * M[K] + A[n-1] * M[K-1] + ... + A[n-K] * M[0] = 0
// M[K] = 1
//
// sequence A is linear recurrence with minimal polynomial M of order K.

// Returns the minimal polynomial of a linear recurrence sequence.
//
// Berlekamp Massey
// (https://en.wikipedia.org/wiki/Berlekamp%E2%80%93Massey_algorithm)
//
// This implementation can handle the case that terms[0] has no contribution to
// the sequence. i.e. result[0] == 0
SL std::vector<int64> FindLinearRecurrence(Span<const int64> terms,
                                           const int64 mod) {
  const int m = static_cast<int>(std::size(terms));
  const int n = m >> 1;
  PE_ASSERT(n * 2 == m);

  std::vector<int64> r0(m + 1, 0);
  r0[m] = 1;

  std::vector<int64> r1(std::size(terms));
  for (int i = 0; i < m; ++i) {
    r1[i] = terms[m - 1 - i];
  }
  AdjustPolyLeadingZero(r1);
  std::vector<int64> v0 = {0};
  std::vector<int64> v1 = {1};

  while (n + 1 <= std::size(r1)) {
    auto [q, r] = PolyDivAndMod(r0, r1, mod);
    std::vector<int64> v = PolySub(v0, PolyMul(q, v1, mod), mod);
    v0 = std::move(v1);
    v1 = std::move(v);
    r0 = std::move(r1);
    r1 = std::move(r);
  }

  int64 c = ModInv(v1.back(), mod);
  for (int64& v : v1) v = MulMod(c, v, mod);

  return v1;
}
}  // namespace internal

SL int64 ApplyLinearRecurrenceNext(const std::vector<int64>& min_poly,
                                   Span<const int64> terms, int64 mod) {
  PE_ASSERT(std::size(terms) + 1 >= static_cast<int64>(std::size(min_poly)));

  const int m = static_cast<int>(std::size(min_poly));
  const int idx = static_cast<int>(std::size(terms));

  int64 ret = 0;
  for (int j = 0; j < m - 1; ++j) {
    ret = SubMod(ret, MulMod(min_poly[j], terms[idx - (m - j - 1)], mod), mod);
  }
  return ret;
}

SL int64 ApplyLinearRecurrenceValueAtN(const std::vector<int64>& min_poly,
                                       Span<const int64> terms, int64 n,
                                       int64 mod) {
  if (n < static_cast<int64>(std::size(terms))) {
    return terms[static_cast<int>(n)];
  }

  std::vector<int64> r = {1};
  {
    std::vector<int64> x = {0, 1};
    for (; n > 0; n >>= 1) {
      if (n & 1) {
        r = PolyMod(PolyMul(x, r, mod), min_poly, mod);
      }
      if (n > 1) {
        x = PolyMod(PolyMul(x, x, mod), min_poly, mod);
      }
    }
  }
  const int64 m = static_cast<int64>(std::size(r)) - 1;
  int64 ans = 0;
  for (int64 i = 0; i <= m; ++i) {
    ans = AddMod(ans, MulMod(terms[i], r[i], mod), mod);
  }
  return ans;
}

SL int64 PartialSumAt(Span<const int64> terms, int64 n, int64 mod) {
  int64 ret = 0;
  for (int i = 0; i <= n; ++i) {
    ret = AddMod(ret, terms[i], mod);
  }
  return ret;
}

template <typename T>
SL T PartialSumAt(Span<const T> terms, int64 n) {
  T ret = 0;
  for (int i = 0; i <= n; ++i) {
    ret += terms[i];
  }
  return ret;
}

// Returns sum(terms[i], 0 <= i <= n).
SL int64 ApplyLinearRecurrenceSumAtN(const std::vector<int64>& min_poly,
                                     Span<const int64> terms, int64 n,
                                     int64 mod) {
  if (n < static_cast<int>(std::size(terms))) {
    return PartialSumAt(terms, n, mod);
  }

  PE_ASSERT(std::size(terms) + 1 >= static_cast<int64>(std::size(min_poly)));

  const int m = static_cast<int>(std::size(min_poly));
  std::vector<int64> sum(m, 0);
  std::vector<int64> values;
  values.reserve(m);
  for (int i = 0; i < m; ++i) {
    int64 t = 0;
    if (i < m - 1) {
      t = terms[i];
    } else {
      t = ApplyLinearRecurrenceNext(min_poly, values, mod);
    }
    if (i < std::size(terms)) {
      PE_ASSERT(t == terms[i]);
    }
    values.push_back(t);
    sum[i] = i == 0 ? t : AddMod(sum[i - 1], t, mod);
  }

  std::vector<int64> min_poly_s =
      PolySub(PolyShiftLeft(min_poly, 1), min_poly, mod);

  return ApplyLinearRecurrenceValueAtN(min_poly_s, sum, n, mod);
}

SL int VerifyLinearRecurrence(Span<const int64> terms,
                              const std::vector<int64>& min_poly, int64 mod) {
  int order = static_cast<int>(std::size(min_poly)) - 1;
  for (int i = static_cast<int>(std::size(min_poly)) - 1; i < std::size(terms);
       ++i) {
    int64 value = ApplyLinearRecurrenceNext(
        min_poly, terms.subspan(i - order, order), mod);
    if (value != Mod(terms[i], mod)) {
      return 0;
    }
  }
  return 1;
}

SL std::optional<std::vector<int64>> FindLinearRecurrence(
    Span<const int64> terms, int64 mod, int min_use = 2) {
  const int len = static_cast<int>(std::size(terms));
  for (int n = (std::max(min_use, 2) + 1) / 2 * 2; n < len; n += 2) {
    std::vector<int64> min_poly =
        internal::FindLinearRecurrence(terms.subspan(0, n), mod);
    if (VerifyLinearRecurrence(terms, min_poly, mod)) {
      return min_poly;
    }
  }
  return std::nullopt;
}

SL std::optional<int64> LinearRecurrenceValueAtN(Span<const int64> terms,
                                                 int64 n, int64 mod,
                                                 int min_use = 2) {
  if (n < static_cast<int64>(std::size(terms))) {
    return terms[static_cast<int>(n)];
  }

  std::optional<std::vector<pe::int64>> min_poly =
      FindLinearRecurrence(terms, mod, min_use);
  if (min_poly.has_value()) {
    return ApplyLinearRecurrenceValueAtN(*min_poly, terms, n, mod);
  }
  return std::nullopt;
}

SL std::optional<std::vector<int64>> LinearRecurrenceValues(
    Span<const int64> terms, int64 n, int64 mod, int min_use = 2) {
  std::optional<std::vector<pe::int64>> min_poly =
      FindLinearRecurrence(terms, mod, min_use);
  if (!min_poly.has_value()) {
    return std::nullopt;
  }

  const int64 m = static_cast<int64>(std::size(terms));
  std::vector<int64> data(m);
  for (int i = 0; i < m; ++i) {
    data[i] = terms[i];
  }
  for (int64 i = m; i <= n; ++i) {
    int64 value = ApplyLinearRecurrenceNext(*min_poly, data, mod);
    data.push_back(value);
  }
  return data;
}

template <typename T = int64>
class SeqExpr {
 public:
  enum Type { NUMBER = 0, OFFSET = 1, MUL = 2, ADD = 3, SUB = 4 };

  SeqExpr() = default;

  static SeqExpr Number(T value) {
    SeqExpr t;
    t.type_ = NUMBER;
    t.value_ = value;
    return t;
  }
  static SeqExpr Offset(int offset) {
    SeqExpr t;
    t.type_ = OFFSET;
    t.offset_ = offset;
    return t;
  }

  friend SeqExpr operator*(T a, const SeqExpr& b) {
    SeqExpr result;
    result.type_ = MUL;
    result.children_.push_back(Number(a));
    result.children_.push_back(b);
    return result;
  }

  friend SeqExpr operator*(const SeqExpr& a, T b) {
    SeqExpr result;
    result.type_ = MUL;
    result.children_.push_back(Number(b));
    result.children_.push_back(a);
    return result;
  }

  friend SeqExpr operator+(const SeqExpr& a, const SeqExpr& b) {
    SeqExpr result;
    result.type_ = ADD;
    result.children_.push_back(a);
    result.children_.push_back(b);
    return result;
  }

  friend SeqExpr operator+(T a, const SeqExpr& b) {
    SeqExpr result;
    result.type_ = ADD;
    result.children_.push_back(Number(a));
    result.children_.push_back(b);
    return result;
  }

  friend SeqExpr operator+(const SeqExpr& a, T b) {
    SeqExpr result;
    result.type_ = ADD;
    result.children_.push_back(a);
    result.children_.push_back(Number(b));
    return result;
  }

  friend SeqExpr operator-(const SeqExpr& a, const SeqExpr& b) {
    SeqExpr result;
    result.type_ = SUB;
    result.children_.push_back(a);
    result.children_.push_back(b);
    return result;
  }

  friend SeqExpr operator-(T a, const SeqExpr& b) {
    SeqExpr result;
    result.type_ = SUB;
    result.children_.push_back(Number(a));
    result.children_.push_back(b);
    return result;
  }

  friend SeqExpr operator-(const SeqExpr& a, T b) {
    SeqExpr result;
    result.type_ = SUB;
    result.children_.push_back(a);
    result.children_.push_back(Number(b));
    return result;
  }

  std::vector<int64> Evaluate(int64 mod) const {
    switch (type_) {
      case NUMBER:
        return {Mod(value_, mod)};
      case OFFSET: {
        int pos = Abs(offset_);
        std::vector<int64> t(pos + 1);
        t[pos] = 1;
        return t;
      }
      case ADD: {
        std::vector<int64> result;
        for (const auto& item : children_) {
          std::vector<int64> t = item.Evaluate(mod);
          if (result.empty()) {
            result = t;
          } else {
            while (result.size() < t.size()) result.push_back(0);
            for (int i = 0; i < t.size(); ++i)
              result[i] = AddMod(result[i], t[i], mod);
          }
        }
        return result;
      }
      case SUB: {
        std::vector<int64> result;
        for (const auto& item : children_) {
          std::vector<int64> t = item.Evaluate(mod);
          if (result.empty()) {
            result = t;
          } else {
            while (result.size() < t.size()) result.push_back(0);
            for (int i = 0; i < t.size(); ++i)
              result[i] = MulMod(result[i], t[i], mod);
          }
        }
        return result;
      }
      case MUL: {
        int64 c = children_[0].Evaluate(mod)[0];
        std::vector<int64> result = children_[1].Evaluate(mod);
        for (auto& iter : result) iter = MulMod(iter, c, mod);
        return result;
      }
    }
    return {};
  }

  std::vector<T> Evaluate() const {
    switch (type_) {
      case NUMBER:
        return {value_};
      case OFFSET: {
        int pos = Abs(offset_);
        std::vector<T> t(pos + 1);
        t[pos] = 1;
        return t;
      }
      case ADD: {
        std::vector<T> result;
        for (const auto& item : children_) {
          std::vector<T> t = item.Evaluate();
          if (result.empty()) {
            result = t;
          } else {
            while (result.size() < t.size()) result.push_back(0);
            for (int i = 0; i < t.size(); ++i) result[i] += t[i];
          }
        }
        return result;
      }
      case SUB: {
        std::vector<T> result;
        for (const auto& item : children_) {
          std::vector<T> t = item.Evaluate();
          if (result.empty()) {
            result = t;
          } else {
            while (result.size() < t.size()) result.push_back(0);
            for (int i = 0; i < t.size(); ++i) result[i] = result[i] * t[i];
          }
        }
        return result;
      }
      case MUL: {
        T c = children_[0].Evaluate()[0];
        std::vector<T> result = children_[1].Evaluate();
        for (auto& iter : result) iter *= c;
        return result;
      }
    }
    return {};
  }

  std::vector<T> ToMinPoly() const {
    std::vector<T> seq_relation = Evaluate();
    if (!seq_relation.empty()) {
      PE_ASSERT(seq_relation[0] == 0);
    }
    std::vector<T> min_poly;
    for (int i = 1; i < std::size(seq_relation); ++i) {
      min_poly.push_back(-seq_relation[i]);
    }
    min_poly.push_back(1);
    return min_poly;
  }

  std::vector<int64> ToMinPoly(int64 mod) const {
    std::vector<int64> seq_relation = Evaluate(mod);
    if (!seq_relation.empty()) {
      PE_ASSERT(seq_relation[0] == 0);
    }
    std::vector<int64> min_poly;
    for (int i = 1; i < std::size(seq_relation); ++i) {
      min_poly.push_back(SubMod(0, seq_relation[i], mod));
    }
    min_poly.push_back(1);
    return min_poly;
  }

  int64 ValueAtWithMinPoly(Span<const int64> terms, int64 n, int64 mod) const;
  int64 SumAtWithMinPoly(Span<const int64> terms, int64 n, int64 mod) const;
  int64 ValueAt(Span<const int64> terms, int64 n, int64 mod) const;
  int64 SumAt(Span<const int64> terms, int64 n, int64 mod) const;

  T ValueAt(Span<const T> terms, int64 n) const;
  T SumAt(Span<const T> terms, int64 n) const;

  std::vector<int64> Generate(Span<const int64> terms, int64 n,
                              int64 mod) const {
    const int64 need = n + 1;
    std::vector<int64> ret(need);
    const int64 m = std::min<int64>(need, terms.size());
    for (int64 i = 0; i < m; ++i) {
      ret[i] = terms[i];
    }

    if (need > m) {
      std::vector<int64> seq_relation = Evaluate(mod);
      PE_ASSERT(std::size(seq_relation) > 0);
      PE_ASSERT(std::size(terms) + 1 >= std::size(seq_relation));
      for (int64 i = m; i < need; ++i) {
        int64 val = seq_relation[0];
        for (int j = 1; j < seq_relation.size(); ++j) {
          val = AddMod(val, MulMod(seq_relation[j], ret[i - j], mod), mod);
        }
        ret[i] = val;
      }
    }
    return ret;
  }

  std::vector<T> Generate(Span<const T> terms, int64 n) const {
    const int64 need = n + 1;
    std::vector<T> ret(need);
    const int64 m = std::min<int64>(need, terms.size());
    for (int64 i = 0; i < m; ++i) {
      ret[i] = terms[i];
    }

    if (need > m) {
      std::vector<T> seq_relation = Evaluate();
      PE_ASSERT(std::size(seq_relation) > 0);
      PE_ASSERT(std::size(terms) + 1 >= std::size(seq_relation));
      for (int64 i = m; i < need; ++i) {
        T val = seq_relation[0];
        for (int j = 1; j < seq_relation.size(); ++j) {
          val += seq_relation[j] * ret[i - j];
        }
        ret[i] = val;
      }
    }
    return ret;
  }

 private:
  Type type_ = NUMBER;
  int offset_ = 0;
  T value_ = 0;
  std::vector<SeqExpr> children_;
};

template <typename T = int64>
class Sequence {
 public:
  SeqExpr<T> operator[](int offset) const {
    return SeqExpr<T>::Offset(Abs(offset));
  }
  SeqExpr<T> operator()(int offset) const {
    return SeqExpr<T>::Offset(Abs(offset));
  }
};

template <typename T>
int64 SeqExpr<T>::ValueAtWithMinPoly(Span<const int64> terms, int64 n,
                                     int64 mod) const {
  if (n < static_cast<int64>(std::size(terms))) {
    return terms[static_cast<int>(n)];
  }

  return ApplyLinearRecurrenceValueAtN(ToMinPoly(mod), terms, n, mod);
}

template <typename T>
int64 SeqExpr<T>::SumAtWithMinPoly(Span<const int64> terms, int64 n,
                                   int64 mod) const {
  if (n < static_cast<int>(std::size(terms))) {
    return PartialSumAt(terms, n, mod);
  }
  return ApplyLinearRecurrenceSumAtN(ToMinPoly(mod), terms, n, mod);
}

template <typename T>
int64 SeqExpr<T>::ValueAt(Span<const int64> terms, int64 n, int64 mod) const {
  if (n < static_cast<int64>(std::size(terms))) {
    return terms[static_cast<int>(n)];
  }

  std::vector<int64> seq_relation = Evaluate(mod);
  PE_ASSERT(std::size(seq_relation) > 0);
  PE_ASSERT(std::size(terms) + 1 >= std::size(seq_relation));
  const int d = static_cast<int>(std::size(seq_relation)) - 1;
  if (seq_relation[0] == 0) {
    return MatrixPowerMod(
        [&](auto& m, auto& v) {
          for (int i = 0; i < d; ++i) {
            m(0, i) = seq_relation[i + 1];
          }
          for (int i = 1; i < d; ++i) {
            m(i, i - 1) = 1;
          }
          for (int i = 0; i < d; ++i) {
            v[i] = terms[d - 1 - i];
          }
        },
        d, n, mod)[d - 1];
  } else {
    return MatrixPowerMod(
        [&](auto& m, auto& v) {
          for (int i = 0; i < d; ++i) {
            m(0, i) = seq_relation[i + 1];
          }
          m(0, d) = 1;
          for (int i = 1; i < d; ++i) {
            m(i, i - 1) = 1;
          }
          m(d, d) = 1;
          for (int i = 0; i < d; ++i) {
            v[i] = terms[d - 1 - i];
          }
          v[d] = seq_relation[0];
        },
        d + 1, n, mod)[d - 1];
  }
}

template <typename T>
int64 SeqExpr<T>::SumAt(Span<const int64> terms, int64 n, int64 mod) const {
  if (n < static_cast<int>(std::size(terms))) {
    return PartialSumAt(terms, n, mod);
  }

  std::vector<int64> seq_relation = Evaluate(mod);
  PE_ASSERT(std::size(seq_relation) > 0);
  PE_ASSERT(std::size(terms) + 1 >= std::size(seq_relation));
  const int d = static_cast<int>(std::size(seq_relation)) - 1;
  if (seq_relation[0] == 0) {
    return MatrixPowerMod(
        [&](auto& m, auto& v) {
          for (int i = 0; i < d; ++i) {
            m(0, i) = seq_relation[i + 1];
          }
          for (int i = 1; i < d; ++i) {
            m(i, i - 1) = 1;
          }
          m(d, d - 1) = 1;
          m(d, d) = 1;
          for (int i = 0; i < d; ++i) {
            v[i] = terms[d - 1 - i];
          }
          v[d] = 0;
        },
        d + 1, n + 1, mod)[d];
  } else {
    return MatrixPowerMod(
        [&](auto& m, auto& v) {
          for (int i = 0; i < d; ++i) {
            m(0, i) = seq_relation[i + 1];
          }
          m(0, d) = 1;
          for (int i = 1; i < d; ++i) {
            m(i, i - 1) = 1;
          }
          m(d, d) = 1;
          m(d + 1, d - 1) = 1;
          m(d + 1, d + 1) = 1;
          for (int i = 0; i < d; ++i) {
            v[i] = terms[d - 1 - i];
          }
          v[d] = seq_relation[0];
          v[d + 1] = 0;
        },
        d + 2, n + 1, mod)[d + 1];
  }
}

template <typename T>
T SeqExpr<T>::ValueAt(Span<const T> terms, int64 n) const {
  if (n < static_cast<int64>(std::size(terms))) {
    return terms[static_cast<int>(n)];
  }

  std::vector<T> seq_relation = Evaluate();
  PE_ASSERT(std::size(seq_relation) > 0);
  PE_ASSERT(std::size(terms) + 1 >= std::size(seq_relation));
  const int d = static_cast<int>(std::size(seq_relation)) - 1;
  if (seq_relation[0] == T(0)) {
    return MatrixPower<T>(
        [&](auto& m, auto& v) {
          for (int i = 0; i < d; ++i) {
            m(0, i) = seq_relation[i + 1];
          }
          for (int i = 1; i < d; ++i) {
            m(i, i - 1) = 1;
          }
          for (int i = 0; i < d; ++i) {
            v[i] = terms[d - 1 - i];
          }
        },
        d, n)[d - 1];
  } else {
    return MatrixPower<T>(
        [&](auto& m, auto& v) {
          for (int i = 0; i < d; ++i) {
            m(0, i) = seq_relation[i + 1];
          }
          m(0, d) = 1;
          for (int i = 1; i < d; ++i) {
            m(i, i - 1) = 1;
          }
          m(d, d) = 1;
          for (int i = 0; i < d; ++i) {
            v[i] = terms[d - 1 - i];
          }
          v[d] = seq_relation[0];
        },
        d + 1, n)[d - 1];
  }
}

template <typename T>
T SeqExpr<T>::SumAt(Span<const T> terms, int64 n) const {
  if (n < static_cast<int>(std::size(terms))) {
    return PartialSumAt(terms, n);
  }

  std::vector<T> seq_relation = Evaluate();
  PE_ASSERT(std::size(seq_relation) > 0);
  PE_ASSERT(std::size(terms) + 1 >= std::size(seq_relation));
  const int d = static_cast<int>(std::size(seq_relation)) - 1;
  if (seq_relation[0] == T(0)) {
    return MatrixPower<T>(
        [&](auto& m, auto& v) {
          for (int i = 0; i < d; ++i) {
            m(0, i) = seq_relation[i + 1];
          }
          for (int i = 1; i < d; ++i) {
            m(i, i - 1) = 1;
          }
          m(d, d - 1) = 1;
          m(d, d) = 1;
          for (int i = 0; i < d; ++i) {
            v[i] = terms[d - 1 - i];
          }
          v[d] = 0;
        },
        d + 1, n + 1)[d];
  } else {
    return MatrixPower<T>(
        [&](auto& m, auto& v) {
          for (int i = 0; i < d; ++i) {
            m(0, i) = seq_relation[i + 1];
          }
          m(0, d) = 1;
          for (int i = 1; i < d; ++i) {
            m(i, i - 1) = 1;
          }
          m(d, d) = 1;
          m(d + 1, d - 1) = 1;
          m(d + 1, d + 1) = 1;
          for (int i = 0; i < d; ++i) {
            v[i] = terms[d - 1 - i];
          }
          v[d] = seq_relation[0];
          v[d + 1] = 0;
        },
        d + 2, n + 1)[d + 1];
  }
}
}  // namespace pe
#endif
