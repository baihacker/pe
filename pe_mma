#ifndef PE_MMA_
#define PE_MMA_

#include <utility>

#include "pe_base"
#include "pe_nt"

// InterpolatingPolynomial
struct IntPoly {
  IntPoly() = default;

  void reset(const vector<string>& variables) {
    n = static_cast<int>(variables.size());
  }

  void add(const vector<int64>& p, int64 v) {
    const int len = static_cast<int>(p.size());
    if (n == 0) {
      n = len;
    } else {
      PE_ASSERT(n == len);
    }
    auto where = vals.find(p);
    if (where != vals.end()) {
      PE_ASSERT(where->second == v);
    } else {
      vals[p] = v;
    }
  }

  ostream& to_stream(ostream& o) const {
    o << "InterpolatingPolynomial[{";
    int idx = 0;
    for (auto& iter : vals) {
      if (++idx >= 2) {
        o << ", ";
      }
      o << "{";
      pprint_vec(o, iter.first);
      o << ", " << iter.second << "}";
    }
    o << "}, ";
    auto var = variables;
    if (sz(var) < n) {
      var.resize(n);
      for (int i = 0; i < n; ++i) {
        char tmp[2] = {static_cast<char>('a' + i)};
        var[i] = tmp;
      }
    }
    pprint_vec(o, var);

    return o << "]";
  }

  vector<string> variables;
  map<vector<int64>, int64> vals;
  int n = 0;
};

ostream& operator<<(ostream& o, const IntPoly& ip) { return ip.to_stream(o); }

struct IntPoly2D {
  IntPoly2D(int n1 = 1, int n2 = -1, int n3 = -1) { reset(n1, n2, n3); }

  void reset(const vector<string>& vars, int n1, int n2 = -1, int n3 = -1) {
    this->vars = vars;
    reset(n1, n2, n3);
  }
  void reset(int n1, int n2 = -1, int n3 = -1) {
    PE_ASSERT(n1 >= 0);
    if (n2 == -1) {
      n2 = n1;
    }
    if (n3 == -1) {
      n3 = n1;
    }
    this->n1 = n1;
    this->n2 = n2;
    this->n3 = n3;
    vcnt = 0;
    symbols.resize(0);
    for (int i = 0; i <= n1; ++i) {
      for (int j = 0; j <= n2; ++j) {
        if (i == 0 || j == 0 || i + j <= n3) {
          ++vcnt;
          symbols.pb(format(i, j));
        }
      }
    }
  }

  string format(int a, int b) {
    if (a == 0) return format(vars[1], b);
    if (b == 0) return format(vars[0], a);
    return format(vars[0], a) + " " + format(vars[1], b);
  }

  string format(string s, int a) {
    if (a == 0) {
      return "1";
    } else if (a == 1) {
      return s;
    } else {
      return s + "^" + to_string(a);
    }
  }

  int64 eval(int64 v1, int64 v2, int a, int b) const {
    return power(v1, a) * power(v2, b);
  }

  void add(const vector<int64>& p, int64 v) {
    const int len = static_cast<int>(p.size());
    PE_ASSERT(len == 2);
    auto where = vals.find(p);
    if (where != vals.end()) {
      PE_ASSERT(where->second == v);
    } else {
      vals[p] = v;
    }
  }

  ostream& show(ostream& o, const vector<int64>& v) {
    const int len = static_cast<int>(v.size());
    PE_ASSERT(vcnt == len);
    int id = 0;
    for (int i = 0; i < vcnt; ++i)
      if (v[i] != 0) {
        int64 coe = v[i];
        int sgn = coe > 0 ? 1 : -1;
        if (coe < 0) {
          coe = -coe;
        }

        if (sgn > 0) {
          if (id > 0) {
            o << " + ";
          }
        } else {
          if (id > 0) {
            o << " - ";
          } else {
            o << "-";
          }
        }
        //           coe
        //         1     not 1
        // sym
        //  1      1     coe
        // not 1   sym   coe sym
        if (symbols[i] == "1") {
          o << coe;
        } else {
          if (coe != 1) {
            o << coe << " ";
          }
          o << symbols[i];
        }
        ++id;
      }
    return o;
  }

  ostream& to_stream(ostream& o) const {
    o << "Values[Solve[{";
    int idx = 0;
    for (auto& iter : vals) {
      if (++idx >= 2) {
        o << " && ";
      }
      int id = 0;
      for (int i = 0; i <= n1; ++i) {
        for (int j = 0; j <= n2; ++j) {
          if (i == 0 || j == 0 || i + j <= n3) {
            if (id > 0) {
              o << " + ";
            }
            o << eval(iter.first[0], iter.first[1], i, j) << " "
              << string("x") + to_string(id++);
          }
        }
      }
      o << " == " << iter.second;
    }
    o << "}, ";
    vector<string> vars;
    vars.reserve(vcnt);
    for (int i = 0; i < vcnt; ++i) vars.pb(string("x") + to_string(i));
    pprint_vec(o, vars);
    return o << "]]";
  }

  int n1, n2, n3;
  int vcnt;
  map<vector<int64>, int64> vals;
  vector<string> vars{"x", "y"};
  vector<string> symbols;
};

ostream& operator<<(ostream& o, const IntPoly2D& ip) { return ip.to_stream(o); }

namespace mma_compiler {
// Shared enum to indicate a token or a node type
enum TokenOrNodeType {
  ROOT,
  NUMBER,
  VAR,
  FUN,
  // FAC,
  POW,
  POS,
  NEG,
  // REV,
  MUL,
  DIV,
  ADD,
  SUB,
  // SHL,
  // SHR,
  // GT,
  // LT,
  // GTE,
  // LTE,
  // EQU,
  // NEQ,
  // AND,
  // XOR,
  // OR,
  // ASSIGN,
  // END,
  LEFT_BRACKET,
  RIGHT_BRACKET,
  EOI,
  // COMMA,
  UNKNOWN_TOKEN,
};

int priority[] = {
    65535,
    5,
    5,
    5,
    // 400,
    7,
    10,
    10,
    // 10,
    20,
    20,
    30,
    30,
    // 40,
    // 40,
    // 50,
    // 50,
    // 50,
    // 50,
    // 60,
    // 60,
    // 70,
    // 80,
    // 90,
    // 100,
    // 200,
    400,
    400,
    65533,
    // 65534,
    65535,
};

struct MmaExpTree {
  MmaExpTree *parent, *left, *right;

  int nodeType;
  string token;
  int64 value;
  int iid;  // internal id for removing duplicated tree.

  MmaExpTree(MmaExpTree* p = nullptr, MmaExpTree* l = nullptr,
             MmaExpTree* r = nullptr)
      : parent(p), left(l), right(r) {}

  ~MmaExpTree() = default;

  static void destroyTree(MmaExpTree* tree) {
    if (!tree) return;
    destroyTree(tree->left);
    destroyTree(tree->right);
    delete tree;
  }

  ostream& display(ostream& o) {
    if (nodeType == VAR || nodeType == NUMBER) {
      return o << token;
    }
    o << "(";

    o << token;
    o << ",";
    if (left) left->display(o);
    o << ",";
    if (right) right->display(o);

    return o << ")";
  }
};

struct MmaExpParser {
  map<string, int64> vars;
  map<string, int64> funs;

  string expression;
  int lastcurr;
  int curr;

  MmaExpParser() {
    /*
      funs["min"] = 1;
      funs["max"] = 1;
      funs["sum"] = 1;
      funs["print"] = 1;
      funs["input"] = 1;
      funs["while"] = 1;
      funs["select"] = 1;
      funs["sequence"] = 1;
    */
  }

  int operatorNumber(int /*t*/) {
    // if (t == FAC) return -1;
    // if (t == REV) return 1;
    return 2;
  }

  int nextToken(string& token) {
    token = "";
    lastcurr = curr;
    while (expression[curr] != 0 && expression[curr] == ' ') ++curr;
    if (expression[curr] == 0) return EOI;

    if (isdigit(expression[curr])) {
      while (isdigit(expression[curr])) token += expression[curr++];
      return NUMBER;
    }
    if (isalpha(expression[curr])) {
      while (isalpha(expression[curr])) token += expression[curr++];
      if (funs.find(token) != funs.end()) return FUN;
      return VAR;
    }
    switch (expression[curr]) {
      case '+':
        token = expression[curr++];
        return ADD;
      case '-':
        token = expression[curr++];
        return SUB;
      case '*':
        token = expression[curr++];
        return MUL;
      case '/':
        token = expression[curr++];
        return DIV;
      /**
      case '~':
        token = expression[curr++];
        return REV;
      case '&':
        token = expression[curr++];
        return AND;
      case '|':
        token = expression[curr++];
        return OR;
      */
      case '(':
        token = expression[curr++];
        return LEFT_BRACKET;
      case ')':
        token = expression[curr++];
        return RIGHT_BRACKET;
      case '^':
        token = expression[curr++];
        return POW;
      /**
      case ',':
        token = expression[curr++];
        return COMMA;
      case ';':
        token = expression[curr++];
        return END;
      case '^':
        token = expression[curr++];
        return XOR;
      case '!': {
        token = expression[curr++];
        if (expression[curr] == '=') {
          token = token + "=";
          ++curr;
          return NEG;
        }
        return FAC;
      }
      case '=': {
        token = expression[curr++];
        if (expression[curr] == '=') {
          token = token + "=";
          ++curr;
          return EQU;
        }
        return ASSIGN;
      }
      case '>': {
        token = expression[curr++];
        if (expression[curr] == '=') {
          token = token + "=";
          ++curr;
          return GTE;
        } else if (expression[curr] == '>') {
          token = token + ">";
          ++curr;
          return SHR;
        }
        return GT;
      }
      case '<': {
        token = expression[curr++];
        if (expression[curr] == '=') {
          token = token + "=";
          ++curr;
          return LTE;
        } else if (expression[curr] == '<') {
          token = token + "<";
          ++curr;
          return SHL;
        }
        return LT;
      }
      */
      default:
        return UNKNOWN_TOKEN;
    }
  }

  MmaExpTree* parse() {
    auto* vt = new MmaExpTree(nullptr, nullptr, nullptr);
    MmaExpTree* build = vt;
    vt->nodeType = ROOT;
    // = 0, an operand is expected, build is the node of the operator whose
    // operand is missing.
    // = 1, an operator is expected, build is the last building node of
    // the last operand of the previous expression.
    // the last operand is [suffix unary operators]* operand [postfix unary
    // operators]* where operand can have bracket. The last building node is the
    // node corresponds to the operand of the last unary operator.
    int state = 0;
    string token;
    for (int t = nextToken(token); token != ";" && token != ")" && token != "";
         t = nextToken(token)) {
      if (state == 0) {
        if (t == NUMBER) {
          build = new MmaExpTree(build, nullptr, nullptr);
          build->nodeType = NUMBER;
          build->token = token;
          build->value = atoll(token.c_str());
          build->parent->right = build;
          state = 1;
        } else if (t == VAR) {
          vars[token] = 0;
          build = new MmaExpTree(build, nullptr, nullptr);
          build->nodeType = VAR;
          build->token = token;
          build->parent->right = build;
          state = 1;
        } else if (t == FUN) {
          build = new MmaExpTree(build, nullptr, nullptr);
          build->nodeType = FUN;
          build->token = token;
          build->parent->right = build;
        } /* else if (t == REV) {
           build = new MmaExpTree(build, 0, 0);
           build->nodeType = REV;
           build->parent->right = build;
         }*/
        else if (t == LEFT_BRACKET) {
          MmaExpTree* x = parse();
          if (x) {
            x->parent = build;
            build->right = x;
            if (build->nodeType != FUN) {
              build = x;
            }
          }
          state = 1;
        } else if (t == ADD) {
          // Leading +
        } else if (t == SUB) {
          // Leading -
          build = new MmaExpTree(build, nullptr, nullptr);
          build->nodeType = NEG;
          build->token = token;
          build->parent->right = build;
        } else {
          cerr << "error 1" << endl;
        }
      } else {
        /*if (t == FAC) {
          auto* x = new MmaExpTree(0, 0, 0);
          x->nodeType = FAC;
          build = build->parent;
          x->left = build->right;
          build->right->parent = x;
          build->right = x;
          x->parent = build;
          build = x;
        } else {*/
        auto* x = new MmaExpTree(nullptr, nullptr);
        x->nodeType = t;
        x->token = token;
        if (t == NUMBER || t == VAR || t == FUN || t == LEFT_BRACKET) {
          delete x;
          x = new MmaExpTree(nullptr, nullptr);
          x->nodeType = MUL;
          x->token = "*";
          t = MUL;
          curr = lastcurr;
        }
        PE_ASSERT(build->nodeType != ROOT);
        build = build->parent;
        if (/*t == ASSIGN || */ t == POW) {  // right association
          while (priority[t] > priority[build->nodeType]) build = build->parent;
        } else {  // left association
          while (priority[t] >= priority[build->nodeType])
            build = build->parent;
        }
        x->left = build->right;
        build->right->parent = x;

        build->right = x;
        x->parent = build;

        build = x;
        state = 0;
        // }
      }
    }
    MmaExpTree* result = vt->right;
    delete vt;
    if (result) result->parent = nullptr;
    return result;
  }

  MmaExpTree* parse(const string& expression) {
    this->expression = expression;
    lastcurr = curr = 0;
    return parse();
  }

  /**
  void getExpressionList(MmaExpTree* tree, vector<MmaExpTree*>& result) {
    if (!tree) return;
    if (tree->nodeType == COMMA) {
      getExpressionList(tree->left, result);
      result.push_back(tree->right);
    } else {
      result.push_back(tree);
    }
  }

  int evalue(MmaExpTree* tree) {
    if (tree->nodeType == NUMBER) {
      return tree->value;
    } else if (tree->nodeType == VAR) {
      return tree->value = vars[tree->token];
    } else if (tree->nodeType == FUN) {
      vector<MmaExpTree*> para;
      getExpressionList(tree->right, para);
      if (tree->token == "min") {
        if (para.size() == 0) return tree->value = 0;
        int ans = evalue(para[0]);
        for (int i = 1; i < para.size(); ++i) {
          int t = evalue(para[i]);
          if (t < ans) ans = t;
        }
        return tree->value = ans;
      } else if (tree->token == "max") {
        if (para.size() == 0) return tree->value = 0;
        int ans = evalue(para[0]);
        for (int i = 1; i < para.size(); ++i) {
          int t = evalue(para[i]);
          if (t > ans) ans = t;
        }
        return tree->value = ans;
      } else if (tree->token == "sum") {
        int ans = 0;
        for (int i = 0; i < para.size(); ++i) {
          ans += evalue(para[i]);
        }
        return tree->value = ans;
      } else if (tree->token == "input") {
        for (int i = 0; i < para.size(); ++i) {
          vars[para[i]->token] = input_seq[curr_read++];
        }
        return tree->value = para.size();
      } else if (tree->token == "print") {
        for (int i = 0; i < para.size(); ++i) {
          printf("%d\n", evalue(para[i]));
        }
        if (para.size() == 0) puts("");
        return tree->value = para.size();
      } else if (tree->token == "while") {
        int ans = 0;
        while (evalue(para[0])) ans = evalue(para[1]);
        return tree->value = ans;
      } else if (tree->token == "select") {
        int value = evalue(para[0]);
        if (value)
          return tree->value = evalue(para[1]);
        else
          return tree->value = evalue(para[2]);
      } else if (tree->token == "sequence") {
        if (para.size() == 0) return tree->value = 0;
        int x;
        for (int i = 0; i < para.size(); ++i) x = evalue(para[i]);
        return tree->value = x;
      }
      cerr << "error 2" << endl;
    } else if (tree->nodeType == FAC) {
      int value = evalue(tree->left);
      int ans = 1;
      for (int i = 1; i <= value; ++i) ans *= i;
      return tree->value = ans;
    } else if (tree->nodeType == REV) {
      int value = evalue(tree->right);
      return tree->value = ~value;
    } else if (tree->nodeType == NEG) {
      int value = evalue(tree->right);
      return tree->value = -value;
    } else if (tree->nodeType == ASSIGN) {
      return tree->value = vars[tree->left->token] = evalue(tree->right);
    } else {
      int x = evalue(tree->left), y = evalue(tree->right);
      switch (tree->nodeType) {
        case MUL:
          return tree->value = x * y;
        case DIV:
          return tree->value = x / y;
        case ADD:
          return tree->value = x + y;
        case SUB:
          return tree->value = x - y;
        case SHL:
          return tree->value = x << y;
        case SHR:
          return tree->value = x >> y;
        case GT:
          return tree->value = x > y;
        case GTE:
          return tree->value = x >= y;
        case LT:
          return tree->value = x < y;
        case LTE:
          return tree->value = x <= y;
        case EQU:
          return tree->value = x == y;
        case NEG:
          return tree->value = x != y;
        case ADD:
          return tree->value = x & y;
        case XOR:
          return tree->value = x ^ y;
        case OR:
          return tree->value = x | y;
      }
    }
    cerr << "error 3" << endl;
  }
  */
};

struct MmaExpCompiler {
  map<string, int> expToId;
  set<string> varset;
  vector<string> vars;
  vector<string> result;
  void compileImpl(MmaExpTree* tree, int has_mod = 1) {
    char buff[512];
    switch (tree->nodeType) {
      case NUMBER:
      case VAR:
        sprintf(buff, "%s", tree->token.c_str());
        break;
      case NEG:
        compileImpl(tree->right, has_mod);
        sprintf(buff, "(mod - t%d)", tree->right->iid);
        break;
      case ADD:
      case MUL: {
        compileImpl(tree->left, has_mod);
        compileImpl(tree->right, has_mod);
        int a = tree->left->iid;
        int b = tree->right->iid;
        if (a > b) swap(a, b);
        if (tree->nodeType == ADD) {
          sprintf(buff, "(t%d + t%d)", a, b);
        } else {
          sprintf(buff, "(t%d * t%d)", a, b);
        }
        break;
      }
      case SUB:
      case DIV:
      case POW: {
        compileImpl(tree->left);
        int a = tree->left->iid;
        if (tree->nodeType == SUB) {
          compileImpl(tree->right, has_mod);
          int b = tree->right->iid;
          sprintf(buff, "(t%d - t%d)", a, b);
        } else if (tree->nodeType == DIV) {
          compileImpl(tree->right, has_mod);
          int b = tree->right->iid;
          sprintf(buff, "t%d * inv_of(t%d, mod)", a, b);
        } else {
          compileImpl(tree->right, 0);
          int b = tree->right->iid;
          sprintf(buff, "power_mod_ex(t%d, t%d, mod)", a, b);
        }
        break;
      }
    }
    string myExpr = buff;
    if (tree->nodeType == VAR) {
      if (varset.count(myExpr) == 0) {
        varset.insert(myExpr);
        vars.push_back(myExpr);
      }
    }
    if (has_mod) {
      myExpr += " % mod";
      if (tree->nodeType == SUB) {
        myExpr = "(mod + " + myExpr + ") % mod";
      }
    }
    myExpr += ";";
    auto where = expToId.find(myExpr);
    if (where == expToId.end()) {
      int iid = static_cast<int>(expToId.size());
      expToId[myExpr] = iid;
      tree->iid = iid;
      sprintf(buff, "  const int64 t%d = %s", iid, myExpr.c_str());
      result.emplace_back(buff);
    } else {
      tree->iid = where->second;
    }
  }

  void compile(MmaExpTree* tree, const string& funName) {
    compileImpl(tree);
    int iid = tree->iid;
    char buff[512];
    sprintf(buff, "  return t%d;", iid);
    result.emplace_back(buff);

    sprintf(buff, "int64 %s(", funName.c_str());
    string t = buff;
    for (auto& iter : vars) {
      t += string("int64 ") + iter + string(", ");
    }
    t += "int64 mod) {";
    result.insert(result.begin(), t);
    result.emplace_back("}");
  }
};

vector<string> compile(const string& s, const string& funName = "foo") {
  MmaExpParser parser;
  auto t = parser.parse(s);
  MmaExpCompiler compiler;
  compiler.compile(t, funName);
  MmaExpTree::destroyTree(t);
  return compiler.result;
}
}  // namespace mma_compiler
#endif
