#ifndef PE_ARRAY_
#define PE_ARRAY_

#include "pe_base"
#include "pe_memory"

template <typename T, int D>
struct DArrayRef;

/**
 * T: element type
 * D: dimention length
 * A: allocator
 */
template <typename T, int D, typename A = StdAllocator>
struct DArray : public DArrayRef<T, D> {
  template <typename TT, int DD>
  friend struct DArrayRef;

  using base = DArrayRef<T, D>;
  template <class... Args>
  DArray(const vector<int64>& dimension, Args&&... arg)
      : dimension(dimension), base(NULL, 0, NULL, NULL) {
    Init(arg...);
    PE_ASSERT(dimension.size() == D);
  }

  DArray() : base(NULL, 0, NULL, NULL) {
    dimension = vector<int64>(D, 1);
    Init();
    PE_ASSERT(dimension.size() == D);
  }

  DArray(const DArray&) = delete;
  DArray(DArray&&) = delete;

  DArray& operator=(const DArray&) = delete;
  DArray& operator=(DArray&&) = delete;

  ~DArray() { Clear(); }

  template <class... Args>
  void Reset(const vector<int64>& dimension, Args&&... arg) {
    Clear();
    this->dimension = dimension;
    Init(arg...);
  }

  template <class... Args>
  void Init(Args&&... arg) {
    const int d = (int)dimension.size();
    elementCounts.clear();
    elementCounts.push_back(1);
    for (int i = d - 1; i >= 0; --i) {
      elementCounts.push_back(elementCounts.back() * dimension[i]);
    }
    reverse(elementCounts.begin(), elementCounts.end());
    elementCount = elementCounts[0];
    base::dimension = &dimension[0];
    base::elementCounts = &elementCounts[0];
    base::data_ = (T*)A::Allocate(elementCount * sizeof(T));
    for (int64 i = 0; i < elementCount; ++i) {
      new (base::data_ + i) T(arg...);
    }
  }

  void Clear() {
    for (int64 i = 0; i < elementCount; ++i) {
      (base::data_ + i)->~T();
    }
    A::Deallocate(base::data_);
  }

  T* data() { return base::data_; }

  DArrayRef<T, D> Ref() {
    return DArrayRef<T, D>(base::data_, 0, base::dimension,
                           base::elementCounts);
  }

 private:
  vector<int64> dimension;
  vector<int64> elementCounts;
  int64 elementCount;
};

template <typename T, int D>
struct DArrayRef {
  using ValueType = DArrayRef<T, D - 1>;
  using ConstValueType = DArrayRef<T, D - 1>;

  DArrayRef(T* data_, int off, const int64* dimension,
            const int64* elementCounts)
      : data_(data_),
        off(off),
        dimension(dimension),
        elementCounts(elementCounts) {}

  DArrayRef<T, D - 1> operator[](int64 idx) const {
    return DArrayRef<T, D - 1>(data_ + idx * elementCounts[off + 1], off + 1,
                               dimension, elementCounts);
  }

 protected:
  T* data_;
  const int off;
  const int64* elementCounts;
  const int64* dimension;
};

template <typename T>
struct DArrayRef<T, 1> {
  using ValueType = T&;
  using ConstValueType = const T&;

  DArrayRef(T* data_, int off, const int64* dimension,
            const int64* elementCounts)
      : data_(data_),
        off(off),
        dimension(dimension),
        elementCounts(elementCounts) {}

  T& operator[](int64 idx) { return data_[idx]; }
  ConstValueType operator[](int64 idx) const { return data_[idx]; }

 protected:
  T* data_;
  const int off;
  const int64* elementCounts;
  const int64* dimension;
};

template <int64... X>
struct ArrayShape;

template <int64 H, int64... X>
struct ArrayShape<H, X...> {
  using Next = ArrayShape<X...>;
  const static int64 D = 1 + Next::D;
  const static int64 EC = H * Next::EC;
};

template <int64 H>
struct ArrayShape<H> {
  const static int64 D = 1;
  const static int64 EC = H;
};

template <typename T, typename S>
struct FArrayRef;

/**
 * T: element type
 * S: array shape
 * A: allocator
 */
template <typename T, typename S, typename A = StdAllocator>
struct FArray : public FArrayRef<T, S> {
  using base = FArrayRef<T, S>;

  template <class... Args>
  FArray(Args&&... arg) : base(NULL) {
    Init(arg...);
  }

  FArray(const FArray&) = delete;
  FArray(FArray&&) = delete;

  FArray& operator=(const FArray&) = delete;
  FArray& operator=(FArray&&) = delete;

  ~FArray() { Clear(); }

  template <class... Args>
  void Init(Args&&... arg) {
    base::data_ = (T*)A::Allocate(S::EC * sizeof(T));
    for (int64 i = 0; i < S::EC; ++i) {
      new (base::data_ + i) T(arg...);
    }
  }

  void Clear() {
    for (int64 i = 0; i < S::EC; ++i) {
      (base::data_ + i)->~T();
    }
    A::Deallocate(base::data_);
  }

  T* data() { return base::data_; }

  FArrayRef<T, S> Ref() { return FArrayRef<T, S>(base::data_); }
};

template <typename T, typename S>
struct FArrayRef {
  using NextShape = typename S::Next;
  using ValueType = FArrayRef<T, NextShape>;
  using ConstValueType = FArrayRef<T, NextShape>;

  FArrayRef(T* data_) : data_(data_) {}

  FArrayRef<T, NextShape> operator[](int64 idx) const {
    return FArrayRef<T, NextShape>(data_ + idx * NextShape::EC);
  }

 protected:
  T* data_;
};

template <typename T, int64 H>
struct FArrayRef<T, ArrayShape<H>> {
  using ValueType = T&;
  using ConstValueType = const T&;

  FArrayRef(T* data_) : data_(data_) {}

  ValueType operator[](int64 idx) { return data_[idx]; }
  ConstValueType operator[](int64 idx) const { return data_[idx]; }

 protected:
  T* data_;
};

/**
 * T: element type
 * X: the count of each dimention
 */
template <typename T, int64... X>
using Array = FArray<T, ArrayShape<X...>>;

/**
 * T: element type
 * A: allocator
 * X: the count of each dimention
 */
template <typename T, typename A, int64... X>
using AArray = FArray<T, ArrayShape<X...>, A>;
#endif