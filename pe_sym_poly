#ifndef PE_SYM_POLY_
#define PE_SYM_POLY_

#include "pe_base"

// TermKey.size() == 0, constant term.
// The elements are sorted.
using TermKey = std::vector<std::pair<std::string, int>>;

template <typename CT>
SL std::map<TermKey, CT> parseSymPolyTerms(const string& s);

template <typename CT>
struct SymPoly;

template <typename CT>
SL ostream& to_string(const SymPoly<CT>& sp, ostream& o, int cstyle = 0,
                      int showMul = 0);

template <typename CT>
struct SymPoly {
  SymPoly() = default;

  SymPoly(const std::map<TermKey, CT>& terms) : terms_(terms) {
    fixCoefficient();
  }

  SymPoly(std::map<TermKey, CT>&& terms) : terms_(terms) { fixCoefficient(); }

  SymPoly(const SymPoly& o) : terms_(o.terms_) {}

  SymPoly(SymPoly&& o) noexcept : terms_(std::move(o.terms_)) {}

  SymPoly(const string& str) : terms_(parseSymPolyTerms<CT>(str)) {
    fixCoefficient();
  }

  SymPoly(CT v) {
    if (v != 0) {
      terms_[{}] = v;
    }
  }

  SymPoly& operator=(const SymPoly& o) {
    terms_ = o.terms_;
    return *this;
  }

  SymPoly& operator=(SymPoly&& o) noexcept {
    terms_ = std::move(o.terms_);
    return *this;
  }

  void fixCoefficient() {
    auto now = std::begin(terms_);
    auto end = std::end(terms_);
    while (now != end) {
      if (now->second == 0) {
        terms_.erase(now++);
      } else {
        ++now;
      }
    }
  }

  SymPoly power(int n) const {
    SymPoly<CT> t;
    t.terms_[{}] = 1;
    SymPoly<CT> x(this->terms_);
    for (; n; n >>= 1) {
      if (n & 1) t = t * x;
      if (n > 1) x = x * x;
    }
    return t;
  }

  SymPoly replace(string var, const SymPoly<CT>& target) const {
    std::map<TermKey, CT> resultTerms;
    for (const auto& iter : terms_) {
      int found = 0;
      const int size = sz(iter.first);
      for (int i = 0; i < size; ++i)
        if (iter.first[i].first == var) {
          SymPoly t = target.power(iter.first[i].second);
          SymPoly k;
          TermKey others;
          for (int j = 0; j < size; ++j)
            if (j != i) {
              others.push_back(iter.first[j]);
            }
          k.terms_[others] = iter.second;
          for (const auto& i : (k * t).terms_) {
            resultTerms[i.first] += i.second;
          }
          found = 1;
          break;
        }
      if (!found) {
        resultTerms[iter.first] += iter.second;
      }
    }
    return SymPoly(resultTerms);
  }

  SymPoly replace(string var, const string& target) const {
    return replace(var, SymPoly(target));
  }

  string to_string(int cstyle = 1, int showMul = 0) const {
    stringstream ss;
    ::to_string(*this, ss, cstyle, showMul);
    return ss.str();
  }

  const std::map<TermKey, CT>& terms() const { return terms_; }

 private:
  // TermKey -> coefficient.
  // terms_.size() == 0: value
  std::map<TermKey, CT> terms_;
};

using SymPoly64 = SymPoly<int64>;

template <typename CT>
SL SymPoly<CT> operator+(const SymPoly<CT>& a, const SymPoly<CT>& b) {
  auto terms = a.terms_;
  for (const auto& iter : b.terms_) {
    terms[iter.first] += iter.second;
  }
  return SymPoly<CT>(terms);
}

template <typename CT>
SL SymPoly<CT> operator-(const SymPoly<CT>& a, const SymPoly<CT>& b) {
  auto terms = a.terms_;
  for (const auto& iter : b.terms_) {
    terms[iter.first] -= iter.second;
  }
  return SymPoly<CT>(terms);
}

template <typename CT>
SL TermKey mergeTermKey(const TermKey& a, const TermKey& b) {
  if (a.size() == 0) return b;
  if (b.size() == 0) return a;
  std::map<std::string, int> terms;
  for (const auto& iter : a) terms[iter.first] += iter.second;
  for (const auto& iter : b) terms[iter.first] += iter.second;
  TermKey result;
  result.reserve(terms.size());
  for (const auto& iter : terms) result.emplace_back(iter.first, iter.second);
  return result;
}

template <typename CT>
SL SymPoly<CT> operator*(const SymPoly<CT>& a, const SymPoly<CT>& b) {
  std::map<TermKey, CT> terms;
  for (const auto& iter1 : a.terms())
    for (const auto& iter2 : b.terms()) {
      terms[mergeTermKey<CT>(iter1.first, iter2.first)] +=
          iter1.second * iter2.second;
    }
  return SymPoly<CT>(terms);
}

// [+- ]*
SL vector<int> parseSgnList(const string& s, int& i) {
  const int size = static_cast<int>(s.size());
  vector<int> sgns;
  for (;;) {
    while (i < size && std::isspace(s[i])) ++i;
    if (i < size && (s[i] == '+' || s[i] == '-')) {
      sgns.push_back(s[i] == '+' ? 1 : -1);
      ++i;
    } else {
      return sgns;
    }
  }
}

SL string parseDigList(const string& s, int& i) {
  const int size = static_cast<int>(s.size());
  while (i < size && std::isspace(s[i])) ++i;
  if (i < size && std::isdigit(s[i])) {
    int start = i;
    while (i < size && std::isdigit(s[i])) {
      ++i;
    }
    return s.substr(start, i - start);
  }
  return "";
}

SL string parseIdentifier(const string& s, int& i) {
  const int size = static_cast<int>(s.size());
  while (i < size && std::isspace(s[i])) ++i;
  if (i < size && (s[i] == '_' || std::isalpha(s[i]))) {
    int start = i;
    while (i < size &&
           (s[i] == '_' || std::isdigit(s[i]) || std::isalpha(s[i]))) {
      ++i;
    }
    return s.substr(start, i - start);
  }
  return "";
}

SL std::vector<std::pair<string, string>> parseSingleTermList(const string& s,
                                                              int& i) {
  std::vector<std::pair<string, string>> result;
  const int size = static_cast<int>(s.size());
  for (;;) {
    while (i < size && std::isspace(s[i])) ++i;
    if (s[i] == '*') {
      ++i;
      while (i < size && std::isspace(s[i])) ++i;
    }
    string variable = parseIdentifier(s, i);
    if (variable.empty()) variable = parseDigList(s, i);
    if (variable.empty()) return result;
    while (i < size && std::isspace(s[i])) ++i;
    if (i < size && (s[i] == '^' && !std::isdigit(variable[0]))) {
      ++i;
      string e = parseDigList(s, i);
      result.emplace_back(variable, e);
    } else {
      result.emplace_back(variable, "");
    }
  }
}

template <typename CT>
SL CT evalDigs(const vector<int>& sgns, const string& digs, CT defaultVal = 0) {
  int s = 1;
  for (const auto& iter : sgns)
    if (iter == -1) s = -s;
  CT v = 0;
  for (const auto& iter : digs) v = v * 10 + iter - '0';
  if (digs.empty()) v = defaultVal;
  return s == 1 ? v : -v;
}

template <typename CT>
SL std::pair<TermKey, CT> evalSingleTermList(
    const std::vector<std::pair<string, string>>& singleTerms) {
  std::map<std::string, int> t;
  CT c = 1;
  for (const auto& iter : singleTerms) {
    if (std::isdigit(iter.first[0])) {
      c *= evalDigs<int>({}, iter.first, 1);
    } else {
      t[iter.first] += evalDigs<int>({}, iter.second, 1);
    }
  }
  TermKey key;
  for (const auto& iter : t) key.emplace_back(iter.first, iter.second);
  return {key, c};
}

template <typename CT>
SL std::pair<TermKey, CT> parseTerm(const string& s, int& i) {
  auto sgns = parseSgnList(s, i);
  auto singleTerms = parseSingleTermList(s, i);
  auto t = evalSingleTermList<CT>(singleTerms);
  auto sgn = evalDigs<CT>(sgns, "", 1);
  return {t.first,
          singleTerms.empty() ? CT(0) : (sgn == 1 ? t.second : -t.second)};
}

template <typename CT>
SL std::pair<TermKey, CT> parseTerm(const string& s) {
  int i = 0;
  return parseTerm<CT>(s, i);
}

template <typename CT>
SL std::map<TermKey, CT> parseSymPolyTerms(const string& s) {
  const int size = sz(s);
  int i = 0;
  std::map<TermKey, CT> terms;
  for (;;) {
    while (i < size && std::isspace(s[i])) ++i;
    int j = i;
    auto t = parseTerm<CT>(s, i);
    if (j == i) {
      if (i < size) {
        cerr << "Unknown: " << s.substr(i) << endl;
      }
      break;
    }
    terms[t.first] += t.second;
  }
  return terms;
}

template <typename CT>
SL SymPoly<CT> parseSymPoly(const string& s) {
  return SymPoly<CT>(parseSymPolyTerms<CT>(s));
}

SL TermKey termKey(const string& s) {
  int i = 0;
  return parseTerm<int64>(s, i).first;
}

SL ostream& to_string(const TermKey& vpv, ostream& o, int cstyle = 1,
                      int showMul = 0) {
  int idx = 0;
  for (const auto& iter : vpv) {
    if (++idx > 1) {
      o << (showMul ? " * " : " ");
    }
    if (iter.second == 1) {
      o << iter.first;
    } else {
      if (cstyle) {
        o << "power(" << iter.first << ", " << iter.second << ")";
      } else {
        o << iter.first << "^" << iter.second;
      }
    }
  }
  return o;
}

template <typename CT>
SL ostream& to_string(const SymPoly<CT>& sp, ostream& o, int cstyle,
                      int showMul) {
  if (cstyle) showMul = 1;
  int idx = 0;
  for (const auto& iter : sp.terms()) {
    if (iter.second == 0) continue;
    ++idx;
    int out = idx == 1 ? 0 : 1;
    int hasNum = 0;
    if (iter.second > 0) {
      if (idx > 1) {
        if (out) o << " ";
        o << "+";
        out = 1;
      }
    } else {
      if (out) o << " ";
      o << "-";
      out = 1;
    }
    if (abs(iter.second) != 1 || iter.first.empty()) {
      if (out) o << " ";
      o << abs(iter.second);
      out = 1;
      hasNum = 1;
    }
    if (iter.first.size() > 0) {
      if (out) o << (showMul && hasNum ? " * " : " ");
      to_string(iter.first, o, cstyle, showMul);
      out = 1;
    }
  }
  if (idx == 0) {
    o << "0";
  }
  return o;
}

template <typename CT>
SL ostream& operator<<(ostream& o, const SymPoly<CT>& sp) {
  return to_string(sp, o);
}

#endif