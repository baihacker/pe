#ifndef PE_RAND_
#define PE_RAND_

#include "pe_base"
#include "pe_nt"

// C-style random number generator
// ANSI_ISO_9899-1999: The value of the RAND_MAX macro shall be at least 32767.
// We assume RAND_MAX is either 32767 or 2147483647
#if RAND_MAX == 32767

SL int CRandBit() { return rand() & 1; }
SL int CRand15() { return rand(); }
SL int CRand31() { return CRand15() << 16 | CRand15() << 1 | CRandBit(); }
SL int64 CRand63() {
  return static_cast<int64>(CRand31()) << 32 |
         static_cast<uint32>(CRand31()) << 1 | CRandBit();
}

SL int CRandI() { return CRand31(); }
SL double CRandD() {
  static const double coe = 1. / (RAND_MAX + 1);
  return coe * rand();
}

#elif RAND_MAX == 2147483647

SL int CRandBit() { return rand() & 1; }
SL int CRand15() { return rand() & 32767; }
SL int CRand32() { return rand(); }
SL int64 CRand63() {
  return (int64)CRand32() << 32 | (uint32)CRand32() << 1 | CRandBit();
}

SL int CRandI() { return CRand32(); }
SL double CRandD() {
  static const double coe = 1. / ((int64)RAND_MAX + 1LL);
  return coe * rand();
}

#else

#error "RAND_MAX should be either 32767 or 2147483647"

#endif

// C++ style random number generator
template <typename RE, typename DS>
class RandomGenerator {
 public:
  RandomGenerator(const RE& engine, const DS& distribution)
      : random_engine_(engine), distribution_(distribution) {}
  int operator()() { return distribution_(random_engine_); }

 private:
  RE random_engine_;
  DS distribution_;
};

RandomGenerator<std::mt19937, uniform_int_distribution<int>> SL
MakeUniformGenerator(int seed, int min, int max) {
  PE_ASSERT(min <= max);
  return RandomGenerator<std::mt19937, uniform_int_distribution<int>>(
      std::mt19937(seed), std::uniform_int_distribution<int>(min, max));
}

RandomGenerator<std::mt19937, uniform_int_distribution<int>> SL
MakeUniformGenerator(int min, int max) {
  std::random_device rd;
  PE_ASSERT(min <= max);
  return RandomGenerator<std::mt19937, uniform_int_distribution<int>>(
      std::mt19937(rd()), std::uniform_int_distribution<int>(min, max));
}

template <typename ET, typename RT>
SL void Halton(ET idx, const int n, RT* result) {
  fill(result, result + n, 0);
  vector<RT> prime_inv(n, 0);
  vector<ET> t(n, idx);
  for (int i = 0; i < n; ++i) prime_inv[i] = static_cast<RT>(1. / plist[i]);
  for (ET sum = n * idx; sum > 0;) {
    for (int i = 0; i < n; ++i) {
      const auto d = t[i] % plist[i];
      result[i] += d * prime_inv[i];
      prime_inv[i] /= plist[i];
      sum -= t[i];
      t[i] /= plist[i];
      sum += t[i];
    }
  }
}

template <typename ET, typename RT>
SL vector<RT> Halton(ET idx, const int n) {
  return Halton<ET, RT>(idx, n);
}

/**
 * The idx_th n-dimension vector.
 */
SL vector<double> Halton(int64 idx, const int n) {
  vector<double> r(n, 0);
  Halton(idx, n, &r[0]);
  return r;
}
#endif
