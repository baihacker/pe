#ifndef PE_SPAN_
#define PE_SPAN_

#include "pe_base"
#include "pe_type_traits"

namespace pe {
// Also see MinGW-x86_64_14.1.0-msys2/include/c++/14.1.0/span.
template <typename T>
class Span {
 public:
  using element_type = typename pe_element_type_traits<T>::element_type;
  using non_const_element_type =
      typename pe_element_type_traits<T>::non_const_element_type;
  using const_element_type =
      typename pe_element_type_traits<T>::const_element_type;
  using pointer = typename pe_element_type_traits<T>::pointer;
  using value_type = typename pe_element_type_traits<T>::value_type;
  using reference = typename pe_element_type_traits<T>::reference;
  using const_reference = typename pe_element_type_traits<T>::const_reference;
  using const_element_access_type =
      typename pe_element_type_traits<T>::const_element_access_type;
  using element_access_type =
      typename pe_element_type_traits<T>::element_access_type;

  class iterator;
  class const_iterator;

 public:
  constexpr Span() noexcept : p(nullptr), n(0) {}

  constexpr Span(const Span&) noexcept = default;

  constexpr Span(std::initializer_list<non_const_element_type> init) noexcept
      : p(std::data(init)), n(std::size(init)) {}

  constexpr Span(pointer ptr, int64 n) noexcept : p(ptr), n(n) {}

  template <int64 N>
  constexpr Span(const non_const_element_type (&a)[N]) noexcept
      : Span(&a[0], N) {}

  template <int64 N>
  constexpr Span(non_const_element_type (&a)[N]) noexcept : Span(&a[0], N) {}

  constexpr Span(const std::vector<value_type>& v) noexcept
      : Span(&v[0], static_cast<int64>(std::size(v))) {}

  constexpr Span(std::vector<value_type>& v) noexcept
      : Span(&v[0], static_cast<int64>(std::size(v))) {}

  constexpr Span(std::vector<value_type>&& v) noexcept
      : Span(&v[0], static_cast<int64>(std::size(v))) {}

  constexpr Span(std::vector<value_type>&& v, int) noexcept = delete;

  template <std::size_t N>
  constexpr Span(const std::array<value_type, N>& v) noexcept
      : Span(&v[0], static_cast<int64>(std::size(v))) {}

  template <std::size_t N>
  constexpr Span(std::array<value_type, N>& v) noexcept
      : Span(&v[0], static_cast<int64>(std::size(v))) {}

  template <std::size_t N>
  constexpr Span(std::array<value_type, N>&& v) noexcept
      : Span(&v[0], static_cast<int64>(std::size(v))) {}

  template <std::size_t N>
  constexpr Span(std::array<value_type, N>&& v, int) noexcept = delete;

  ~Span() noexcept = default;

  constexpr Span& operator=(const Span&) noexcept = default;

  constexpr int64 size() const noexcept { return this->n; }

  constexpr int64 size_bytes() const noexcept { return this->n * sizeof(T); }

  constexpr bool empty() const noexcept { return size() == 0; }

  constexpr element_access_type front() const noexcept {
    PE_ASSERT(!empty());
    return *this->p;
  }

  constexpr element_access_type back() const noexcept {
    PE_ASSERT(!empty());
    return *(this->p + (size() - 1));
  }

  constexpr element_access_type operator[](int64 idx) const noexcept {
    // PE_ASSERT(idx < size());
    return *(this->p + idx);
  }

  constexpr element_access_type at(int64 idx) const {
    PE_ASSERT(idx < size());
    return *(this->p + idx);
  }

  constexpr pointer data() const noexcept { return this->p; }

  // iterator support
  struct IteratorBase {
    bool operator==(const IteratorBase& o) const {
      return this->iter_ == o.iter_;
    }
    bool operator!=(const IteratorBase& o) const {
      return !(this->operator==(o));
    }
    pointer iter_;
  };

  struct iterator : public IteratorBase {
    using difference_type = int64;
    using value_type = value_type;
    using reference = element_access_type;
    using const_reference = const_element_access_type;

    element_access_type operator*() const { return *this->iter_; }
    iterator& operator++() {
      ++this->iter_;
      return *this;
    }

    iterator operator++(int) { return iterator{this->iter_++}; }

    iterator& operator--() {
      --this->iter_;
      return *this;
    }

    iterator operator--(int) { return iterator{this->iter_--}; }
  };

  struct const_iterator : public iterator {
    using reference = const_element_access_type;
    using const_reference = const_element_access_type;
    const_element_access_type operator*() const { return *this->iter_; }
  };

  struct ReversedIterator : public IteratorBase {
    using difference_type = int64;
    using value_type = value_type;

    element_access_type operator*() { return *this->iter_; }
    ReversedIterator& operator++() {
      --this->iter_;
      return *this;
    }

    ReversedIterator operator++(int) { return ReversedIterator{this->iter_--}; }

    ReversedIterator& operator--() {
      ++this->iter_;
      return *this;
    }

    ReversedIterator operator--(int) { return ReversedIterator{this->iter_++}; }
  };
  struct ConstReversedIterator : public ReversedIterator {
    const_element_access_type operator*() const { return *this->iter_; }
  };

  constexpr iterator begin() const noexcept { return iterator{this->p}; }

  constexpr iterator end() const noexcept {
    return iterator{this->p + this->size()};
  }

  constexpr const_iterator cbegin() const noexcept {
    return const_iterator{this->p};
  }

  constexpr const_iterator cend() const noexcept {
    return const_iterator{this->p + this->size()};
  }

  constexpr ReversedIterator rbegin() const noexcept {
    return ReversedIterator{this->p + this->size() - 1};
  }

  constexpr ReversedIterator rend() const noexcept {
    return ReversedIterator{this->p - 1};
  }

  constexpr ConstReversedIterator crbegin() const noexcept {
    return ConstReversedIterator{this->p + this->size() - 1};
  }

  constexpr ConstReversedIterator crend() const noexcept {
    return ConstReversedIterator{this->p - 1};
  }

  struct IndexedValue {
    int64 i;
    element_access_type v;
  };
  struct ConstIndexedValue {
    int64 i;
    const_element_access_type v;
  };
  struct IndexedIteratorBase {
    bool operator==(const IndexedIteratorBase& o) const {
      return this->base_ == o.base_ && this->iter_ == o.iter_;
    }
    bool operator!=(const IndexedIteratorBase& o) const {
      return !(this->operator==(o));
    }
    pointer base_;
    int64 iter_;
  };
  struct IndexedIterator : public IndexedIteratorBase {
    IndexedValue operator*() const {
      return {this->iter_, *(this->base_ + this->iter_)};
    }
    IndexedIterator& operator++() {
      ++this->iter_;
      return *this;
    }

    IndexedIterator operator++(int) {
      return IndexedIterator{this->base_, this->iter_++};
    }

    IndexedIterator& operator--() {
      --this->iter_;
      return *this;
    }

    IndexedIterator operator--(int) {
      return IndexedIterator{this->base_, this->iter_--};
    }
  };

  struct ConstIndexedIterator : public IndexedIterator {
    ConstIndexedValue operator*() const {
      return {this->iter_, *(this->base_ + this->iter_)};
    }
  };

  struct ItemBase {
    pointer p;
    int64 n;
  };
  struct ItemImpl : public ItemBase {
    IndexedIterator begin() { return {this->p, 0}; }
    IndexedIterator end() { return {this->p, this->n}; }
  };
  struct ConstItemImpl : public ItemBase {
    ConstIndexedIterator begin() { return {this->p, 0}; }
    ConstIndexedIterator end() { return {this->p, this->n}; }
  };

  ItemImpl Item() const { return {p, n}; }
  ConstItemImpl CItem() const { return {p, n}; }

  struct ReversedIndexedIterator {
    IndexedValue operator*() const {
      return {this->iter_, *(this->base_ - this->iter_)};
    }
    bool operator==(const ReversedIndexedIterator& o) const {
      return this->base_ == o.base_ && this->iter_ == o.iter_;
    }
    bool operator!=(const ReversedIndexedIterator& o) const {
      return !(this->operator==(o));
    }
    ReversedIndexedIterator& operator++() {
      ++this->iter_;
      return *this;
    }

    ReversedIndexedIterator operator++(int) {
      return ReversedIndexedIterator{this->base_, this->iter_++};
    }

    ReversedIndexedIterator& operator--() {
      --this->iter_;
      return *this;
    }

    ReversedIndexedIterator operator--(int) {
      return ReversedIndexedIterator{this->base_, this->iter_--};
    }

    pointer base_;
    int64 iter_;
  };
  struct ConstReversedIndexedIterator : public ReversedIndexedIterator {
    ConstIndexedValue operator*() const {
      return {this->iter_, *(this->base_ - this->iter_)};
    }
  };

  struct ReversedItemImpl : public ItemBase {
    ReversedIndexedIterator begin() { return {this->p + this->n - 1, 0}; }
    ReversedIndexedIterator end() { return {this->p + this->n - 1, n}; }
  };
  struct ConstReversedItemImpl : public ItemBase {
    ConstReversedIndexedIterator begin() { return {this->p + this->n - 1, 0}; }
    ConstReversedIndexedIterator end() {
      return {this->p + this->n - 1, this->n};
    }
  };

  ReversedItemImpl RItem() const { return {p, n}; }
  ConstReversedItemImpl CRItem() const { return {p, n}; }

  // subviews
  constexpr Span<T> first(int64 count) const noexcept {
    PE_ASSERT(count <= this->size());
    return {this->data(), count};
  }

  constexpr Span<T> last(int64 count) const noexcept {
    PE_ASSERT(count <= this->size());
    return {this->data() + (this->size() - count), count};
  }

  constexpr Span<T> subspan(int64 offset) const noexcept {
    PE_ASSERT(offset <= this->size());
    return {this->data() + offset, this->size() - offset};
  }

  constexpr Span<T> subspan(int64 offset, int64 count) const noexcept {
    PE_ASSERT(offset <= this->size());
    PE_ASSERT(count <= this->size());
    PE_ASSERT(offset + count <= this->size());
    return {this->data() + offset, count};
  }

  pointer p;
  int64 n;
};

template <typename T>
class CSpan : public Span<std::add_const_t<T>> {
 public:
  using base = Span<std::add_const_t<T>>;
  using MutableSpan = Span<std::remove_const_t<T>>;
  using ConstSpan = Span<std::add_const_t<T>>;
  using base::Span;
  CSpan(MutableSpan other) : base(other.data(), other.size()) {}
  CSpan(ConstSpan other) : base(other.data(), other.size()) {}
};

template <typename T>
SL std::ostream& operator<<(std::ostream& o, Span<T> v) {
  const int64 size = std::size(v);
  int64 id = 0;
  o << "{";
  for (const auto& iter : v) {
    o << iter;
    if (++id < size) {
      o << ", ";
    }
  }
  return o << "}";
}

template <typename T>
Span<const T> MakeSpan(const std::vector<T>& v) {
  return Span<const T>(v);
}

template <typename T>
Span<T> MakeSpan(std::vector<T>& v) {
  return Span<T>(v);
}

template <typename T>
Span<T> MakeSpan(std::vector<T>&& v) {
  // Intentionally call the deleted constructor.
  return Span<T>(std::move(v), 0);
}

template <typename T, std::size_t N>
Span<const T> MakeSpan(const std::array<T, N>& v) {
  return Span<const T>(v);
}

template <typename T, std::size_t N>
Span<T> MakeSpan(std::array<T, N>& v) {
  return Span<T>(v);
}

template <typename T, std::size_t N>
Span<T> MakeSpan(std::array<T, N>&& v) {
  // Intentionally call the deleted constructor.
  return Span<T>(std::move(v), 0);
}

template <typename T, int64 N>
Span<const T> MakeSpan(const T (&a)[N]) {
  return Span<const T>(a);
}

template <typename T, int64 N>
Span<T> MakeSpan(T (&a)[N]) {
  return Span<T>(a);
}

template <typename T>
Span<T> MakeSpan(T* a, int64 N) {
  return Span<T>(a, N);
}

template <typename T>
struct AdaptToSpanTransform {
  using Type = T;
  enum { value = false };
};

template <typename T>
struct AdaptToSpanTransform<std::vector<T>&> {
  using Type = Span<T>;
  enum { value = true };
};

template <typename T>
struct AdaptToSpanTransform<std::vector<T>&&> {
  using Type = Span<T>;
  enum { value = true };
};

template <typename T>
struct AdaptToSpanTransform<const std::vector<T>&> {
  using Type = Span<const T>;
  enum { value = true };
};

template <typename T>
struct AdaptToSpanTransform<const std::vector<T>&&> {
  using Type = Span<const T>;
  enum { value = true };
};

template <typename T, std::size_t N>
struct AdaptToSpanTransform<std::array<T, N>&> {
  using Type = Span<T>;
  enum { value = true };
};

template <typename T, std::size_t N>
struct AdaptToSpanTransform<std::array<T, N>&&> {
  using Type = Span<T>;
  enum { value = true };
};

template <typename T, std::size_t N>
struct AdaptToSpanTransform<const std::array<T, N>&> {
  using Type = Span<const T>;
  enum { value = true };
};

template <typename T, std::size_t N>
struct AdaptToSpanTransform<const std::array<T, N>&&> {
  using Type = Span<const T>;
  enum { value = true };
};

template <typename T, int64 N>
struct AdaptToSpanTransform<T (&)[N]> {
  using Type = Span<T>;
  enum { value = true };
};

template <typename T, int64 N>
struct AdaptToSpanTransform<const T (&)[N]> {
  using Type = Span<const T>;
  enum { value = true };
};

template <typename T>
using AdaptToSpanTransformT = typename AdaptToSpanTransform<T>::Type;

#define ADAPT_TO_SPAN(func)                                                   \
  template <typename... Args>                                                 \
  auto func(Args&&... args)                                                   \
      -> REQUIRES((pe::predicate_any_v<AdaptToSpanTransform, Args&&...>))     \
          RETURN(decltype(func(                                               \
              AdaptToSpanTransformT<Args&&>(std::forward<Args>(args))...))) { \
    return func(AdaptToSpanTransformT<Args&&>(std::forward<Args>(args))...);  \
  }

template <typename T>
struct span_like_impl<Span<T>> {
  using element_type = T;
  using non_const_element_type = std::remove_const_t<T>;
  using const_element_type = std::add_const_t<T>;
  enum {
    value = true,
    is_element_type_const = std::is_same_v<element_type, const_element_type>
  };
};

template <typename T>
struct span_like_impl<CSpan<T>> {
  using element_type = std::add_const_t<T>;
  using non_const_element_type = std::remove_const_t<T>;
  using const_element_type = std::add_const_t<T>;
  enum {
    value = true,
    is_element_type_const = std::is_same_v<element_type, const_element_type>
  };
};

}  // namespace pe
#endif