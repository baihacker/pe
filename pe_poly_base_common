#ifndef PE_POLY_BASE_COMMON_
#define PE_POLY_BASE_COMMON_

#include "pe_base"
#include "pe_type_traits"
#include "pe_int"
#include "pe_extended_int"
#include "pe_mod"
#include "pe_nt"
#include "pe_parallel"

namespace pe {

#if PE_HAS_INT128
using PolyMulCoeType = uint128;
#else
using PolyMulCoeType = uint128e;
#endif

template <typename T>
constexpr SL int PolyMulAcceptLengthAndValue(const PolyMulCoeType& mod, int64 n,
                                             T max_value1, T max_value2) {
  using PT = int_promotion_t<PolyMulCoeType, T>;
  return mod == 0 || PT(1) * max_value1 * max_value2 * n < PT(mod);
}

template <typename T>
constexpr SL int PolyMulAcceptLengthAndValue(const PolyMulCoeType& mod, int64 n,
                                             T max_value1, int64 m,
                                             T max_value2) {
  return PolyMulAcceptLengthAndValue(mod, std::min(n, m), max_value1,
                                     max_value2);
}

template <typename T>
constexpr SL int PolyMulAcceptLengthAndMod(const PolyMulCoeType& mod, int64 n,
                                           T mod1) {
  PE_ASSERT(mod1 > 0);
  return PolyMulAcceptLengthAndValue(mod, n, mod1 - 1, mod1 - 1);
}

template <typename T>
constexpr SL int PolyMulAcceptLengthAndMod(const PolyMulCoeType& mod, int64 n,
                                           int64 m, T mod1) {
  return PolyMulAcceptLengthAndMod(mod, std::min(n, m), mod1);
}

template <typename T>
SL void AdjustPolyLeadingZero(std::vector<T>& v) {
  int64 now = static_cast<int64>(std::size(v)) - 1;
  while (now > 0 && v[now] == 0) --now;
  v.resize(now + 1);
}

template <typename T>
struct PolyMulType {
  using CStyleFunctionPointer = void (*)(const T*, int64, const T*, int64, T*,
                                         int64);
  using CppStyleFunctionPointer = std::vector<T> (*)(const std::vector<T>&,
                                                     const std::vector<T>&,
                                                     int64);
};

template <typename T>
SL void PolyMulWrapper(const T* X, int64 n, const T* Y, int64 m, T* result,
                       int64 mod,
                       typename PolyMulType<T>::CStyleFunctionPointer impl) {
  int64 s1 = 0, s2 = 0;
  int64 e1 = n, e2 = m;
  while (s1 < e1 && X[s1] == 0) ++s1;
  while (s1 < e1 && X[e1 - 1] == 0) --e1;
  while (s2 < e2 && Y[s2] == 0) ++s2;
  while (s2 < e2 && Y[e2 - 1] == 0) --e2;

  if (s1 >= e1 || s2 >= e2) {
    std::fill(result, result + n + m - 1, 0);
    return;
  }

  impl(X + s1, e1 - s1, Y + s2, e2 - s2, result + s1 + s2, mod);
  std::fill(result, result + s1 + s2, 0);
  std::fill(result + e1 + e2 - 1, result + n + m - 1, 0);
}

#define POLY_MUL_IMPL(PolyMul, PolyMulImpl)                                   \
  template <typename T>                                                       \
  SL void PolyMul(const T* X, int64 n, const T* Y, int64 m, T* result,        \
                  int64 mod) {                                                \
    using UnsignedT = pe_make_unsigned_t<T>;                                  \
    PolyMulWrapper<UnsignedT>(reinterpret_cast<const UnsignedT*>(X), n,       \
                              reinterpret_cast<const UnsignedT*>(Y), m,       \
                              reinterpret_cast<UnsignedT*>(result), mod,      \
                              &PolyMulImpl<UnsignedT>);                       \
  }                                                                           \
                                                                              \
  template <typename T>                                                       \
  SL std::vector<T> PolyMul(const std::vector<T>& X, const std::vector<T>& Y, \
                            int64 mod) {                                      \
    const int64 n = static_cast<int64>(std::size(X));                         \
    const int64 m = static_cast<int64>(std::size(Y));                         \
    const int64 ret_size = n + m - 1;                                         \
    std::vector<T> result(ret_size);                                          \
    PolyMul(&X[0], n, &Y[0], m, &result[0], mod);                             \
    return result;                                                            \
  }

namespace internal {
template <typename T, typename IMPL>
SL REQUIRES((std::is_invocable_r_v<void, IMPL, const T*, int64, const T*, int64,
                                   T*, int64>)) RETURN(std::vector<T>)
    PolyMulParallel(const std::vector<T>& X, const std::vector<T>& Y, int64 mod,
                    const IMPL& impl, int thread_number = 8,
                    int block_size = 1 << 19) {
#if !ENABLE_OPENMP
  const int64 n = static_cast<int64>(std::size(X));
  const int64 m = static_cast<int64>(std::size(Y));
  const int64 ret_size = n + m - 1;
  std::vector<T> result(ret_size);
  impl(&X[0], n, &Y[0], m, &result[0], mod);
  return result;
#else
  const int64 n = static_cast<int64>(std::size(X));
  const int64 m = static_cast<int64>(std::size(Y));
  const int64 ret_size = n + m - 1;
  std::vector<T> result(ret_size);

  std::vector<int64> x_offset = {0};
  std::vector<int64> y_offset = {0};
  while (x_offset.back() < n) {
    x_offset.push_back(std::min<int64>(x_offset.back() + block_size, n));
  }
  while (y_offset.back() < m) {
    y_offset.push_back(std::min<int64>(y_offset.back() + block_size, m));
  }
  std::vector<std::pair<int, int>> tasks;
  for (int i = 0; i + 1 < x_offset.size(); ++i)
    for (int j = 0; j + 1 < y_offset.size(); ++j) {
      tasks.push_back({i, j});
    }

  OmpLock lock;
#pragma omp parallel for schedule(dynamic, 1) num_threads(thread_number)
  for (int i = 0; i < tasks.size(); ++i) {
    std::pair<int, int> task = tasks[i];
    const int64 x_start = x_offset[tasks[i].first];
    const int64 x_size = x_offset[tasks[i].first + 1] - x_start;
    const int64 y_start = y_offset[tasks[i].second];
    const int64 y_size = y_offset[tasks[i].second + 1] - y_start;

    std::vector<T> tans(x_size + y_size - 1);
    impl(&X[0] + x_start, x_size, &Y[0] + y_start, y_size, &tans[0], mod);

    OmpGuard guard(lock);
    const int64 tans_size = tans.size();
    for (int64 j = 0; j < tans_size; ++j) {
      result[j + x_start + y_start] =
          AddMod(result[j + x_start + y_start], tans[j], mod);
    }
  }
  return result;
#endif
}

template <typename T, typename IMPL>
SL REQUIRES((std::is_invocable_r_v<std::vector<T>, IMPL, std::vector<T>,
                                   std::vector<T>, int64>))
    RETURN(std::vector<T>)
        PolyMulParallel(const std::vector<T>& X, const std::vector<T>& Y,
                        int64 mod, const IMPL& impl, int thread_number = 8,
                        int block_size = 1 << 19) {
#if !ENABLE_OPENMP
  return impl(X, Y, mod);
#else
  const int64 n = static_cast<int64>(std::size(X));
  const int64 m = static_cast<int64>(std::size(Y));
  const int64 ret_size = n + m - 1;
  std::vector<T> result(ret_size);

  std::vector<int64> x_offset = {0};
  std::vector<int64> y_offset = {0};
  while (x_offset.back() < n) {
    x_offset.push_back(std::min<int64>(x_offset.back() + block_size, n));
  }
  while (y_offset.back() < m) {
    y_offset.push_back(std::min<int64>(y_offset.back() + block_size, m));
  }
  std::vector<std::pair<int, int>> tasks;
  for (int i = 0; i + 1 < x_offset.size(); ++i)
    for (int j = 0; j + 1 < y_offset.size(); ++j) {
      tasks.push_back({i, j});
    }

  OmpLock lock;
#pragma omp parallel for schedule(dynamic, 1) num_threads(thread_number)
  for (int i = 0; i < tasks.size(); ++i) {
    std::pair<int, int> task = tasks[i];
    const int64 x_start = x_offset[tasks[i].first];
    const int64 x_size = x_offset[tasks[i].first + 1] - x_start;
    const int64 y_start = y_offset[tasks[i].second];
    const int64 y_size = y_offset[tasks[i].second + 1] - y_start;

    const std::vector<T> tans = impl(
        std::vector<T>(X.begin() + x_start, X.begin() + x_start + x_size),
        std::vector<T>(Y.begin() + y_start, Y.begin() + y_start + y_size), mod);

    OmpGuard guard(lock);
    const int64 tans_size = tans.size();
    for (int64 j = 0; j < tans_size; ++j) {
      result[j + x_start + y_start] =
          AddMod(result[j + x_start + y_start], tans[j], mod);
    }
  }
  return result;
#endif
}
}  // namespace internal

// For input:
// size q >= std::max(deg X - deg Y + 1, 1)
// size r >= m
// For output:
// deg q = std::max(deg X - deg Y + 1, 1)
// For C-style method: deg r = deg Y (with possible leading zeros)
// For C++ style method: deg r <= deg Y (the leading zeros are ignored)
#define POLY_DIV_AND_MOD_IMPL(PolyDivAndMod, PolyDivAndModImpl)            \
  template <typename T>                                                    \
  SL REQUIRES((is_builtin_integer_v<T>)) RETURN(void)                      \
      PolyDivAndMod(const T* X, const int64 n, const T* Y, const int64 m,  \
                    T* q, T* r, int64 mod) {                               \
    using UnsignedT = pe_make_unsigned_t<T>;                               \
    PolyDivAndModImpl<UnsignedT>(reinterpret_cast<const UnsignedT*>(X), n, \
                                 reinterpret_cast<const UnsignedT*>(Y), m, \
                                 reinterpret_cast<UnsignedT*>(q),          \
                                 reinterpret_cast<UnsignedT*>(r), mod);    \
  }                                                                        \
                                                                           \
  template <typename T>                                                    \
  SL REQUIRES((is_builtin_integer_v<T>))                                   \
      RETURN(std::tuple<std::vector<T>, std::vector<T>>) PolyDivAndMod(    \
          const std::vector<T>& X, const std::vector<T>& Y, int64 mod) {   \
    const int64 n = static_cast<int64>(std::size(X));                      \
    const int64 m = static_cast<int64>(std::size(Y));                      \
                                                                           \
    std::vector<T> q(std::max<int64>(n - m + 1, 1LL));                     \
    std::vector<T> r(m);                                                   \
    PolyDivAndMod(&X[0], n, &Y[0], m, &q[0], &r[0], mod);                  \
                                                                           \
    r[m] = 0;                                                              \
    AdjustPolyLeadingZero(r);                                              \
    return std::make_tuple(std::move(q), std::move(r));                    \
  }

#define POLY_DIV_IMPL(PolyDiv, PolyDivAndMod)                                  \
  template <typename T>                                                        \
  SL REQUIRES((is_builtin_integer_v<T>)) RETURN(void) PolyDiv(                 \
      const T* X, const int64 n, const T* Y, const int64 m, T* q, int64 mod) { \
    PolyDivAndMod(X, n, Y, m, q, reinterpret_cast<T*>(0), mod);                \
  }                                                                            \
                                                                               \
  template <typename T>                                                        \
  SL REQUIRES((is_builtin_integer_v<T>)) RETURN(std::vector<T>)                \
      PolyDiv(const std::vector<T>& X, const std::vector<T>& Y, int64 mod) {   \
    const int64 n = static_cast<int64>(std::size(X));                          \
    const int64 m = static_cast<int64>(std::size(Y));                          \
                                                                               \
    std::vector<T> q(std::max<int64>(n - m + 1, 1LL));                         \
    PolyDiv(&X[0], n, &Y[0], m, &q[0], mod);                                   \
    return q;                                                                  \
  }

#define POLY_MOD_IMPL(PolyMod, PolyDivAndMod)                                  \
  template <typename T>                                                        \
  SL REQUIRES((is_builtin_integer_v<T>)) RETURN(void) PolyMod(                 \
      const T* X, const int64 n, const T* Y, const int64 m, T* r, int64 mod) { \
    PolyDivAndMod(X, n, Y, m, reinterpret_cast<T*>(0), r, mod);                \
  }                                                                            \
                                                                               \
  template <typename T>                                                        \
  SL REQUIRES((is_builtin_integer_v<T>)) RETURN(std::vector<T>)                \
      PolyMod(const std::vector<T>& X, const std::vector<T>& Y, int64 mod) {   \
    const int64 n = static_cast<int64>(std::size(X));                          \
    const int64 m = static_cast<int64>(std::size(Y));                          \
                                                                               \
    std::vector<T> r(m);                                                       \
    PolyMod(&X[0], n, &Y[0], m, &r[0], mod);                                   \
    AdjustPolyLeadingZero(r);                                                  \
    return r;                                                                  \
  }
}  // namespace pe
#endif