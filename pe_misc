#ifndef PE_MISC_
#define PE_MISC_

#include "pe_base"

class GaussianEliminationMod2 {
 public:
  void init(int r, int c) {
    row = r;
    col = c;
    data.resize(row);
    colex = (col + 63) >> 6;
    for (int i = 0; i < row; ++i) {
      vector<uint64>(colex, 0).swap(data[i]);
    }
  }

  void fillZero() {
    for (auto& iter : data) {
      fill(iter.begin(), iter.end(), 0);
    }
  }

  int at(int i, int j) const {
    const int idx = j >> 6;
    const int offset = j & 63;
    return (data[i][idx] >> offset) & 1;
  }

  void set(int i, int j, int v) {
    const int idx = j >> 6;
    const int offset = j & 63;
    if (v) {
      data[i][idx] |= 1ULL << offset;
    } else {
      data[i][idx] &= ~(1ULL << offset);
    }
  }

  void change(int i, int j) { set(i, j, at(i, j) ^ 1); }

  int reduce() {
    x = y = 0;
    while (x < row && y < col) {
      int id = x;
      while (id < row && at(id, y) == 0) ++id;
      if (id == row) {
        ++y;
        continue;
      }
      if (id != x) {
        data[id].swap(data[x]);
      }
      for (int i = x + 1; i < row; ++i) {
        if (at(i, y) == 0) continue;
        for (int j = y >> 6; j < colex; ++j) data[i][j] ^= data[x][j];
      }
      ++x, ++y;
    }
    return rank();
  }

  int rank() const { return x; }

  vector<vector<uint64>> data;
  int row, col, colex;
  int x, y;
};

class GaussianEliminationSolver {
 public:
  void init(int r, int c) {
    row = r;
    col = c;
    data.resize(row);
    for (int i = 0; i < r; ++i) {
      vector<double>(col + 1, 0).swap(data[i]);
    }
  }

  void fillZero() { fill(0); }

  void fill(double v) {
    for (auto& iter : data) {
      std::fill(iter.begin(), iter.end(), v);
    }
  }

  double& at(int i, int j) { return data[i][j]; }

  vector<double>& rowData(int i) { return data[i]; }

  static int dbsgn(double x) {
    if (fabs(x) < 1e-10) {
      return 0;
    }
    return x > 0 ? 1 : -1;
  }

  int reduce(int selectRow = 1) {
    x = y = 0;
    while (x < row && y < col) {
      int bestId = x;
      if (selectRow) {
        double bestV = fabs(at(x, y));
        for (int i = x + 1; i < row; ++i) {
          auto now = fabs(at(i, y));
          if (now > bestV) {
            bestId = i;
            bestV = now;
          }
        }
        if (dbsgn(bestV) == 0) {
          ++y;
          continue;
        }
        if (bestId != x) {
          data[bestId].swap(data[x]);
        }
      }
      for (int i = x + 1; i < row; ++i) {
        if (dbsgn(at(i, y)) == 0) continue;
        const double coe = -at(i, y) / at(x, y);
        for (int j = y; j <= col; ++j) data[i][j] += data[x][j] * coe;
      }
      ++x, ++y;
    }
    return rank();
  }

  const vector<double>& solve() {
    reduce(0);
    PE_ASSERT(rank() == row);
    ans.resize(row);
    for (int i = row - 1; i >= 0; --i) {
      data[i][col] /= data[i][i];
      data[i][i] = 1;
      const double v = data[i][col];
      ans[i] = v;
      for (int j = i - 1; j >= 0; --j) {
        data[j][col] -= v * data[j][i];
      }
    }
    return ans;
  }

  int rank() const { return x; }

  vector<vector<double>> data;
  vector<double> ans;

  int row, col;
  int x, y;
};

// Returns the number of (x, y) where
// x^2+y^2<=n and x >= 0 and y >= 0
SL int64 count_pt_in_circle_q1(int64 n) {
  struct Pt {
    int64 x, y;
  };
  const int64 m = sqrti(n);
  stack<Pt> stk;
  stk.push({0, 1});
  int64 vx = 1, vy = 0;
  int64 A = 0, B = 0;
  int64 x = 0, y = m;
  int64 iter = 0;
  while (!stk.empty()) {
    while (x + vx <= m && y - vy >= 0 && sq(x + vx) + sq(y - vy) <= n) {
      x += vx;
      y -= vy;
      A += vx * (2 * y + vy);
      ++B;
      ++iter;
    }
    if (x >= m) break;
    int64 cx, cy;
    cx = stk.top().x;
    cy = stk.top().y;
    stk.pop();
    int fnd = 0;
    while (!fnd) {
      while (x + cx <= m && y - cy >= 0 && sq(x + cx) + sq(y - cy) <= n) {
        stk.push({cx, cy});
        cx += vx, cy += vy;
        ++iter;
      }
      vx = cx, vy = cy;
      if (stk.empty()) {
        fnd = 1;
        break;
      }

      cx = stk.top().x;
      cy = stk.top().y;
      stk.pop();
      int64 lastV = -1;
      for (;; ++iter) {
        if (x + vx + cx <= m && y - vy - cy >= 0 &&
            sq(x + vx + cx) + sq(y - vy - cy) <= n) {
          stk.push({cx, cy});
          cx += vx, cy += vy;
          break;
        }
        int64 currV = sq(x + vx + 2 * cx) + sq(y - vy - 2 * cy);
        // auto f0 = abs((y-vy)*cx + (x+vx)*cy) > (m + 1) *
        // sqrt((sq(cx)+sq(cy)));
        auto f1 = cx * (x + vx + cx) >= cy * (y - vy - cy);
        // auto f2 = x + vx + 2 * cx > m || y - vy - 2*cy < 0 || lastV != -1 &&
        // currV > lastV;
        if (f1) {
          // if (f2) {
          vx = cx, vy = cy;
          fnd = 1;
          break;
        }
        lastV = currV;
        int64 delta = 1;
#if 0
        {
          double A = x + vx, B = y - vy, C = cx, D = cy;
          double E = sq(B) + sq(D);
          double tmp = E * n - sq(B*C+A*D);
          if (tmp >= 0) {
            double x1 = (-A*B-C*D-sqrt(tmp)) / E;
            double x2 = (-A*B+C*D+sqrt(tmp)) / E;
            delta = x1;
            if (delta <= 0) delta = 1;
          }
        }
#endif
        vx += delta * cx;
        vy += delta * cy;
      }
    }
  }
  // dbg(iter);
  const int64 BD = B + m + x + (y - 1) + 1;
  const int64 I = (A - BD + 2) / 2;
  int64 ret = I + BD;
  for (int64 i = x + 1; i <= m; ++i) {
    ret += sqrti(n - sq(i)) + 1;
  }
  return ret;
}

SL int64 count_pt_in_circle(int64 n) {
  const int64 m = sqrti(n);
  const int64 t = count_pt_in_circle_q1(n);
  return (t - m - 1) * 4 + 1;
}

SL int64 count_pt_in_circle_q1_bf(int64 n) {
  const int64 m = sqrti(n);
  int64 ret = 0;
  for (int64 i = 0; i <= m; ++i) {
    ret += sqrti(n - sq(i)) + 1;
  }
  return ret;
}

SL int64 count_pt_in_circle_bf(int64 n) {
  const int64 m = sqrti(n);
  const int64 t = count_pt_in_circle_q1_bf(n);
  return (t - m - 1) * 4 + 1;
}

#if PE_HAS_INT128
// Returns sum(sigma0(i), i=1..n)
SL int128 sum_sigma0(int64 n) {
  struct Pt {
    int64 x, y;
  };

  const int64 PIVOT = n > 1e15 ? 10000000 : 1000000;
  const int64 m = sqrti(n);
  stack<Pt> stk;
  stk.push({0, 1});

  int64 vx = 1, vy = 0;
  int128 A = 0, B = 0;
  int64 x = m, y = n / m;
  int64 lx = x, ly = y;
  while (!stk.empty()) {
    while (x > vx && y + vy >= n / (x - vx)) {
      x -= vx;
      y += vy;
      lx = x;
      ly = y;
      A += static_cast<int128>(vx) * ((n - y) * 2 + 2 + vy);
      ++B;
    }
    if (lx < PIVOT || x <= vx) break;
    int fnd = 0;
    int64 cx = stk.top().x, cy = stk.top().y;
    stk.pop();

    while (!fnd) {
      while (x > cx && y + cy >= n / (x - cx)) {
        stk.push({cx, cy});
        cx += vx;
        cy += vy;
      }
      vx = cx, vy = cy;
      if (stk.empty()) {
        fnd = 1;
        break;
      }
      cx = stk.top().x, cy = stk.top().y;
      stk.pop();
      int128 lastV = -0x123456789;
      for (;;) {
        if (x > vx + cx && y + vy + cy >= n / (x - vx - cx)) {
          stk.push({cx, cy});
          cx += vx;
          cy += vy;
          break;
        }
        int128 currV = static_cast<int128>(y + 2 * cy + vy) * (x - 2 * cx - vx);
        if (x < 2 * cx + vx || currV > n ||
            lastV != -0x123456789 && currV < lastV) {
          vx = cx, vy = cy;
          fnd = 1;
          break;
        }
        lastV = currV;
        int64 delta = 1;
        if (cx == 0) {
          delta = n / (x - vx) - vy - y - 1;
        } else if (cx > 0 && cy > 0) {
          int128 TA = y + vy + 1, TB = x - vx;
          int128 test = (cy * TB - cx * TA) * (cy * TB - cx * TA) +
                        4 * cx * cy * (TA * TB - n);
          if (test > 0) {
            delta = (floor)(((1. * cy * TB - 1. * cx * TA) - sqrt(1. * test)) /
                            cx / cy / 2);
          }
        }
        if (delta < 1) {
          delta = 1;
        }
        vx += 1 * cx;
        vy += 1 * cy;
      }
    }
  }
  const int64 side = n - n / m + 1;
  const auto xcnt = m - lx + 1;
  const auto ycnt = n - ly;
  const auto BD = B + xcnt + ycnt + side;
  const auto I = (A - BD + 2) / 2;
  int128 tmp =
      static_cast<int128>(xcnt) * n - (side - 1) - I + (xcnt - 1 - B) - ycnt;
  for (int64 i = 1; i < lx; ++i) tmp += n / i;
  return 2 * tmp - m * m;
}

SL int128 sum_sigma0_bf(int64 n) {
  int64 m = sqrti(n);
  int128 ret = 0;
  for (int64 i = 1; i <= m; ++i) {
    ret += n / i;
  }
  return 2 * ret - m * m;
}
#endif

// Generate set partitions.
// The number of partitions of n elements is Bell number
// See: http://oeis.org/A000110
struct Partition {
  // e.g. {0, 0, 1, 1, 0, 2, 2}
  vi colors;

  // 2, 2, 3
  vi parts;

  // compressed parts
  // e.g. {2:2, 3:1}
  vector<pair<int, int>> partsC;

  void genParts() {
    map<int, int> mem, mem1;
    parts.resize(0);
    for (auto& iter : colors) ++mem[iter];
    for (auto& iter : mem) ++mem1[iter.second], parts.push_back(iter.second);
    sort(parts.begin(), parts.end());

    partsC.resize(0);
    for (auto& iter : mem1) partsC.emplace_back(iter.first, iter.second);
  }

  int operator<(const Partition& o) const { return colors < o.colors; }

  int operator>(const Partition& o) const { return colors > o.colors; }

  int operator==(const Partition& o) const { return colors == o.colors; }

  static void genPartitionsImpl(int now, int n, int maxv, int* his,
                                vector<Partition>& result) {
    if (now == n) {
      Partition t;
      t.colors = vi(his, his + n);
      t.genParts();
      result.push_back(std::move(t));
    } else {
      for (int i = 0; i <= maxv + 1; ++i) {
        his[now] = i;
        genPartitionsImpl(now + 1, n, max(maxv, i), his, result);
      }
    }
  }

  static vector<Partition> genPartitions(int n) {
    vector<Partition> result;
    int his[64];
    genPartitionsImpl(0, n, -1, his, result);
    return result;
  }
};

struct PartitionMobius {
  PartitionMobius(int64 mod = 1) : mod_(mod) { init(mod); }
  void init(int64 mod) {
    mod_ = mod;
    init_seq_prod2<int64>(fac, nullptr, 127, mod_);
  }
  int64 cal(const Partition& partition) {
    int64 ret =
        partition.colors.size() + partition.parts.size() & 1 ? mod_ - 1 : 1;
    for (auto& iter : partition.parts)
      ret = mul_mod_ex(ret, fac[iter - 1], mod_);
    return ret;
  }

 private:
  int64 mod_;
  int64 fac[128];
};
#endif
