#ifndef PE_POLY_BASE_NTL_
#define PE_POLY_BASE_NTL_

#if ENABLE_NTL

#include "pe_poly_base_common"

#define HAS_POLY_NTL 1
#define HAS_POLY_MUL_NTL 1

namespace poly_ntl {
template <typename T>
SL void poly_mul_internal(const T* X, int n, const T* Y, int m, T* result,
                          int64 mod) {
  NTL::ZZ tmp(0);
  ZZFromBytes(tmp, reinterpret_cast<const unsigned char*>(&mod), sizeof(T));
  NTL::ZZ_p::init(tmp);

  NTL::ZZ_pX x, y, z;
  x.SetLength(n);
  y.SetLength(m);
  if (mod >> 32) {
    for (int i = 0; i < n; ++i) {
      ZZFromBytes(tmp, (const unsigned char*)&X[i], sizeof(T));
      x[i] = to_ZZ_p(tmp);
    }
    for (int i = 0; i < m; ++i) {
      ZZFromBytes(tmp, (const unsigned char*)&Y[i], sizeof(T));
      y[i] = to_ZZ_p(tmp);
    }
  } else {
    for (int i = 0; i < n; ++i) {
      x[i] = X[i];
    }
    for (int i = 0; i < m; ++i) {
      y[i] = Y[i];
    }
  }

  mul(z, x, y);

  const int d = deg(z);
  if (mod >> 32) {
    for (int i = 0; i <= d; ++i) {
      T x;
      BytesFromZZ((unsigned char*)&x, (NTL::ZZ&)z[i], sizeof(T));
      result[i] = x;
    }
  } else {
    for (int i = 0; i <= d; ++i) {
      result[i] = static_cast<T>(to_int((NTL::ZZ&)z[i]));
    }
  }
  const int retSize = n + m - 1;
  for (int i = d + 1; i < retSize; ++i) {
    result[i] = 0;
  }
}

template <typename T>
SL void poly_mul(const T* X, int n, const T* Y, int m, T* result, int64 mod) {
  poly_mul_wrapper(X, n, Y, m, result, mod, &poly_mul_internal<T>);
}

template <typename T>
SL vector<T> poly_mul(const vector<T>& X, const vector<T>& Y, int64 mod) {
  const int n = (int)X.size();
  const int m = (int)Y.size();
  const int retSize = n + m - 1;
  vector<T> result(retSize);
  poly_mul(&X[0], n, &Y[0], m, &result[0], mod);
  return result;
}

}  // namespace poly_ntl
#else
#define HAS_POLY_NTL 0
#define HAS_POLY_MUL_NTL 0
#endif

#endif
