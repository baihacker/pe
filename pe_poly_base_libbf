#ifndef PE_POLY_BASE_LIBBF_
#define PE_POLY_BASE_LIBBF_

#include "pe_base"
#include "pe_poly_base_common"

#if ENABLE_LIBBF && LIMB_BITS == 64

#define HAS_POLY_LIBBF 1
#define HAS_POLY_MUL_LIBBF 1

namespace pe {

namespace libbf {
namespace internal {
extern "C" {
void* PeBfRealloc(void*, void* ptr, size_t size) { return realloc(ptr, size); }
}

template <typename T>
SL REQUIRES((is_builtin_integer_v<T> || is_extended_integer_v<T>)) RETURN(void)
    BfNttInit(const T* X, int64 n, int64 mod, bf_context_t* context,
              bf_t* target) {
  bf_init(context, target);

  bf_set_ui(target, 1);

  bf_resize(target, 2 * n);
  target->expn = pe_clzll(ToInt<limb_t>(X[n - 1]));

  const int64 len = target->len;
  limb_t* data = target->tab;
  if (mod == 0) {
    for (int64 i = 0; i < n; ++i) {
      T t = X[i];
      PE_ASSERT((t >> 64) == 0);
      data[i << 1] = ToInt<limb_t>(X[i]);
      data[(i << 1) | 1] = 0;
    }
  } else {
    for (int64 i = 0; i < n; ++i) {
      T t = X[i];
      PE_ASSERT((t >> 64) == 0);
      data[i << 1] = ToInt<limb_t>(Mod(X[i], mod));
      data[(i << 1) | 1] = 0;
    }
  }
}

SL void BfNttDeinit(bf_t* target) { bf_delete(target); }

static constexpr PolyMulCoeType kPolyMulLargeMod = 0;

template <typename T>
SL REQUIRES((is_builtin_integer_v<T> || is_extended_integer_v<T>)) RETURN(void)
    PolyMulImpl(const T* X, int64 n, const T* Y, int64 m, T* result,
                int64 mod) {
  bf_t x, y;
  bf_context_t bf_context;
  bf_context_init(&bf_context, PeBfRealloc, nullptr);

  BfNttInit(X, n, mod, &bf_context, &x);
  BfNttInit(Y, m, mod, &bf_context, &y);

  bf_t z0, z1, toadd;
  bf_init(&bf_context, &z0);
  bf_init(&bf_context, &z1);
  bf_init(&bf_context, &toadd);

  int offset = x.expn + y.expn;
  bf_set_ui(&toadd, 1);

  toadd.expn = 128 + offset;

  bf_mul(&z0, &x, &y, BF_PREC_MAX, 0);
  bf_add(&z1, &z0, &toadd, BF_PREC_MAX, 0);

  const int64 size = n + m - 1;
  const limb_t* data = z1.tab;

  if (mod > 0) {
    const auto magic1 = (1LL << 32) % mod;
    const auto magic2 = MulMod(magic1, magic1, mod);
    for (int64 i = 0; i < size; ++i) {
      const uint64 low = data[i << 1];
      const uint64 hi = data[(i << 1) | 1];
      if (hi == 0) {
        result[i] = low % mod;
      } else {
        result[i] = AddMod(MulMod(hi % mod, magic2, mod), low % mod, mod);
      }
    }
  } else {
    for (int64 i = 0; i < size; ++i) {
      const uint64 low = data[i << 1];
      const uint64 hi = data[(i << 1) | 1];
      if (hi == 0) {
        result[i] = low;
      } else {
        T it = hi;
        it <<= 32;
        it <<= 32;
        it |= low;
        result[i] = it;
      }
    }
  }

  bf_delete(&toadd);
  bf_delete(&z1);
  bf_delete(&z0);
  BfNttDeinit(&y);
  BfNttDeinit(&x);

  bf_context_end(&bf_context);
}
}  // namespace internal

static constexpr PolyMulCoeType kPolyMulMod =
    Prod<PolyMulCoeType>(1LL << 63, 1LL << 63) * 2 + 1;

POLY_MUL_IMPL(PolyMul, internal::PolyMulImpl)

}  // namespace libbf
}  // namespace pe
#else
#define HAS_POLY_LIBBF 0
#define HAS_POLY_MUL_LIBBF 0
#endif

#endif
