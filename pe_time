#ifndef PE_TIME_
#define PE_TIME_

#include "pe_base"

using pe_clock_t = chrono::high_resolution_clock;
using time_point_t = pe_clock_t::time_point;
using duration_t = pe_clock_t::duration;
using period_t = pe_clock_t::period;

static const int64 MILLI_SEC_CLOCKS = period_t::den / milli::den;
static const int64 SEC_CLOCKS = period_t::den;
static const int64 MIN_CLOCKS = SEC_CLOCKS * 60;
static const int64 HOUR_CLOCKS = MIN_CLOCKS * 60;
static const int64 DAY_CLOCKS = HOUR_CLOCKS * 24;

class TimeDelta {
 public:
  TimeDelta(duration_t duration = duration_t::zero()) : duration_(duration) {}

  int64 native_time() const { return duration_.count(); }
  double to_seconds() const { return 1. * duration_.count() / SEC_CLOCKS; }
  double to_minutes() const { return 1. * duration_.count() / MIN_CLOCKS; }
  double to_hours() const { return 1. * duration_.count() / HOUR_CLOCKS; }
  double to_days() const { return 1. * duration_.count() / DAY_CLOCKS; }
  string format() const {
    char temp[128];
    const int64 nano_seconds = duration_.count();
    const int64 day = nano_seconds / DAY_CLOCKS;
    const int hour = static_cast<int>(nano_seconds % DAY_CLOCKS / HOUR_CLOCKS);
    const int min = static_cast<int>(nano_seconds % HOUR_CLOCKS / MIN_CLOCKS);
    const int sec = static_cast<int>(nano_seconds % MIN_CLOCKS / SEC_CLOCKS);
    const int msec =
        static_cast<int>(nano_seconds % SEC_CLOCKS / MILLI_SEC_CLOCKS);
    sprintf(temp, "%I64d:%02d:%02d:%02d.%03d", day, hour, min, sec, msec);
    return temp;
  }

  static TimeDelta from_millisecond(int64 t) {
    return duration_t(t * MILLI_SEC_CLOCKS);
  }
  static TimeDelta from_second(int64 t) { return duration_t(t * SEC_CLOCKS); }
  static TimeDelta from_minute(int64 t) { return duration_t(t * MIN_CLOCKS); }
  static TimeDelta from_hour(int64 t) { return duration_t(t * HOUR_CLOCKS); }
  static TimeDelta from_day(int64 t) { return duration_t(t * DAY_CLOCKS); }

  bool operator>(const TimeDelta& o) const { return duration_ > o.duration_; }
  bool operator>=(const TimeDelta& o) const { return duration_ >= o.duration_; }
  bool operator==(const TimeDelta& o) const { return duration_ == o.duration_; }
  bool operator<(const TimeDelta& o) const { return duration_ < o.duration_; }
  bool operator<=(const TimeDelta& o) const { return duration_ <= o.duration_; }

 private:
  duration_t duration_;
};

class TimeRecorder {
 public:
  TimeRecorder() : last_time_(pe_clock_t::now()) {}

  int64 record() {
    last_time_ = pe_clock_t::now();
    return last_time_.time_since_epoch().count();
  }

  TimeDelta elapsed() const { return pe_clock_t::now() - last_time_; }

 private:
  time_point_t last_time_;
};

class time_usage {
 public:
  ~time_usage() {
    fprintf(stderr, "time usage: %s\n", tr_.elapsed().format().c_str());
  }

 private:
  TimeRecorder tr_;
};

#ifndef PE_TEST_MODE
static time_usage __time_usage;
#endif

#endif
