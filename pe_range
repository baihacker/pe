#ifndef PE_RANGE_
#define PE_RANGE_

#include "pe_type_traits"
#include "pe_mod"

// range utility
namespace ru {
SL int64 id(int64 a) { return a; }

SL int64 mul(int64 a, int64 b) { return a * b; }

SL int64 add(int64 a, int64 b) { return a + b; }

template <int64 M>
SL int64 mul_mod(int64 a, int64 b) {
  return ::mul_mod_ex(a, b, M);
}

template <int64 M>
SL int64 add_mod(int64 a, int64 b) {
  return ::add_mod(a, b, M);
}

SL std::function<int64(int64, int64)> mul_mod(int64 mod) {
  return [=](int64 a, int64 b) { return ::mul_mod_ex(a, b, mod); };
}

SL std::function<int64(int64, int64)> add_mod(int64 mod) {
  return [=](int64 a, int64 b) { return ::add_mod(a, b, mod); };
}

SL std::function<int64(int64, int64)> add_f(
    const std::function<int64(int64)>& f) {
  return [=](int64 a, int64 b) -> int64 { return add(a, f(b)); };
}

SL std::function<int64(int64, int64)> mul_f(
    const std::function<int64(int64)>& f) {
  return [=](int64 a, int64 b) -> int64 { return mul(a, f(b)); };
}

SL std::function<int64(int64, int64)> add_mod_f(
    const std::function<int64(int64)>& f, int64 mod) {
  return [=](int64 a, int64 b) -> int64 {
    return ::add_mod(a % mod, f(b) % mod, mod);
  };
}

SL std::function<int64(int64, int64)> mul_mod_f(
    const std::function<int64(int64)>& f, int64 mod) {
  return [=](int64 a, int64 b) -> int64 {
    return ::mul_mod_ex(a % mod, f(b) % mod, mod);
  };
}

SL void imul(int64& a, int64 b) { a *= b; }

SL void iadd(int64& a, int64 b) { a += b; }

template <int64 M>
SL void imul_mod(int64& a, int64 b) {
  a = ::mul_mod_ex(a, b, M);
}

template <int64 M>
SL void iadd_mod(int64& a, int64 b) {
  a = ::add_mod(a, b, M);
}

SL std::function<void(int64&, int64)> imul_mod(int64 mod) {
  return [=](int64& a, int64 b) { a = ::mul_mod_ex(a, b, mod); };
}

SL std::function<void(int64&, int64)> iadd_mod(int64 mod) {
  return [=](int64& a, int64 b) { a = ::add_mod(a, b, mod); };
}

SL std::function<void(int64&, int64)> iadd_f(
    const std::function<int64(int64)>& f) {
  return [=](int64& a, int64 b) { imul(a, f(b)); };
}

SL std::function<void(int64&, int64)> imul_mod_f(
    const std::function<int64(int64)>& f, int64 mod) {
  return [=](int64& a, int64 b) { a = ::mul_mod_ex(a % mod, f(b) % mod, mod); };
}

SL std::function<void(int64&, int64)> iadd_mod_f(
    const std::function<int64(int64)>& f, int64 mod) {
  return [=](int64& a, int64 b) { a = ::add_mod(a % mod, f(b) % mod, mod); };
}

template <typename T>
struct Reducer {
  using VT = typename T::VT;
  VT init_value() { return 0; }
  void accumulate(VT& v, VT a) {}
  void combine(VT& v, VT a) {}
};

template <typename T, typename U>
SL T id_map(U a) {
  return a;
}

template <typename T = int64, typename U = T>
struct Add {
  using VT = T;
  using IT = U;

  Add(const std::function<VT(IT)>& mapper = id_map<VT, IT>) : mapper_(mapper) {}

  VT init_value() const { return 0; }

  void accumulate(VT& v, const IT& a) const { v += mapper_(a); }

  void combine(VT& v, VT a) const { v += a; }

  std::function<VT(IT)> mapper_;
};

template <typename T = int64, typename U = T>
struct AddMod {
  using VT = T;
  using IT = U;

  AddMod(VT mod, const std::function<VT(IT)>& mapper = id_map<VT, IT>)
      : mod_(mod), mapper_(mapper) {}

  VT init_value() const { return 0; }

  void accumulate(VT& v, const IT& a) const {
    v = ::add_mod<VT>(v, mapper_(a) % mod_, mod_);
  }

  void combine(VT& v, VT a) const { v = ::add_mod<VT>(v, a, mod_); }

  const VT mod_;
  std::function<VT(IT)> mapper_;
};

template <typename T = int64, typename U = T>
struct Mul {
  using VT = T;
  using IT = U;

  Mul(const std::function<VT(IT)>& mapper = id_map<VT, IT>) : mapper_(mapper) {}

  VT init_value() const { return 1; }

  void accumulate(VT& v, const IT& a) const { v *= mapper_(a); }

  void combine(VT& v, VT a) const { v *= a; }

  std::function<VT(IT)> mapper_;
};

template <typename T = int64, typename U = T>
struct MulMod {
  using VT = T;
  using IT = U;

  MulMod(VT mod, const std::function<VT(IT)>& mapper = id_map<VT, IT>)
      : mod_(mod), mapper_(mapper) {}

  VT init_value() const { return 1; }

  void accumulate(VT& v, const IT& a) const {
    v = ::mul_mod_ex<VT>(v, mapper_(a) % mod_, mod_);
  }

  void combine(VT& v, VT a) const { v = ::mul_mod_ex<VT>(v, a, mod_); }

  const VT mod_;
  std::function<VT(IT)> mapper_;
};
}  // namespace ru

template <typename IT>
struct ContainerRange;

template <typename IT>
struct FilterRange;

template <typename IT, typename ET>
struct MappedRange;

template <typename ET>
struct VectorRange;

template <typename DERIVED, typename IT>
struct RangeBase {
  using self_type = RangeBase<DERIVED, IT>;
  using value_type = typename IT::value_type;
  using reference = typename IT::reference;
  using arg_type = typename IT::arg_type;

  FilterRange<IT> filter(const std::function<int(arg_type)>& filter) const {
    return FilterRange<IT>{static_cast<const DERIVED&>(*this).begin(),
                           static_cast<const DERIVED&>(*this).end(), filter};
  }

  VectorRange<value_type> pfilter(const std::function<int(arg_type)>& filter,
                                  const int thread_number = 8) const {
    auto data = toVector();
    const int size = sz(data);
    if (size == 0) {
      return vector<value_type>{};
    }

    vector<vector<value_type>> tmp(thread_number);
    vector<value_type> vec;
#if ENABLE_OPENMP
#pragma omp parallel for schedule(dynamic) num_threads(thread_number)
    for (int i = 0; i < size; ++i) {
      if (filter(data[i])) {
        const auto tid = ::tid();
        tmp[tid].push_back(std::move(data[i]));
      }
    }
    for (int i = 0; i < thread_number; ++i) {
      for (auto& iter : tmp[i]) {
        vec.push_back(std::move(iter));
      }
    }
#else
    for (int i = 0; i < size; ++i) {
      vec.push_back(std::move(data[i]));
    }
#endif
    return VectorRange<value_type>(std::move(vec));
  }

  // Recommendation:
  // 1. Use the template version and specify the result type (VT).
  // 2. Sepecify the return type of accumulator.
  // 3. If the accumulator and the combiner are the same, specify the return
  // type of combiner.

  // Name convention
  // i: inplace reduce
  // p: parallel reduce

  // Reducer versions.
  template <typename T>
  auto reduce(const T& reducer) const -> typename T::VT {
    using VT = typename T::VT;
    VT ret = reducer.init_value();
    auto now = static_cast<const DERIVED&>(*this).begin();
    auto x = static_cast<const DERIVED&>(*this).end();
    while (now != x) {
      reducer.accumulate(ret, *now++);
    }
    return ret;
  }

  template <typename T>
  auto preduce(const T& reducer, const int thread_number = 8) const ->
      typename T::VT {
#if ENABLE_OPENMP
    using VT = typename T::VT;
    auto data = toVector();
    const int size = sz(data);
    if (size == 0) {
      return reducer.init_value();
    }

    vector<VT> tmp(thread_number, reducer.init_value());
#pragma omp parallel for schedule(dynamic) num_threads(thread_number)
    for (int i = 0; i < size; ++i) {
      const auto tid = ::tid();
      reducer.accumulate(tmp[tid], std::move(data[i]));
    }

    VT ret = tmp[0];
    for (int i = 1; i < thread_number; ++i) {
      reducer.combine(ret, std::move(tmp[i]));
    }
    return ret;
#else
    return reduce(reducer);
#endif
  }

  // Sequential reduce
  // Template return value
  template <typename VT = value_type>
  VT reduce(const VT& v,
            const std::function<VT(const VT&, arg_type)>& accumulator) const {
    VT ret = v;
    auto now = static_cast<const DERIVED&>(*this).begin();
    auto x = static_cast<const DERIVED&>(*this).end();
    while (now != x) {
      ret = accumulator(ret, *now++);
    }
    return ret;
  }

  template <typename VT = value_type>
  VT ireduce(const VT& v,
             const std::function<void(VT&, arg_type)>& accumulator) const {
    VT ret = v;
    auto now = static_cast<const DERIVED&>(*this).begin();
    auto x = static_cast<const DERIVED&>(*this).end();
    while (now != x) {
      accumulator(ret, *now++);
    }
    return ret;
  }

  // Non-template return value
  value_type reduce(
      const value_type& v,
      const std::function<value_type(const value_type&, arg_type)>& accumulator)
      const {
    value_type ret = v;
    auto now = static_cast<const DERIVED&>(*this).begin();
    auto x = static_cast<const DERIVED&>(*this).end();
    while (now != x) {
      ret = accumulator(ret, *now++);
    }
    return ret;
  }

  value_type ireduce(
      const value_type& v,
      const std::function<void(value_type&, arg_type)>& accumulator) const {
    value_type ret = v;
    auto now = static_cast<const DERIVED&>(*this).begin();
    auto x = static_cast<const DERIVED&>(*this).end();
    while (now != x) {
      accumulator(ret, *now++);
    }
    return ret;
  }

  // Parallel reduce
  // Template return value, accumulator + combiner
  template <typename VT>
  VT preduce(const VT& v,
             const std::function<VT(const VT&, arg_type)>& accumulator,
             const std::function<VT(const VT&, const VT&)>& combiner,
             const int thread_number = 8) const {
#if ENABLE_OPENMP
    auto data = toVector();
    const int size = sz(data);
    if (size == 0) {
      return v;
    }

    vector<VT> tmp(thread_number, v);
#pragma omp parallel for schedule(dynamic) num_threads(thread_number)
    for (int i = 0; i < size; ++i) {
      const auto tid = ::tid();
      tmp[tid] = accumulator(tmp[tid], data[i]);
    }

    VT ret = tmp[0];
    for (int i = 1; i < thread_number; ++i) {
      ret = combiner(ret, std::move(tmp[i]));
    }
    return ret;
#else
    return reduce(v, accumulator);
#endif
  }

  template <typename VT>
  VT pireduce(const VT& v,
              const std::function<void(VT&, arg_type)>& accumulator,
              const std::function<void(VT&, const VT&)>& combiner,
              const int thread_number = 8) const {
#if ENABLE_OPENMP
    auto data = toVector();
    const int size = sz(data);
    if (size == 0) {
      return v;
    }

    vector<VT> tmp(thread_number, v);
#pragma omp parallel for schedule(dynamic) num_threads(thread_number)
    for (int i = 0; i < size; ++i) {
      const auto tid = ::tid();
      accumulator(tmp[tid], std::move(data[i]));
    }

    VT ret = tmp[0];
    for (int i = 1; i < thread_number; ++i) {
      combiner(ret, std::move(tmp[i]));
    }
    return ret;
#else
    return ireduce(v, accumulator);
#endif
  }

  // Non-template return value, accumulator + combiner
  value_type preduce(
      const value_type& v,
      const std::function<value_type(const value_type&, arg_type)>& accumulator,
      const std::function<value_type(const value_type&, arg_type)>& combiner,
      const int thread_number = 8) const {
#if ENABLE_OPENMP
    auto data = toVector();
    const int size = sz(data);
    if (size == 0) {
      return v;
    }

    vector<value_type> tmp(thread_number, v);
#pragma omp parallel for schedule(dynamic) num_threads(thread_number)
    for (int i = 0; i < size; ++i) {
      const auto tid = ::tid();
      tmp[tid] = accumulator(tmp[tid], std::move(data[i]));
    }

    value_type ret = tmp[0];
    for (int i = 1; i < thread_number; ++i) {
      ret = combiner(ret, std::move(tmp[i]));
    }
    return ret;
#else
    return reduce(v, accumulator);
#endif
  }

  value_type pireduce(
      const value_type& v,
      const std::function<void(value_type&, arg_type)>& accumulator,
      const std::function<void(value_type&, arg_type)>& combiner,
      const int thread_number = 8) const {
#if ENABLE_OPENMP
    auto data = toVector();
    const int size = sz(data);
    if (size == 0) {
      return v;
    }

    vector<value_type> tmp(thread_number, v);
#pragma omp parallel for schedule(dynamic) num_threads(thread_number)
    for (int i = 0; i < size; ++i) {
      const auto tid = ::tid();
      accumulator(tmp[tid], std::move(data[i]));
    }

    value_type ret = tmp[0];
    for (int i = 1; i < thread_number; ++i) {
      combiner(ret, std::move(tmp[i]));
    }
    return ret;
#else
    return ireduce(v, accumulator);
#endif
  }

#if PE_HAS_CPP14
  // Template return value, combiner
  template <typename VT>
  VT preduce(const VT& v,
             const std::function<VT(const VT&, const VT&)>& combiner,
             const int thread_number = 8) const {
    return preduce<VT>(v, combiner, combiner, thread_number);
  }

  value_type preduce(
      const value_type& v,
      const std::function<value_type(const value_type&, const value_type&)>&
          combiner,
      const int thread_number = 8) const {
    return preduce(v, combiner, combiner, thread_number);
  }

  // Non-template return value, combiner
  template <typename VT>
  VT pireduce(const VT& v, const std::function<void(VT&, const VT&)>& combiner,
              const int thread_number = 8) const {
    return pireduce<VT>(v, combiner, combiner, thread_number);
  }

  value_type pireduce(
      const value_type& v,
      const std::function<void(value_type&, const value_type&)>& combiner,
      const int thread_number = 8) const {
    return pireduce(v, combiner, combiner, thread_number);
  }
#endif

  template <typename TT>
  MappedRange<IT, TT> map(const std::function<TT(arg_type)>& mapper) const {
    return MappedRange<IT, TT>{static_cast<const DERIVED&>(*this).begin(),
                               static_cast<const DERIVED&>(*this).end(),
                               mapper};
  }

  template <typename TT>
  VectorRange<TT> pmap(const std::function<TT(arg_type)>& mapper,
                       const int thread_number = 8) const {
    auto data = toVector();
    const int size = sz(data);
    if (size == 0) {
      return vector<TT>{};
    }

    vector<TT> vec(size);
#if ENABLE_OPENMP
#pragma omp parallel for schedule(dynamic) num_threads(thread_number)
#endif
    for (int i = 0; i < size; ++i) {
      vec[i] = mapper(std::move(data[i]));
    }

    return VectorRange<TT>(std::move(vec));
  }

  template <typename T>
  self_type& forEach(const T& action) {
    auto now = static_cast<const DERIVED&>(*this).begin();
    auto x = static_cast<const DERIVED&>(*this).end();
    while (now != x) {
      action(*now++);
    }
    return *this;
  }

  template <typename T>
  self_type& pforEach(const T& action, const int thread_number = 8) {
#if ENABLE_OPENMP
    auto data = toVector();
    const int size = sz(data);
    if (size == 0) {
      return *this;
    }

#pragma omp parallel for schedule(dynamic) num_threads(thread_number)
    for (int i = 0; i < size; ++i) {
      action(std::move(data[i]));
    }

    return *this;
#else
    return pforEach(action);
#endif
  }

  template <typename VT = int64>
  VT sum() const {
    VT ret = 0;
    auto now = static_cast<const DERIVED&>(*this).begin();
    auto x = static_cast<const DERIVED&>(*this).end();
    while (now != x) {
      ret += *now++;
    }
    return ret;
  }

  template <typename VT = int64>
  VT sumMod(VT mod) const {
    VT ret = 0;
    auto now = static_cast<const DERIVED&>(*this).begin();
    auto x = static_cast<const DERIVED&>(*this).end();
    while (now != x) {
      ret = ::add_mod(ret, *now++, mod);
    }
    return ret;
  }

  template <typename VT = int64>
  VT prod() const {
    VT ret = 1;
    auto now = static_cast<const DERIVED&>(*this).begin();
    auto x = static_cast<const DERIVED&>(*this).end();
    while (now != x) {
      ret *= *now++;
    }
    return ret;
  }

  template <typename VT = int64>
  VT prodMod(VT mod) const {
    VT ret = 1;
    auto now = static_cast<const DERIVED&>(*this).begin();
    auto x = static_cast<const DERIVED&>(*this).end();
    while (now != x) {
      ret = ::mul_mod_ex(ret, *now++, mod);
    }
    return ret;
  }

  int isEmpty() const {
    auto now = static_cast<const DERIVED&>(*this).begin();
    auto x = static_cast<const DERIVED&>(*this).end();
    return now == x ? 1 : 0;
  }

  int64 count() const {
    return static_cast<const DERIVED&>(*this).countImpl();
  }

  int64 countImpl() const {
    int64 ret = 0;
    auto now = static_cast<const DERIVED&>(*this).begin();
    auto x = static_cast<const DERIVED&>(*this).end();
    while (now != x) {
      ++now;
      ++ret;
    }
    return ret;
  }

  optional<value_type> max() const {
    auto now = static_cast<const DERIVED&>(*this).begin();
    auto x = static_cast<const DERIVED&>(*this).end();
    if (now == x) {
      return {};
    }
    value_type r = *now++;
    while (now != x) {
      r = std::max(r, *now++);
    }
    return r;
  }

  optional<value_type> min() const {
    auto now = static_cast<const DERIVED&>(*this).begin();
    auto x = static_cast<const DERIVED&>(*this).end();
    if (now == x) {
      return {};
    }
    value_type r = *now++;
    while (now != x) {
      r = std::min(r, *now++);
    }
    return r;
  }

  VectorRange<value_type> sorted() const {
    auto data = toVector();
    std::sort(data.begin(), data.end());
    return VectorRange<value_type>(std::move(data));
  }

  VectorRange<value_type> distinct() const {
    auto data = toVector();
    std::sort(data.begin(), data.end());
    data.resize(std::unique(data.begin(), data.end()) - data.begin());
    return VectorRange<value_type>(std::move(data));
  }

  VectorRange<value_type> reversed() const {
    auto data = toVector();
    std::reverse(data.begin(), data.end());
    return VectorRange<value_type>(std::move(data));
  }

  VectorRange<value_type> skip(int64 n) const {
    auto now = static_cast<const DERIVED&>(*this).begin();
    auto x = static_cast<const DERIVED&>(*this).end();
    while (n > 0 && now != x) {
      --n;
      ++now;
    }

    std::vector<value_type> data;
    while (now != x) {
      data.emplace_back(*now++);
    }
    return VectorRange<value_type>(std::move(data));
  }

  VectorRange<value_type> limit(int64 n) const {
    auto now = static_cast<const DERIVED&>(*this).begin();
    auto x = static_cast<const DERIVED&>(*this).end();
    std::vector<value_type> data;
    while (n > 0 && now != x) {
      --n;
      data.emplace_back(*now++);
    }
    return VectorRange<value_type>(std::move(data));
  }

  int anyMatch(const std::function<int(arg_type)>& filter) const {
    auto now = static_cast<const DERIVED&>(*this).begin();
    auto x = static_cast<const DERIVED&>(*this).end();
    while (now != x) {
      if (filter(*now++)) {
        return 1;
      }
    }
    return 0;
  }

  int allMatch(const std::function<int(arg_type)>& filter) const {
    auto now = static_cast<const DERIVED&>(*this).begin();
    auto x = static_cast<const DERIVED&>(*this).end();
    while (now != x) {
      if (!filter(*now++)) {
        return 0;
      }
    }
    return 1;
  }

  int noneMatch(const std::function<int(arg_type)>& filter) const {
    auto now = static_cast<const DERIVED&>(*this).begin();
    auto x = static_cast<const DERIVED&>(*this).end();
    while (now != x) {
      if (filter(*now++)) {
        return 0;
      }
    }
    return 1;
  }

  template<typename T>
  void fill(T iter) const {
    auto now = static_cast<const DERIVED&>(*this).begin();
    auto x = static_cast<const DERIVED&>(*this).end();
    while (now != x) {
      *iter++ = *now++;
    }
  }

  std::vector<value_type> toVector() const {
    std::vector<value_type> ret;
    auto now = static_cast<const DERIVED&>(*this).begin();
    auto x = static_cast<const DERIVED&>(*this).end();
    while (now != x) {
      ret.emplace_back(*now++);
    }
    return std::move(ret);
  }

  std::set<value_type> toSet() const {
    std::set<value_type> ret;
    auto now = static_cast<const DERIVED&>(*this).begin();
    auto x = static_cast<const DERIVED&>(*this).end();
    while (now != x) {
      ret.insert(*now++);
    }
    return std::move(ret);
  }
};

template <typename ET>
struct NumberIter {
  using value_type = typename std::remove_cvref<ET>::type;
  using reference = value_type;
  using arg_type = const value_type;

  reference operator*() const { return i_; }

  int operator==(const NumberIter& o) const { return i_ == o.i_; }

  int operator!=(const NumberIter& o) const { return !(this->operator==(o)); }

  NumberIter& operator++() {
    ++i_;
    return *this;
  }

  NumberIter operator++(int) { return NumberIter{i_++}; }

  NumberIter& operator--() {
    --i_;
    return *this;
  }

  NumberIter operator--(int) { return NumberIter{i_--}; }

  value_type i_;
};

template <typename ET>
struct NumberRange : public RangeBase<NumberRange<ET>, NumberIter<ET>> {
  using iterator = NumberIter<ET>;
  using const_iterator = iterator;
  using value_type = typename iterator::value_type;

  NumberRange(value_type b, value_type e) : b_(b), e_(e) {}

  NumberIter<ET> begin() const { return NumberIter<ET>{b_}; }
  NumberIter<ET> end() const { return NumberIter<ET>{e_}; }

  int64 countImpl() const {
    return static_cast<int64>(e_ - b_);
  }

  const value_type b_;
  const value_type e_;
};

template <typename ET>
struct NumberIterD {
  using value_type = typename std::remove_cvref<ET>::type;
  using reference = value_type;
  using arg_type = const value_type;

  reference operator*() const { return i_; }

  int operator==(const NumberIterD& o) const { return i_ == o.i_; }

  int operator!=(const NumberIterD& o) const { return !(this->operator==(o)); }

  NumberIterD& operator++() {
    i_ += delta_;
    return *this;
  }

  NumberIterD operator++(int) {
    value_type x = i_;
    i_ += delta_;
    return NumberIterD{x, e_, delta_};
  }

  NumberIterD& operator--() {
    i_ -= delta_;
    return *this;
  }

  NumberIterD operator--(int) {
    value_type x = i_;
    i_ -= delta_;
    return NumberIterD{x, e_, delta_};
  }

  value_type i_;
  const value_type e_;
  const value_type delta_;
};

template <typename ET>
struct NumberRangeD : public RangeBase<NumberRangeD<ET>, NumberIterD<ET>> {
  using iterator = NumberIterD<ET>;
  using const_iterator = iterator;
  using value_type = typename iterator::value_type;

  NumberRangeD(value_type b, value_type n, value_type delta)
      : b_(b), e_(n), n_(n), delta_(delta) {
    value_type d = abs(delta_);
    value_type r = abs(n - b);
    value_type s = r / d;
    e_ = b + s * delta_;
    if (r % d) {
      e_ += delta_;
    }
  }

  NumberIterD<ET> begin() const { return NumberIterD<ET>{b_, e_, delta_}; }
  NumberIterD<ET> end() const { return NumberIterD<ET>{e_, e_, delta_}; }

  int64 countImpl() const {
    return e_ == b_ ? 0LL : static_cast<int64>((e_ - b_) / delta_);
  }

  value_type b_;
  value_type e_;
  const value_type delta_;
  const value_type n_;
};

template <typename T>
SL REQUIRES(is_native_integer<T>::value) RETURN(NumberRange<int64>)
    range(T s, T e) {
  PE_ASSERT(s <= e);
  return NumberRange<int64>{s, e};
}

template <typename T>
SL REQUIRES(is_native_integer<T>::value) RETURN(NumberRange<int64>)
    xrange(T s, T e) {
  return NumberRange<int64>{s, e + 1};
}

template <typename T>
SL REQUIRES(is_native_integer<T>::value) RETURN(NumberRangeD<int64>)
    range(T s, T e, T delta) {
  if (s < e) {
    PE_ASSERT(delta > 0);
  } else if (s > e) {
    PE_ASSERT(delta < 0);
  }
  return NumberRangeD<int64>{s, e, delta};
}

template <typename T>
SL REQUIRES(is_native_integer<T>::value) RETURN(NumberRangeD<int64>)
    xrange(T s, T e, T delta) {
  if (s < e) {
    PE_ASSERT(delta > 0);
  } else if (s > e) {
    PE_ASSERT(delta < 0);
  } else {
    PE_ASSERT(delta != 0);
  }
  T off_by_one = delta >= 0 ? 1 : -1;
  return NumberRangeD<int64>{s, e + off_by_one, delta};
}

template <typename IT>
struct ContainerRangeIter {
  using value_type = typename std::remove_cvref<typename IT::value_type>::type;
  using reference = typename IT::reference;
  using arg_type = const value_type&;

  reference operator*() { return *iter_; }

  int operator==(const ContainerRangeIter& o) const { return iter_ == o.iter_; }

  int operator!=(const ContainerRangeIter& o) const {
    return !(this->operator==(o));
  }

  ContainerRangeIter& operator++() {
    ++iter_;
    return *this;
  }

  ContainerRangeIter operator++(int) { return ContainerRangeIter{iter_++}; }

  ContainerRangeIter& operator--() {
    --iter_;
    return *this;
  }

  ContainerRangeIter operator--(int) { return ContainerRangeIter{iter_--}; }

  IT iter_;
};

template <typename IT>
struct ContainerRange
    : public RangeBase<ContainerRange<IT>, ContainerRangeIter<IT>> {
  using iterator = ContainerRangeIter<IT>;
  using const_iterator = iterator;
  using value_type = typename iterator::value_type;

  ContainerRange(IT b, IT e) : b_(b), e_(e) {}

  ContainerRangeIter<IT> begin() const { return ContainerRangeIter<IT>{b_}; }
  ContainerRangeIter<IT> end() const { return ContainerRangeIter<IT>{e_}; }

  IT b_;
  IT e_;
};

template <typename ET>
struct VectorRange
    : public RangeBase<
          VectorRange<ET>,
          ContainerRangeIter<typename vector<ET>::const_iterator>> {
  using IT = typename vector<ET>::const_iterator;
  using iterator = ContainerRangeIter<IT>;
  using const_iterator = iterator;
  using value_type = typename iterator::value_type;

  VectorRange(const vector<ET>& vec) : vec_(vec) {}

  VectorRange(vector<ET>&& vec) : vec_(std::move(vec)) {}

  ContainerRangeIter<IT> begin() const {
    return ContainerRangeIter<IT>{vec_.begin()};
  }
  ContainerRangeIter<IT> end() const {
    return ContainerRangeIter<IT>{vec_.end()};
  }

  int64 countImpl() const {
    return static_cast<int64>(vec_.size());
  }

  vector<ET> vec_;
};

template <typename CT>
SL auto range(CT& v) -> ContainerRange<typename CT::iterator> {
  return ContainerRange<typename CT::iterator>{v.begin(), v.end()};
}

template <typename CT>
SL auto range(const CT& v) -> ContainerRange<typename CT::const_iterator> {
  return ContainerRange<typename CT::const_iterator>{v.begin(), v.end()};
}

template <typename T>
SL REQUIRES(!is_native_integer<T>::value) RETURN(ContainerRange<T>)
    range(T s, T e) {
  return ContainerRange<T>{s, e};
}

template <typename ET>
struct ArrayRangeIter {
  using value_type = typename std::remove_cvref<ET>::type;
  using reference = const value_type&;
  using arg_type = const value_type&;

  reference operator*() { return *iter_; }

  int operator==(const ArrayRangeIter& o) const { return iter_ == o.iter_; }

  int operator!=(const ArrayRangeIter& o) const {
    return !(this->operator==(o));
  }

  ArrayRangeIter& operator++() {
    ++iter_;
    return *this;
  }

  ArrayRangeIter operator++(int) { return ArrayRangeIter{iter_++}; }

  ArrayRangeIter& operator--() {
    --iter_;
    return *this;
  }

  ArrayRangeIter operator--(int) { return ArrayRangeIter{iter_--}; }

  const value_type* iter_;
};

template <typename ET>
struct ArrayRange : public RangeBase<ArrayRange<ET>, ArrayRangeIter<ET>> {
  using iterator = ArrayRangeIter<ET>;
  using const_iterator = iterator;
  using value_type = typename iterator::value_type;

  ArrayRange(const value_type* b, const value_type* e) : b_(b), e_(e) {}

  ArrayRangeIter<ET> begin() const { return ArrayRangeIter<ET>{b_}; }
  ArrayRangeIter<ET> end() const { return ArrayRangeIter<ET>{e_}; }

  int64 countImpl() const {
    return static_cast<int64>(e_ - b_);
  }

  const value_type* b_;
  const value_type* e_;
};

template <typename T>
SL ArrayRange<T> range(T* s, T* e) {
  PE_ASSERT(s <= e);
  return ArrayRange<T>{s, e};
}

template <typename T>
SL ArrayRange<const T> range(const T* s, const T* e) {
  PE_ASSERT(s <= e);
  return ArrayRange<const T>{s, e};
}

template <typename T, int N>
SL ArrayRange<T> range(T (&a)[N]) {
  return ArrayRange<T>{a, a + N};
}

// IT: iterator type of source
// TT: type of the mapped result
template <typename IT, typename TT>
struct MappedRangeIter {
  using value_type = typename std::remove_cvref<TT>::type;
  using reference = value_type;
  using arg_type = const value_type&;
  using src_arg_type = typename IT::arg_type;

  reference operator*() { return mapper_(*iter_); }

  int operator==(const MappedRangeIter& o) const { return iter_ == o.iter_; }

  int operator!=(const MappedRangeIter& o) const {
    return !(this->operator==(o));
  }

  MappedRangeIter& operator++() {
    ++iter_;
    return *this;
  }

  MappedRangeIter operator++(int) { return MappedRangeIter{iter_++, mapper_}; }

  MappedRangeIter& operator--() {
    --iter_;
    return *this;
  }

  MappedRangeIter operator--(int) { return MappedRangeIter{iter_--, mapper_}; }

  IT iter_;
  const std::function<TT(src_arg_type)>& mapper_;
};

template <typename IT, typename TT>
struct MappedRange
    : public RangeBase<MappedRange<IT, TT>, MappedRangeIter<IT, TT>> {
  using iterator = MappedRangeIter<IT, TT>;
  using const_iterator = iterator;
  using value_type = typename iterator::value_type;

  MappedRange(IT b, IT e,
              const std::function<TT(typename iterator::src_arg_type)>& mapper)
      : b_(b), e_(e), mapper_(mapper) {}

  MappedRangeIter<IT, TT> begin() const {
    return MappedRangeIter<IT, TT>{b_, mapper_};
  }
  MappedRangeIter<IT, TT> end() const {
    return MappedRangeIter<IT, TT>{e_, mapper_};
  }

  IT b_;
  IT e_;
  const std::function<TT(typename iterator::src_arg_type)> mapper_;
};

template <typename IT>
struct FilterRangeIter {
  using value_type = typename IT::value_type;
  using reference = typename IT::reference;
  using arg_type = typename IT::arg_type;
  using src_arg_type = typename IT::arg_type;

  reference operator*() { return *iter_; }

  int operator==(const FilterRangeIter& o) const { return iter_ == o.iter_; }

  int operator!=(const FilterRangeIter& o) const {
    return !(this->operator==(o));
  }

  FilterRangeIter& operator++() {
    while (iter_ != e_) {
      ++iter_;
      if (iter_ == e_) break;
      if (filter_(*iter_)) break;
    }
    return *this;
  }

  FilterRangeIter operator++(int) {
    IT x = iter_;
    this->operator++();
    return FilterRangeIter{x, e_, filter_};
  }

  IT iter_;
  IT e_;
  const std::function<int(src_arg_type)>& filter_;
};

template <typename IT>
struct FilterRange : public RangeBase<FilterRange<IT>, FilterRangeIter<IT>> {
  using iterator = FilterRangeIter<IT>;
  using const_iterator = iterator;
  using value_type = typename FilterRangeIter<IT>::value_type;

  FilterRange(IT b, IT e,
              const std::function<int(const typename IT::value_type&)>& filter)
      : b_(b), e_(e), filter_(filter) {}

  FilterRangeIter<IT> begin() const {
    auto now = b_;
    while (now != e_ && !filter_(*now)) ++now;
    return FilterRangeIter<IT>{now, e_, filter_};
  }

  FilterRangeIter<IT> end() const {
    return FilterRangeIter<IT>{e_, e_, filter_};
  }

  IT b_;
  IT e_;
  const std::function<int(typename iterator::src_arg_type)> filter_;
};

// irange support. i = index.
template <typename IT>
struct ContainerIterI {
  struct ContainerItemI {
    const int64 i;
    typename IT::reference v;
  };

  using value_type = ContainerItemI;
  using reference = ContainerItemI;

  ContainerItemI operator*() { return ContainerItemI{idx_, *iter_}; }

  int operator==(const ContainerIterI& o) const { return iter_ == o.iter_; }

  int operator!=(const ContainerIterI& o) const {
    return !(this->operator==(o));
  }

  ContainerIterI& operator++() {
    ++idx_;
    ++iter_;
    return *this;
  }

  ContainerIterI operator++(int) { return ContainerIterI{iter_++, idx_++}; }

  ContainerIterI& operator--() {
    --idx_;
    --iter_;
    return *this;
  }

  ContainerIterI operator--(int) { return ContainerIterI{iter_--, idx_--}; }

  IT iter_;
  int64 idx_;
};

template <typename IT>
struct ContainerRangeI {
  using iterator = ContainerIterI<IT>;
  using const_iterator = ContainerIterI<IT>;

  ContainerIterI<IT> begin() const { return ContainerIterI<IT>{b_, 0}; }
  ContainerIterI<IT> end() const { return ContainerIterI<IT>{e_, 0}; }

  IT b_;
  IT e_;
};

template <typename T>
struct ArrayIterI {
  struct ContainerItemI {
    const int64 i;
    T& v;
  };

  using value_type = ContainerItemI;
  using reference = ContainerItemI;

  ContainerItemI operator*() { return ContainerItemI{idx_, start_[idx_]}; }

  int operator==(const ArrayIterI& o) const {
    return idx_ == o.idx_ && start_ == o.start_;
  }

  int operator!=(const ArrayIterI& o) const { return !(this->operator==(o)); }

  ArrayIterI& operator++() {
    ++idx_;
    return *this;
  }

  ArrayIterI operator++(int) { return ArrayIterI{start_, idx_++}; }

  ArrayIterI& operator--() {
    --idx_;
    return *this;
  }

  ArrayIterI operator--(int) { return ArrayIterI{start_, idx_--}; }

  T* start_;
  int64 idx_;
};

template <typename T>
struct ArrayRangeI {
  using iterator = ArrayIterI<T>;
  using const_iterator = ArrayIterI<T>;

  ArrayIterI<T> begin() const { return ArrayIterI<T>{start_, 0}; }
  ArrayIterI<T> end() const { return ArrayIterI<T>{start_, cnt_}; }

  T* start_;
  int64 cnt_;
};

template <typename T>
SL ArrayRangeI<T> irange(vector<T>& v) {
  return ArrayRangeI<T>{&v[0], sz(v)};
}

template <typename T>
SL ArrayRangeI<const T> irange(const vector<T>& v) {
  return ArrayRangeI<const T>{&v[0], sz(v)};
}

template <typename T>
SL ArrayRangeI<T> irange(T* s, T* e) {
  PE_ASSERT(s <= e);
  return ArrayRangeI<T>{s, e - s};
}

template <typename T>
SL ArrayRangeI<const T> irange(const T* s, const T* e) {
  PE_ASSERT(s <= e);
  return ArrayRangeI<const T>{s, e - s};
}

template <typename T, int N>
SL ArrayRangeI<T> irange(T (&a)[N]) {
  return ArrayRangeI<T>{a, N};
}

template <typename CT>
SL auto irange(CT& v) -> ContainerRangeI<typename CT::iterator> {
  return ContainerRangeI<typename CT::iterator>{v.begin(), v.end()};
}

template <typename CT>
SL auto irange(const CT& v) -> ContainerRangeI<typename CT::const_iterator> {
  return ContainerRangeI<typename CT::const_iterator>{v.begin(), v.end()};
}

SL vector<pair<int64, int64>> make_segment(int64 s, int64 e, int64 b) {
  if (s > e) {
    return vector<pair<int64, int64>>();
  }
  int64 cnt = (e - s + 1 + b - 1) / b;
  vector<pair<int64, int64>> ret(cnt);
  int64 x = 0, y = s - 1;
  for (int64 i = 0; i < cnt; ++i) {
    x = y + 1;
    y += b;
    if (y > e) y = e;
    ret[i].first = x;
    ret[i].second = y;
  }
  return ret;
}
#endif