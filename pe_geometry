#ifndef PE_GEOMETRY_
#define PE_GEOMETRY_

#include "pe_base"
#include "pe_int128"
#include "pe_type_traits"
#include "pe_nt"

namespace pe {
template <typename T>
struct Point3D;

template <typename T>
struct Point2D {
  Point2D(T x = 0, T y = 0) : x(x), y(y) {}
  T x, y;

  int operator==(const Point2D& o) const { return x == o.x && y == o.y; }

  int operator!=(const Point2D& o) const { return !(*this == o); }

  int operator<(const Point2D& o) const {
    return x < o.x || x == o.x && y < o.y;
  }

  int operator<=(const Point2D& o) const { return !(*this > o); }

  int operator>(const Point2D& o) const {
    return x > o.x || x == o.x && y > o.y;
  }

  int operator>=(const Point2D& o) const { return !(*this < o); }

  operator Point3D<T>() const { return Point3D<T>{x, y, 0}; }

  T Norm2() const { return Dot(*this, *this); }

  double Norm() const { return sqrt(Norm2()); }

  const Point2D& Print() const {
    std::cout << x << ", " << y;
    return *this;
  }

  const Point2D& PrintLn() const {
    std::cout << x << ", " << y << std::endl;
    return *this;
  }

  friend Point2D operator-(const Point2D& a, const Point2D& b) {
    return Point2D{a.x - b.x, a.y - b.y};
  }

  friend Point2D operator-(const Point2D& a, const T shift) {
    return Point2D{a.x - shift, a.y - shift};
  }

  friend Point2D operator+(const Point2D& a, const Point2D& b) {
    return Point2D{a.x + b.x, a.y + b.y};
  }

  friend Point2D operator+(const Point2D& a, const T shift) {
    return Point2D{a.x + shift, a.y + shift};
  }

  friend Point2D operator*(const Point2D& a, double u) {
    return Point2D{a.x * u, a.y * u};
  }

  friend T Dot(const Point2D& a, const Point2D& b) {
    return a.x * b.x + a.y * b.y;
  }

  friend T Dot(const Point2D& a, const Point2D& b, const Point2D& c) {
    return Dot(b - a, c - a);
  }

  friend T Cross(const Point2D& a, const Point2D& b) {
    return a.x * b.y - a.y * b.x;
  }

  friend T Cross(const Point2D& a, const Point2D& b, const Point2D& c) {
    return Cross(b - a, c - a);
  }

  friend double Norm(const Point2D& a) { return sqrt(Dot(a, a)); }

  friend T Norm2(const Point2D& a) { return Dot(a, a); }

  friend std::ostream& operator<<(std::ostream& o, const Point2D& p) {
    return o << p.x << ", " << p.y;
  }
};

template <typename T>
struct Line2D {
  T A, B, C;

  Line2D(T A = 0, T B = 0, T C = 0) : A(A), B(B), C(C) { Normalize(); }

  Line2D(Point2D<T> a, Point2D<T> b) {
    Point2D<T> delta = b - a;
    A = delta.y;
    B = -delta.x;
    C = -a.x * delta.y + a.y * delta.x;
    Normalize();
  }

  void Normalize() { Normalize(IntToType<is_builtin_integer_v<T>>()); }

  void Normalize(IntToType<1>) {
    if (A == 0 && B == 0) {
      return;
    }
    auto t = Gcd(A, B, C);
    if (IntSign(A == 0 ? B : A) != IntSign(t)) {
      t = -t;
    }
    A /= t;
    B /= t;
    C /= t;
  }

  void Normalize(IntToType<0>) {}

  int operator==(const Line2D& o) const {
    return A == o.A && B == o.B && C == o.C;
  }

  int operator!=(const Line2D& o) const { return !(*this == o); }

  int operator<(const Line2D& o) const {
    if (A != o.A) return A < o.A;
    if (B != o.B) return B < o.B;
    return C < o.C;
  }

  int operator<=(const Line2D& o) const { return !(*this > o); }

  int operator>(const Line2D& o) const {
    if (A != o.A) return A > o.A;
    if (B != o.B) return B > o.B;
    return C > o.C;
  }

  int operator>=(const Line2D& o) const { return !(*this < o); }

  friend std::ostream& operator<<(std::ostream& o, const Line2D& l) {
    return o << l.A << ", " << l.B << ", " << l.C;
  }
};

template <typename T>
struct Point3D {
  Point3D(T x = 0, T y = 0, T z = 0) : x(x), y(y), z(z) {}
  T x, y, z;

  int operator==(const Point3D& o) const {
    return x == o.x && y == o.y && z == o.z;
  }

  int operator!=(const Point3D& o) const { return !(*this == o); }

  int operator<(const Point3D& o) const {
    return x < o.x || x == o.x && y < o.y || x == o.x && y == o.y && z < o.z;
  }

  int operator<=(const Point3D& o) const { return !(*this > o); }

  int operator>(const Point3D& o) const {
    return x > o.x || x == o.x && y > o.y || x == o.x && y == o.y && z > o.z;
  }

  int operator>=(const Point3D& o) const { return !(*this < o); }

  operator Point2D<T>() const { return Point2D<T>{x, y}; }

  T Norm2() const { return Dot(*this, *this); }

  double Norm() const { return sqrt(Norm2()); }

  const Point3D& Print() const {
    std::cout << x << ", " << y << ", " << z;
    return *this;
  }

  const Point3D& PrintLn() const {
    std::cout << x << ", " << y << ", " << z << std::endl;
    return *this;
  }

  friend Point3D operator-(const Point3D& a, const Point3D& b) {
    return Point3D{a.x - b.x, a.y - b.y, a.z - b.z};
  }

  friend Point3D operator-(const Point3D& a, const T shift) {
    return Point3D{a.x - shift, a.y - shift, a.z - shift};
  }

  friend Point3D operator+(const Point3D& a, const Point3D& b) {
    return Point3D{a.x + b.x, a.y + b.y, a.z + b.z};
  }

  friend Point3D operator+(const Point3D& a, const T shift) {
    return Point3D{a.x + shift, a.y + shift, a.z + shift};
  }

  friend Point3D operator*(const Point3D& a, double u) {
    return Point3D{a.x * u, a.y * u};
  }

  friend T Dot(const Point3D& a, const Point3D& b) {
    return a.x * b.x + a.y * b.y + a.z * b.z;
  }

  friend T Dot(const Point3D& a, const Point3D& b, const Point3D& c) {
    return Dot(b - a, c - a);
  }

  friend T Cross(const Point3D& a, const Point3D& b, const Point3D& c) {
    return a.x * Cross({b.y, b.z}, {c.y, c.z}) -
           b.x * Cross({a.y, a.z}, {c.y, c.z}) +
           c.x * Cross({a.y, a.z}, {b.y, b.z});
  }

  friend Point3D Cross(const Point3D& a, const Point3D& b, const Point3D& c,
                       const Point3D& d) {
    return Cross(b - a, c - a, d - a);
  }

  friend double Norm(const Point3D& a) { return sqrt(Dot(a, a)); }

  friend T Norm2(const Point3D& a) { return Dot(a, a); }

  friend std::ostream& operator<<(std::ostream& o, const Point3D& p) {
    return o << p.x << ", " << p.y << ", " << p.z;
  }
};

template <typename T>
SL T Dot(T x0, T y0, T x1, T y1) {
  return x0 * x1 + y0 * y1;
}

template <typename T>
SL T Cross(T x0, T y0, T x1, T y1) {
  return x0 * y1 - y0 * x1;
}

template <typename T>
SL T Dot(std::pair<T, T> v0, std::pair<T, T> v1) {
  return Dot(v0.first, v0.second, v1.first, v1.second);
}

template <typename T>
SL T Cross(std::pair<T, T> v0, std::pair<T, T> v1) {
  return Cross(v0.first, v0.second, v1.first, v1.second);
}

template <typename T>
SL T Dot(std::pair<T, T> v0, std::pair<T, T> v1, std::pair<T, T> v2) {
  return Dot<std::pair<T, T>>(
      std::pair<T, T>{v1.first - v0.first, v1.second - v0.second},
      std::pair<T, T>{v2.first - v0.first, v2.second - v0.second});
}

template <typename T>
SL T Cross(std::pair<T, T> v0, std::pair<T, T> v1, std::pair<T, T> v2) {
  return Cross<std::pair<T, T>>(
      std::pair<T, T>{v1.first - v0.first, v1.second - v0.second},
      std::pair<T, T>{v2.first - v0.first, v2.second - v0.second});
}
}  // namespace pe
#endif
