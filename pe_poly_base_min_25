#ifndef PE_POLY_BASE_MIN_25_
#define PE_POLY_BASE_MIN_25_

#if PE_HAS_INT128

#include "pe_poly_base_common"

#define HAS_POLY_MIN25 1
#define HAS_POLY_MUL_MIN25 1
#define HAS_POLY_MUL_MIN25_SMALL 1

// ntt authored by Min_25
// https://yukicoder.me/submissions/217430
namespace poly_min25 {

using word_t = uint64;
using dword_t = uint128;

static constexpr word_t mul_inv(word_t n, int e = 6, word_t x = 1) {
  return e == 0 ? x : mul_inv(n, e - 1, x * (2 - x * n));
}

template <word_t mod, word_t prim_root>
class UnsafeMod {
 private:
  static constexpr int word_bits = 8 * sizeof(word_t);

 public:
  static constexpr word_t inv = mul_inv(mod);
  static constexpr word_t r2 = -dword_t(mod) % mod;
  static constexpr int level = pe_ctzll(mod - 1);
  static_assert(inv * mod == 1, "invalid 1/M modulo 2^@.");

  UnsafeMod() = default;
  UnsafeMod(word_t n) : x(init(n)){};
  static word_t modulus() { return mod; }
  static word_t init(word_t w) { return reduce(dword_t(w) * r2); }
  static word_t reduce(const dword_t w) {
    return word_t(w >> word_bits) + mod -
           word_t((dword_t(word_t(w) * inv) * mod) >> word_bits);
  }
  static UnsafeMod omega() {
    return UnsafeMod(prim_root).pow((mod - 1) >> level);
  }
  UnsafeMod& operator+=(UnsafeMod rhs) {
    x += rhs.x;
    return *this;
  }
  UnsafeMod& operator-=(UnsafeMod rhs) {
    x += 3 * mod - rhs.x;
    return *this;
  }
  UnsafeMod& operator*=(UnsafeMod rhs) {
    x = reduce(dword_t(x) * rhs.x);
    return *this;
  }
  UnsafeMod operator+(UnsafeMod rhs) const { return UnsafeMod(*this) += rhs; }
  UnsafeMod operator-(UnsafeMod rhs) const { return UnsafeMod(*this) -= rhs; }
  UnsafeMod operator*(UnsafeMod rhs) const { return UnsafeMod(*this) *= rhs; }
  word_t get() const { return reduce(x) % mod; }
  void set(word_t n) { x = n; }
  UnsafeMod pow(word_t e) const {
    UnsafeMod ret = UnsafeMod(1);
    for (UnsafeMod base = *this; e; e >>= 1, base *= base)
      if (e & 1) ret *= base;
    return ret;
  }
  UnsafeMod inverse() const { return pow(mod - 2); }
  friend ostream& operator<<(ostream& os, const UnsafeMod& m) {
    return os << m.get();
  }
  static void debug() {
    printf("%llu %llu %llu %llu\n", mod, inv, r2, omega().get());
  }
  word_t x;
};

template <typename mod_t>
void transform(mod_t* A, int n, const mod_t* roots, const mod_t* iroots) {
  const int logn = pe_ctz(n), nh = n >> 1, lv = mod_t::level;
  const mod_t one = mod_t(1), imag = roots[lv - 2];

  mod_t dw[lv - 1];
  dw[0] = roots[lv - 3];
  for (int i = 1; i < lv - 2; ++i)
    dw[i] = dw[i - 1] * iroots[lv - 1 - i] * roots[lv - 3 - i];
  dw[lv - 2] = dw[lv - 3] * iroots[1];

  if (logn & 1)
    for (int i = 0; i < nh; ++i) {
      mod_t a = A[i], b = A[i + nh];
      A[i] = a + b;
      A[i + nh] = a - b;
    }
  for (int e = logn & ~1; e >= 2; e -= 2) {
    const int m = 1 << e, m4 = m >> 2;
    mod_t w2 = one;
    for (int i = 0; i < n; i += m) {
      const mod_t w1 = w2 * w2, w3 = w1 * w2;
      for (int j = i; j < i + m4; ++j) {
        mod_t a0 = A[j + m4 * 0] * one, a1 = A[j + m4 * 1] * w2;
        mod_t a2 = A[j + m4 * 2] * w1, a3 = A[j + m4 * 3] * w3;
        mod_t t02p = a0 + a2, t13p = a1 + a3;
        mod_t t02m = a0 - a2, t13m = (a1 - a3) * imag;
        A[j + m4 * 0] = t02p + t13p;
        A[j + m4 * 1] = t02p - t13p;
        A[j + m4 * 2] = t02m + t13m;
        A[j + m4 * 3] = t02m - t13m;
      }
      w2 *= dw[pe_ctz(~(i >> e))];
    }
  }
}

template <typename mod_t>
void itransform(mod_t* A, int n, const mod_t* roots, const mod_t* iroots) {
  const int logn = pe_ctz(n), nh = n >> 1, lv = mod_t::level;
  const mod_t one = mod_t(1), imag = iroots[lv - 2];

  mod_t dw[lv - 1];
  dw[0] = iroots[lv - 3];
  for (int i = 1; i < lv - 2; ++i)
    dw[i] = dw[i - 1] * roots[lv - 1 - i] * iroots[lv - 3 - i];
  dw[lv - 2] = dw[lv - 3] * roots[1];

  for (int e = 2; e <= logn; e += 2) {
    const int m = 1 << e, m4 = m >> 2;
    mod_t w2 = one;
    for (int i = 0; i < n; i += m) {
      const mod_t w1 = w2 * w2, w3 = w1 * w2;
      for (int j = i; j < i + m4; ++j) {
        mod_t a0 = A[j + m4 * 0], a1 = A[j + m4 * 1];
        mod_t a2 = A[j + m4 * 2], a3 = A[j + m4 * 3];
        mod_t t01p = a0 + a1, t23p = a2 + a3;
        mod_t t01m = a0 - a1, t23m = (a2 - a3) * imag;
        A[j + m4 * 0] = (t01p + t23p) * one;
        A[j + m4 * 2] = (t01p - t23p) * w1;
        A[j + m4 * 1] = (t01m + t23m) * w2;
        A[j + m4 * 3] = (t01m - t23m) * w3;
      }
      w2 *= dw[pe_ctz(~(i >> e))];
    }
  }
  if (logn & 1)
    for (int i = 0; i < nh; ++i) {
      mod_t a = A[i], b = A[i + nh];
      A[i] = a + b;
      A[i + nh] = a - b;
    }
}

template <typename mod_t>
void convolve(mod_t* A, int s1, mod_t* B, int s2, bool cyclic = false) {
  const int s = cyclic ? max(s1, s2) : s1 + s2 - 1;
  const int size = 1 << (31 - pe_clz(2 * s - 1));
  assert(size <= (int64(1) << mod_t::level));

  mod_t roots[mod_t::level], iroots[mod_t::level];
  roots[0] = mod_t::omega();
  for (int i = 1; i < mod_t::level; ++i) roots[i] = roots[i - 1] * roots[i - 1];
  iroots[0] = roots[0].inverse();
  for (int i = 1; i < mod_t::level; ++i)
    iroots[i] = iroots[i - 1] * iroots[i - 1];

  fill(A + s1, A + size, 0);
  transform(A, size, roots, iroots);
  const mod_t inv = mod_t(size).inverse();
  if (A == B && s1 == s2) {
    for (int i = 0; i < size; ++i)
      (A[i] *= A[i]) *= inv;  // not A[i] *= A[i] * inv;
  } else {
    fill(B + s2, B + size, 0);
    transform(B, size, roots, iroots);
    for (int i = 0; i < size; ++i)
      (A[i] *= B[i]) *= inv;  // not A[i] *= B[i] * inv;
  }
  itransform(A, size, roots, iroots);
}

using m64_1 = UnsafeMod<1121333583512862721, 51>;
using m64_2 = UnsafeMod<1128298388379402241, 23>;  // <= 1.14e18 (sub.D = 3)

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    poly_mul_internal(const T* f, int n, const T* g, int m, T* result,
                      int64 mod) {
  const int alignedSize = 1 << pe_lg(2 * (n + m - 1) - 1);

  const int ntt_size = alignedSize;

  vector<m64_1> f1(ntt_size), g1(ntt_size);
  vector<m64_2> f2(ntt_size), g2(ntt_size);

#if ENABLE_OPENMP
#pragma omp parallel sections if (n + m >= 100000)
#endif
  {
#if ENABLE_OPENMP
#pragma omp section
#endif
    {
      for (int i = 0; i < n; ++i) f1[i] = f[i];
      for (int i = 0; i < m; ++i) g1[i] = g[i];
      convolve(f1.data(), n, g1.data(), m, false);
    }
#if ENABLE_OPENMP
#pragma omp section
#endif
    {
      for (int i = 0; i < n; ++i) f2[i] = f[i];
      for (int i = 0; i < m; ++i) g2[i] = g[i];
      convolve(f2.data(), n, g2.data(), m, false);
    }
  }

  const int retSize = n + m - 1;
  const uint64 mod1 = m64_1::modulus(), mod2 = m64_2::modulus();
  const uint64 inv = 162;

#if ENABLE_OPENMP
#pragma omp parallel for schedule(dynamic, 100000) if (n + m >= 100000)
#endif
  for (int i = 0; i < retSize; ++i) {
    const uint64 r1 = f1[i].get(), r2 = f2[i].get();
    const uint64 x = r2 >= r1 ? r2 - r1 : mod2 - r1 + r2;
    const uint64 y = static_cast<uint128>(x) * inv % mod2;
    const uint128 tmp = static_cast<uint128>(y) * mod1 + r1;
    result[i] = mod > 0 ? tmp % mod : tmp;
  }
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    poly_mul(const T* X, const int n, const T* Y, const int m, T* result,
             int64 mod) {
  using unsignedT = typename std::make_unsigned<T>::type;
  poly_mul_wrapper<unsignedT>((const unsignedT*)X, n, (const unsignedT*)Y, m,
                              (unsignedT*)result, mod,
                              &poly_mul_internal<unsignedT>);
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(vector<T>)
    poly_mul(const vector<T>& X, const vector<T>& Y, int64 mod) {
  const int n = (int)X.size() - 1;
  const int m = (int)Y.size() - 1;

  vector<T> result(n + m + 1);
  poly_mul(&X[0], n + 1, &Y[0], m + 1, &result[0], mod);

  return result;
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    poly_mul_small_internal(const T* f, int n, const T* g, int m, T* result,
                            int64 mod) {
  const int alignedSize = 1 << pe_lg(2 * (n + m - 1) - 1);

  const int ntt_size = alignedSize;

  vector<m64_2> f1(ntt_size), g1(ntt_size);

  for (int i = 0; i < n; ++i) f1[i] = f[i];
  for (int i = 0; i < m; ++i) g1[i] = g[i];
  convolve(f1.data(), n, g1.data(), m, false);

  const int retSize = n + m - 1;

#if ENABLE_OPENMP
#pragma omp parallel for schedule(dynamic, 100000) if (n + m >= 100000)
#endif
  for (int i = 0; i < retSize; ++i) {
    const uint64 a = f1[i].get();
    result[i] = mod > 0 ? a % mod : a;
  }
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    poly_mul_small(const T* X, const int n, const T* Y, const int m, T* result,
                   int64 mod) {
  using unsignedT = typename std::make_unsigned<T>::type;
  poly_mul_wrapper<unsignedT>((const unsignedT*)X, n, (const unsignedT*)Y, m,
                              (unsignedT*)result, mod,
                              &poly_mul_small_internal<unsignedT>);
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(vector<T>)
    poly_mul_small(const vector<T>& X, const vector<T>& Y, int64 mod) {
  const int n = (int)X.size();
  const int m = (int)Y.size();

  vector<T> result(n + m - 1);
  poly_mul_small(&X[0], n, &Y[0], m, &result[0], mod);

  return result;
}
}  // namespace poly_min25
#else
#define HAS_POLY_MIN25 0
#define HAS_POLY_MUL_MIN25 0
#define HAS_POLY_MUL_MIN25_SMALL 0
#endif

#endif
