#ifndef PE_TREE_
#define PE_TREE_

#include "pe_base"
// Maps distinct elements to 1..n
class IndexHelper {
 public:
  IndexHelper() : size_(0) {}

  IndexHelper(const vector<int64>& elements) { Reset(elements); }

  IndexHelper(vector<int64>&& elements) { Reset(std::move(elements)); }

  template <typename IT>
  IndexHelper(IT s, IT e) {
    Reset(std::vector<int64>(s, e));
  }

  IndexHelper& Reset(const vector<int64>& elements) {
    elements_ = elements;
    ResetInternal();
    return *this;
  }

  IndexHelper& Reset(vector<int64>&& elements) {
    elements_ = std::move(elements);
    ResetInternal();
    return *this;
  }

  void ResetInternal() {
    sort(elements_.begin(), elements_.end());
    size_ = std::unique(elements_.begin(), elements_.end()) - elements_.begin();
    elements_.resize(size_);
  }

  int64 size() const { return size_; }

  int64 Index(int64 v) const { return this->operator[](v); }

  int64 operator[](int64 v) const {
    const int64 idx = std::lower_bound(elements_.begin(), elements_.end(), v) -
                      elements_.begin();
    return idx + 1;
  }

 private:
  vector<int64> elements_;
  int64 size_;
};

template <typename T, typename Derived>
class BitBase {
 public:
  BitBase(int size = 0) { Reset(size); }
  BitBase(const IndexHelper& ih) { Reset(static_cast<int>(ih.size())); }

  Derived& Reset(int new_size) {
    size_ = new_size;
    data_.resize(size_ + 1);
    Clear();
    return static_cast<Derived&>(*this);
  }

  Derived& Clear() {
    std::fill(data_.begin(), data_.end(), 0);
    return static_cast<Derived&>(*this);
  }

 public:
  vector<T> data_;
  int size_;
};

// Range update bit indexed tree.
// Support range based update and query the value of a specified index.
template <typename T>
class RUBit : public BitBase<T, RUBit<T>> {
 public:
  using BitBase<T, RUBit<T>>::BitBase;
  using BitBase<T, RUBit<T>>::data_;
  using BitBase<T, RUBit<T>>::size_;

  RUBit& Update(int x, T delta) {
    for (; x <= size_; x += x & -x) {
      data_[x] += delta;
    }
    return *this;
  }

  RUBit& Update(int x, int y, T delta) {
    return Update(x, delta).Update(y + 1, -delta);
  }

  T Query(int x) const {
    T ret(0);
    for (; x > 0; x -= x & -x) {
      ret += data_[x];
    }
    return ret;
  }
};

// Range sum query bit indexed tree.
// Support index based update and value of a range.
template <typename T>
class RSQBit : public BitBase<T, RSQBit<T>> {
 public:
  using BitBase<T, RSQBit<T>>::BitBase;
  using BitBase<T, RSQBit<T>>::data_;
  using BitBase<T, RSQBit<T>>::size_;

  RSQBit& Update(int x, T delta) {
    for (; x <= size_; x += x & -x) {
      data_[x] += delta;
    }
    return *this;
  }

  T Query(int x) const {
    T ret = 0;
    for (; x > 0; x -= x & -x) {
      ret += data_[x];
    }
    return ret;
  }

  T Query(int x, int y) const { return Query(y) - Query(x - 1); }
};

#endif
