#ifndef PE_MEMORY_
#define PE_MEMORY_

#include "pe_base"

namespace pe {
#if OS_TYPE_WIN
struct LargeMemory {
 public:
  LargeMemory() = default;

  ~LargeMemory() {
    std::vector<void*> vec;
    for (auto iter = allocated_.begin(); iter != allocated_.end(); ++iter) {
      vec.push_back(iter->first);
    }

    const int64 size = static_cast<int64>(vec.size());
    for (int i = 0; i < size; ++i) Deallocate(vec[i]);
  }

  void* Allocate(int64 size) {
    HANDLE hMapFile = ::CreateFileMapping(
        INVALID_HANDLE_VALUE, nullptr, PAGE_READWRITE | SEC_COMMIT, size >> 32,
        size % (1LL << 32), nullptr);
    assert(GetLastError() == 0);

    void* ptr = ::MapViewOfFile(hMapFile, FILE_MAP_ALL_ACCESS, 0, 0, 0);
    assert(GetLastError() == 0);
    allocated_.insert(std::make_pair(ptr, hMapFile));

    return ptr;
  }

  void Deallocate(void* ptr) {
    auto where = allocated_.find(ptr);
    if (where == allocated_.end()) return;

    ::UnmapViewOfFile(ptr);
    ::CloseHandle(where->second);
    allocated_.erase(where);
  }

 private:
  std::map<void*, HANDLE> allocated_;
};

SL LargeMemory& LmAllocator() {
  static LargeMemory __lm;
  return __lm;
}

struct LmAllocator {
  static void* Allocate(int64 size) { return LmAllocator().Allocate(size); }

  static void Deallocate(void* ptr) { LmAllocator().Deallocate(ptr); }
};

SL void* LmAllocate(int64 size) { return LmAllocator::Allocate(size); }

SL void LmDeallocate(void* ptr) { LmAllocator::Deallocate(ptr); }
#endif

SL void* StdAllocate(int64 size) { return new char[size]; }

SL void StdDeallocate(void* ptr) { delete[] ptr; }

struct StdAllocator {
  static void* Allocate(int64 size) { return new char[size]; }
  static void Deallocate(void* ptr) { delete[] ptr; }
};
}  // namespace pe
#endif
