#ifndef PE_POLY_ALGO_
#define PE_POLY_ALGO_

#include "pe_base"
#include "pe_int128"
#include "pe_mod"
#include "pe_type_traits"
#include "pe_nt"
#include "pe_poly_base"
#include "pe_poly"

// Initialize the bernoulli numbers.
// B[1] = -1/2
// invs[n] should be available.
SL void init_bernoulli_number(int64* dest, int64 n, int64* invs, int64 mod) {
  vector<uint64> t(n);
  uint64 v = 1;
  for (int64 i = 0; i < n; ++i) {
    v = mul_mod_ex(v, invs[i + 1], mod);
    t[i] = v;
  }

  auto result = poly_inv<uint64>(t, static_cast<ssize>(n), mod);

  uint64 c = 1;
  dest[0] = result[0];
  for (int64 i = 1; i < n; ++i) {
    c = mul_mod_ex(c, i, mod);
    dest[i] = mul_mod_ex(result[i], c, mod);
  }
}

SL void init_bernoulli_number(int64* dest, int64 n, int64 mod) {
  vector<uint64> invs(n + 1);
  init_inv(reinterpret_cast<int64*>(&invs[0]), n, mod);
  init_bernoulli_number(dest, n, reinterpret_cast<int64*>(&invs[0]), mod);
}

// Returns [n, 0], [n, 1], ..., [n, n]
// The nth row of the stirling number of the first kind.
// Formula: x^(n) rising factorial
SL vector<int64> gen_stirling1(int64 n, int64 mod, int has_sign = 0) {
  PE_ASSERT(n > 0);
  vector<int64> t(2 * n);
  if (has_sign) {
    for (int64 i = 0, j = 0; i < 2 * n; i += 2, ++j) {
      t[i] = j == 0 ? 0 : mod - j;
      t[i + 1] = 1;
    }
  } else {
    for (int64 i = 0, j = 0; i < 2 * n; i += 2, ++j) {
      t[i] = j;
      t[i + 1] = 1;
    }
  }
  return poly_batch_mul(t, mod);
}

// Returns [0, n], [1, n], ..., [cnt, n]
// The nth column of the stirling number of the first kind.
// Formula: ((-log(1-x))^m)/m!
// http://oeis.org/A008275
SL vector<int64> gen_stirling1_column(int64 n, int64 m, int64 mod) {
  vector<int64> a = poly_log(vector<int64>{1, mod - 1}, m + 1, mod);
  for (auto& i : a) i = i == 0 ? 0 : mod - i;
  vector<int64> b{1};
  for (int64 t = n; t > 0; t >>= 1) {
    if (t & 1) {
      b = poly_mul(b, a, mod);
      if (static_cast<ssize>(b.size()) > m + 1) b.resize(m + 1);
    }
    if (t > 1) {
      a = poly_mul(a, a, mod);
      if (static_cast<ssize>(a.size()) > m + 1) a.resize(m + 1);
    }
  }
  int64 t = 1;
  for (int64 i = 1; i <= n; ++i) t = mul_mod_ex(t, i, mod);
  t = mod_inv(t, mod);
  int64 now = 1;
  const int64 limit = min<ssize>(static_cast<ssize>(b.size()), m + 1);
  for (int64 i = 0; i < limit; ++i) {
    b[i] = mul_mod_ex(b[i], now, mod);
    b[i] = mul_mod_ex(b[i], t, mod);
    now = mul_mod_ex(now, i + 1, mod);
  }
  for (int64 i = limit; i <= m; ++i) {
    b.push_back(0);
  }
  return b;
}

// Returns {n, 0}, {n, 1}, ..., {n, n}
// The nth row of the stirling number of the second kind.
// Formula: (the point value egf of x^n) * (e^(-x))
SL vector<int64> gen_stirling2(int64 n, int64 mod) {
  // x^n at {0, 1, 2, ..., n}
  vector<int64> a(n + 1);
  int64 now = 1;
  for (int64 i = 1; i <= n; ++i) now = mul_mod_ex(now, i, mod);
  now = mod_inv(now, mod);
  for (int64 i = n; i >= 0; --i) {
    a[i] = mul_mod_ex(now, power_mod_ex(i, n, mod), mod);
    if (i > 0) now = mul_mod_ex(now, i, mod);
  }
  // e^(-x)
  vector<int64> b = poly_exp(vector<int64>{0, mod - 1}, n + 1, mod);
  vector<int64> c = poly_mul(a, b, mod);
  c.resize(n + 1);
  return c;
}

// gf_first, gf_at is good for the case size(A) is small.
// Otherwise, A.inv(n) * B is better.

// Finds the coefficient of x^0..x^n of f such that: A*f = B
// Returns empty vector if there is no integer solution.
// O(size(A) * n)
SL vector<int64> gf_first(const vector<int64>& A, const vector<int64>& B,
                          const int64 n, const int64 mod) {
  const int sa = static_cast<int>(A.size());
  const int sb = static_cast<int>(B.size());
  PE_ASSERT(sa > 0);
  PE_ASSERT(sb > 0);

  int64 v, u;
  int has = solve_linear_equation<int64>(A[0], 1, mod, v, u);
  if (!has) return vector<int64>();

  vector<int64> result(n + 1, 0);

  // if u < mod, we have more than one solution.
  PE_ASSERT(u == mod);
  const int64 invA0 = v;
  result[0] = invA0 * B[0] % mod;

  for (int64 i = 1; i <= n; ++i) {
    int64 t = regulate_mod(i < sb ? B[i] : 0, mod);
    for (int64 j = 1; j <= min<int64>(i, sa - 1); ++j) {
      t = sub_mod(t, (j < sa ? A[j] : 0) * result[i - j] % mod, mod);
    }
    result[i] = invA0 * t % mod;
  }

  return result;
}

// gf_first, gf_at is good for the case size(A) is small.
// Otherwise, A.inv(n) * B is better.

// Finds the coefficient of x^0..x^n of f such that: A*f = B
// Returns empty vector if there is no integer solution.
// O(size(A) * n)
SL vector<int64> gf_first(const NModPoly& A, const NModPoly& B, const int64 n) {
  return gf_first(A.data, B.data, n, A.mod);
}

// Finds the coefficient of x^n of f such that: A*f = B
// Returns -1 if there is no integer solution.
// O(size(A)^3 * log n) for big n
SL int64 gf_at(const vector<int64>& A, const vector<int64>& B, const int64 n,
               const int64 mod) {
  const int sa = static_cast<int>(A.size());
  const int sb = static_cast<int>(B.size());
  PE_ASSERT(sa > 0);
  PE_ASSERT(sb > 0);

  int64 v, u;
  int has = solve_linear_equation<int64>(A[0], 1, mod, v, u);
  if (!has) return -1;

  const int64 m = min(static_cast<int64>(max(sa - 1, sb - 1)), n);
  vector<int64> result(m + 1, 0);

  // if u < mod, we have more than one solution.
  PE_ASSERT(u == mod);
  const int64 invA0 = v;
  result[0] = invA0 * B[0] % mod;

  for (int i = 1; i <= m; ++i) {
    int64 t = regulate_mod(i < sb ? B[i] : 0, mod);
    for (int j = 1; j <= min(i, sa - 1); ++j) {
      t = sub_mod(t, (j < sa ? A[j] : 0) * result[i - j] % mod, mod);
    }
    result[i] = invA0 * t % mod;
  }

  if (m == n) {
    return result[m];
  }

  const int64 D = sa - 1;
  const int64 size = D * D;
  string data(size * sizeof(int64) * 3, '\0');
  auto* buffer = (int64*)data.c_str();

  int64* mat = buffer;
  int64* res = mat + size;
  int64* tmp = res + size;

  for (int i = 0; i < D; ++i) {
    mat[i] = invA0 * regulate_mod(i + 1 < sa ? -A[i + 1] : 0, mod) % mod;
  }
  for (int i = 1; i < D; ++i) {
    (mat + i * D)[i - 1] = 1;
  }
  for (int i = 0; i < D; ++i) {
    res[i] = result[m - i];
  }

  for (int64 t = n - m; t > 0; t >>= 1) {
    if (t & 1) {
      mat_mul_vec_mod(mat, res, tmp, mod, static_cast<int>(D));
      swap(res, tmp);
    }
    if (t > 1) {
      mat_mul_mat_mod(mat, mat, tmp, mod, static_cast<int>(D));
      swap(mat, tmp);
    }
  }
  return res[0];
}

// Finds the coefficient of x^n of f such that: A*f = B
// Returns -1 if there is no integer solution.
// O(size(A)^3 * log n) for big n
SL int64 gf_at(const NModPoly& A, const NModPoly& B, const int64 n) {
  return gf_at(A.data, B.data, n, A.mod);
}

// Berlekamp Massey
// This implementation requires that s[0] has contribution to the
// sequence. i.e. result[0] != 0
SL NModPoly find_minimal_poly_a(const NModPoly& s) {
  const int m = static_cast<int>(s.data.size());
  const int n = m >> 1;
  const int64 mod = s.mod;
  PE_ASSERT(n * 2 == m);

  NModPoly r0{{1}, mod};
  r0 = r0 << m;
  NModPoly r1(s);
  NModPoly v0{{0}, mod};
  NModPoly v1{{1}, mod};

  while (n + 1 <= r1.size()) {
    NModPoly q, r;
    tie(q, r) = poly_div_and_mod(r0, r1);
    NModPoly v(v0 - q * v1);
    v0 = std::move(v1);
    v1 = std::move(v);
    r0 = std::move(r1);
    r1 = std::move(r);
  }
  v1 = std::move(inv_of(v1[0], mod) * v1);
  reverse(v1.data.begin(), v1.data.end());
  return v1;
}

// This implementation can handle the case that s[0] has no contribution to the
// sequence. i.e. result[0] == 0
SL NModPoly find_minimal_poly(const NModPoly& s) {
  const int m = static_cast<int>(s.data.size());
  const int n = m >> 1;
  const int64 mod = s.mod;
  PE_ASSERT(n * 2 == m);

  NModPoly r0{{1}, mod};
  r0 = r0 << m;
  NModPoly r1(s);
  reverse(r1.data.begin(), r1.data.end());
  adjust_poly_leading_zero(r1.data);
  NModPoly v0{{0}, mod};
  NModPoly v1{{1}, mod};

  while (n + 1 <= r1.size()) {
    NModPoly q, r;
    tie(q, r) = poly_div_and_mod(r0, r1);
    NModPoly v(v0 - q * v1);
    v0 = std::move(v1);
    v1 = std::move(v);
    r0 = std::move(r1);
    r1 = std::move(r);
  }
  return std::move(inv_of(v1.data.back(), mod) * v1);
}

SL int64 nth_element(const NModPoly& s, int64 n, const NModPoly& min_poly) {
  if (n <= s.deg()) {
    return s[static_cast<int>(n)];
  }

  auto r = n % min_poly;
  const int64 m = r.deg();
  int64 ans = 0;
  for (int64 i = 0; i <= m; ++i) {
    ans = add_mod(ans, s[i] * r[i] % s.mod, s.mod);
  }
  return ans;
}

SL NModPoly find_linear_recurrence(const NModPoly& s, int min_use = 2) {
  const int len = static_cast<int>(s.data.size());
  for (int n = (max(min_use, 2) + 1) / 2 * 2; n < len; n += 2) {
    auto use = s.lowerTerms(n, 0);
    auto min_poly = find_minimal_poly(use);
    int ok = 1;
    for (int i = n; i < len; ++i) {
      auto value = nth_element(use, i, min_poly);
      if (value != s[i]) {
        ok = 0;
        break;
      }
    }
    if (ok) {
      return min_poly;
    }
  }
  return NModPoly();
}

SL int64 nth_element(const NModPoly& s, int64 n, int min_use = 2) {
  if (n <= s.deg()) {
    return s[static_cast<int>(n)];
  }

  auto min_poly = find_linear_recurrence(s, min_use);
  if (min_poly.deg() > 0) {
    return nth_element(s, n, min_poly);
  }
  return -1;
}

SL int64 nth_element(const vector<int64>& s, const int64 mod, int64 n,
                     int min_use = 2) {
  if (n < static_cast<int>(s.size())) {
    return s[static_cast<int>(n)];
  }

  NModPoly p(s, mod);

  auto min_poly = find_linear_recurrence(p, min_use);
  if (min_poly.deg() > 0) {
    return nth_element(p, n, min_poly);
  }
  return -1;
}

// given init = {a0,a1,a2,...}
// with recurrence a[i] = a[i-1] * rec[0] + a[i-2] * rec[1] ...
// returns a[n]
SL int64 linear_recurrence(const vector<int64>& rec, const vector<int64>& init,
                           const int64 mod, int64 n) {
  if (n < static_cast<int>(init.size())) {
    return init[static_cast<int>(n)];
  }

  PE_ASSERT(init.size() >= rec.size());

  const int m = static_cast<int>(rec.size());
  vector<int64> data(m + 1, 0);
  for (int i = 0; i < m; ++i) data[m - 1 - i] = regulate_mod(-rec[i], mod);
  data[m] = 1;
  return nth_element(NModPoly(init, mod), n, NModPoly(std::move(data), mod));
}

// given init = {a0,a1,a2,...}
// with recurrence a[i] = a[i-1] * rec[0] + a[i-2] * rec[1] ...
// returns a[0] + a[1] + a[2] + a3 + ... + a[n]
SL int64 linear_recurrence_sum(const vector<int64>& rec,
                               const vector<int64>& init, const int64 mod,
                               int64 n) {
  if (n < static_cast<int>(init.size())) {
    int64 ret = 0;
    for (int i = 0; i <= n; ++i) {
      ret = add_mod(ret, init[i], mod);
    }
    return ret;
  }

  PE_ASSERT(init.size() >= rec.size());

  const int m = static_cast<int>(rec.size());
  auto each = init;
  vector<int64> sum(2 * (m + 2), 0);
  sum[0] = each[0];
  for (int i = 1; i < 2 * m + 4; ++i) {
    if (i < m) {
      sum[i] = add_mod(sum[i - 1], each[i], mod);
    } else {
      int64 t = 0;
      for (int j = 0; j < m; ++j) {
        if (rec[j]) {
          t = add_mod(t, mul_mod_ex(each[i - j - 1], rec[j], mod), mod);
        }
      }
      each.push_back(t);
      sum[i] = add_mod(sum[i - 1], t, mod);
    }
  }
  return nth_element(sum, mod, n);
}
#endif
