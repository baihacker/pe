#ifndef PE_VECTOR_
#define PE_VECTOR_

#include "pe_base"

namespace pe {

template <typename T>
SL std::vector<T> VectorAdd(const std::vector<T>& a, const std::vector<T>& b) {
  std::vector<T> c(a.size());
  for (int i = 0; i < a.size(); ++i) c[i] = a[i] + b[i];
  return c;
}

template <typename T>
SL std::vector<T> VectorSub(const std::vector<T>& a, const std::vector<T>& b) {
  std::vector<T> c(a.size());
  for (int i = 0; i < a.size(); ++i) c[i] = a[i] - b[i];
  return c;
}

template <typename T>
SL std::vector<T> VectorScale(T t, const std::vector<T>& b) {
  std::vector<T> c(b.size());
  for (int i = 0; i < b.size(); ++i) c[i] = t * b[i];
  return c;
}

template <typename T>
SL std::vector<T> VectorScale(const std::vector<T>& b, T t) {
  std::vector<T> c(b.size());
  for (int i = 0; i < b.size(); ++i) c[i] = t * b[i];
  return c;
}

template <typename T>
SL T VectorDotProduct(const std::vector<T>& a, const std::vector<T>& b) {
  T ret = 0;
  for (int i = 0; i < a.size(); ++i) ret += a[i] * b[i];
  return ret;
}
}  // namespace pe
#endif