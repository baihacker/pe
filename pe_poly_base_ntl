#ifndef PE_POLY_BASE_NTL_
#define PE_POLY_BASE_NTL_

#if ENABLE_NTL

#include "pe_poly_base_common"

#define HAS_POLY_NTL 1
#define HAS_POLY_MUL_NTL 1

namespace poly_ntl {
template <typename T>
SL void init_nmod_poly(NTL::ZZ_pX& p, const T* x, int64 n, int64 mod) {
  NTL::ZZ tmp(0);
  p.SetLength(n);
  if (mod >> 32) {
    for (int64 i = 0; i < n; ++i) {
      ZZFromBytes(tmp, (const unsigned char*)&x[i], sizeof(T));
      p[i] = to_ZZ_p(tmp);
    }
  } else {
    for (int64 i = 0; i < n; ++i) {
      p[i] = x[i];
    }
  }
}

template <typename T>
SL void copy_nmod_poly(NTL::ZZ_pX& p, T* x, int64 n, int64 mod) {
  const int64 d = deg(p);
  const int64 m = min(d, n - 1);
  if (mod >> 32) {
    for (int64 i = 0; i <= m; ++i) {
      T a;
      BytesFromZZ((unsigned char*)&a, (NTL::ZZ&)p[i], sizeof(T));
      x[i] = a;
    }
  } else {
    for (int64 i = 0; i <= m; ++i) {
      x[i] = static_cast<T>(to_int((NTL::ZZ&)p[i]));
    }
  }
  for (int64 i = m + 1; i < n; ++i) {
    x[i] = 0;
  }
}

template <typename T>
SL void init_nmod_poly(NTL::zz_pX& p, const T* x, int64 n, long /*mod*/) {
  p.SetLength(n);
  for (int64 i = 0; i < n; ++i) {
    p[i]._zz_p__rep = static_cast<long>(x[i]);
  }
}

template <typename T>
SL void copy_nmod_poly(NTL::zz_pX& p, T* x, int64 n, long /*mod*/) {
  const int64 d = deg(p);
  const int64 m = min(d, n - 1);
  for (int64 i = 0; i <= m; ++i) {
    x[i] = p[i]._zz_p__rep;
  }
  for (int64 i = m + 1; i < n; ++i) {
    x[i] = 0;
  }
}

template <typename T>
SL void poly_mul_small_mod_internal(const T* X, int64 n, const T* Y, int64 m,
                                    T* result, int64 mod) {
  NTL::zz_p::init(static_cast<long>(mod));

  NTL::zz_pX x, y, z;
  init_nmod_poly(x, X, n, static_cast<long>(mod));
  init_nmod_poly(y, Y, m, static_cast<long>(mod));

  NTL::mul(z, x, y);

  copy_nmod_poly(z, result, n + m - 1, static_cast<long>(mod));
}

template <typename T>
SL void poly_mul_large_mod_internal(const T* X, int64 n, const T* Y, int64 m,
                                    T* result, int64 mod) {
  NTL::ZZ tmp(0);
  ZZFromBytes(tmp, reinterpret_cast<const unsigned char*>(&mod), sizeof(T));
  NTL::ZZ_p::init(tmp);

  NTL::ZZ_pX x, y, z;
  init_nmod_poly(x, X, n, mod);
  init_nmod_poly(y, Y, m, mod);

  NTL::mul(z, x, y);

  copy_nmod_poly(z, result, n + m - 1, mod);
}

template <typename T>
SL void poly_mul_internal(const T* X, int64 n, const T* Y, int64 m, T* result,
                          int64 mod) {
  if (mod < NTL_SP_BOUND) {
    poly_mul_small_mod_internal(X, n, Y, m, result, mod);
  } else {
    poly_mul_large_mod_internal(X, n, Y, m, result, mod);
  }
}

POLY_MUL_IMPL(poly_mul_small_mod, poly_ntl::poly_mul_small_mod_internal)
POLY_MUL_IMPL(poly_mul_large_mod, poly_ntl::poly_mul_large_mod_internal)
POLY_MUL_IMPL(poly_mul, poly_ntl::poly_mul_internal)

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    poly_div_and_mod_small_mod_internal(const T* X, int64 n, const T* Y,
                                        int64 m, T* q, T* r, int64 mod) {
  if (m > n) {
    if (r) {
      copy(X, X + n, r);
      fill(r + n, r + m, 0);
    }
    if (q) {
      q[0] = 0;
    }
    return;
  }

  NTL::zz_p::init(static_cast<long>(mod));

  NTL::zz_pX x, y;
  init_nmod_poly(x, X, n, mod);
  init_nmod_poly(y, Y, m, mod);

  if (q && r) {
    NTL::zz_pX u, v;

    NTL::DivRem(u, v, x, y);

    copy_nmod_poly(u, q, n - m + 1, mod);
    copy_nmod_poly(v, r, m, mod);
  } else if (q) {
    NTL::zz_pX u;

    NTL::div(u, x, y);

    copy_nmod_poly(u, q, n - m + 1, mod);
  } else if (r) {
    NTL::zz_pX v;

    NTL::rem(v, x, y);
    copy_nmod_poly(v, r, m, mod);
  }
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    poly_div_and_mod_large_mod_internal(const T* X, int64 n, const T* Y,
                                        int64 m, T* q, T* r, int64 mod) {
  if (m > n) {
    if (r) {
      copy(X, X + n, r);
      fill(r + n, r + m, 0);
    }
    if (q) {
      q[0] = 0;
    }
    return;
  }

  NTL::ZZ tmp(0);
  ZZFromBytes(tmp, reinterpret_cast<const unsigned char*>(&mod), sizeof(T));
  NTL::ZZ_p::init(tmp);

  NTL::ZZ_pX x, y;
  init_nmod_poly(x, X, n, mod);
  init_nmod_poly(y, Y, m, mod);

  if (q && r) {
    NTL::ZZ_pX u, v;

    NTL::DivRem(u, v, x, y);

    copy_nmod_poly(u, q, n - m + 1, mod);
    copy_nmod_poly(v, r, m, mod);
  } else if (q) {
    NTL::ZZ_pX u;

    NTL::div(u, x, y);

    copy_nmod_poly(u, q, n - m + 1, mod);
  } else if (r) {
    NTL::ZZ_pX v;

    NTL::rem(v, x, y);
    copy_nmod_poly(v, r, m, mod);
  }
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    poly_div_and_mod_internal(const T* X, int64 n, const T* Y, int64 m, T* q,
                              T* r, int64 mod) {
  if (mod < NTL_SP_BOUND) {
    poly_div_and_mod_small_mod_internal<T>(X, n, Y, m, q, r, mod);
  } else {
    poly_div_and_mod_large_mod_internal<T>(X, n, Y, m, q, r, mod);
  }
}

POLY_DIV_AND_MOD_IMPL(poly_div_and_mod_small_mod,
                      poly_ntl::poly_div_and_mod_small_mod_internal)
POLY_DIV_IMPL(poly_div_small_mod, poly_ntl::poly_div_and_mod_small_mod)
POLY_MOD_IMPL(poly_mod_small_mod, poly_ntl::poly_div_and_mod_small_mod)

POLY_DIV_AND_MOD_IMPL(poly_div_and_mod_large_mod,
                      poly_ntl::poly_div_and_mod_large_mod_internal)
POLY_DIV_IMPL(poly_div_large_mod, poly_ntl::poly_div_and_mod_large_mod)
POLY_MOD_IMPL(poly_mod_large_mod, poly_ntl::poly_div_and_mod_large_mod)

POLY_DIV_AND_MOD_IMPL(poly_div_and_mod, poly_ntl::poly_div_and_mod_internal)
POLY_DIV_IMPL(poly_div, poly_ntl::poly_div_and_mod)
POLY_MOD_IMPL(poly_mod, poly_ntl::poly_div_and_mod)
}  // namespace poly_ntl
#else
#define HAS_POLY_NTL 0
#define HAS_POLY_MUL_NTL 0
#endif

#endif
