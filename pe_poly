#ifndef PE_POLY_
#define PE_POLY_

#include "pe_base"
#include "pe_int128"
#include "pe_mod"
#include "pe_type_traits"
#include "pe_nt"
#include "pe_poly_base"

struct NModPoly {
  int64 mod;
  std::vector<int64> data;

  NModPoly(int64 mod = 1) : mod(mod) {}

  NModPoly(const std::vector<int64>& data, int64 mod, int adjustLeadingZero = 1)
      : data(data), mod(mod) {
    adjust_mod();
    if (adjustLeadingZero) {
      adjust_leading_zeros();
    }
  }

  NModPoly(std::vector<int64>&& data, int64 mod, int adjustLeadingZero = 1)
      : data(std::move(data)), mod(mod) {
    adjust_mod();
    if (adjustLeadingZero) {
      adjust_leading_zeros();
    }
  }

  NModPoly& operator=(const vector<int64>& v) {
    data = v;
    return *this;
  }

  NModPoly& operator=(const vector<int64>&& v) {
    data = v;
    return *this;
  }

  NModPoly(const NModPoly& p) = default;
  NModPoly(NModPoly&& p) = default;
  NModPoly& operator=(const NModPoly& other) = default;
  NModPoly& operator=(NModPoly&& other) = default;

  NModPoly& adjust_leading_zeros() {
    adjust_poly_leading_zero(data);
    return *this;
  }

  NModPoly& adjust_mod() {
    for (auto& iter : data) {
      iter = regulate_mod(iter, mod);
    }
    return *this;
  }

  int deg() const { return static_cast<int>(data.size() - 1); }
  int size() const { return static_cast<int>(data.size()); }

  NModPoly& resize(int n) {
    const int m = static_cast<int>(data.size());
    data.resize(n);
    for (int i = m; i < n; ++i) {
      data[i] = 0;
    }
    return *this;
  }

  NModPoly& redeg(int n) { return resize(n + 1); }

  int64& operator[](int idx) {
    PE_ASSERT(idx >= 0 && idx < data.size());
    return data[idx];
  }

  int64 operator[](int idx) const {
    PE_ASSERT(idx >= 0 && idx < data.size());
    return data[idx];
  }

  int64 at(int idx) const {
    return idx >= 0 && idx < data.size() ? data[idx] : 0;
  }

  bool isZero() const { return data.size() == 1 && data[0] == 0; }

  int64 valueAt(int64 v) const {
    int64 ret = 0;
    for (int i = deg(); i >= 0; --i) {
      ret = ret * v % mod + data[i];
      if (ret >= mod) ret -= mod;
    }
    return ret;
  }

  NModPoly lowerTerms(int n, int adjustLeadingZero = 1) const {
    const int m = min(n, static_cast<int>(data.size()));
    return NModPoly(std::vector<int64>(data.begin(), data.begin() + m), mod,
                    adjustLeadingZero);
  }

  NModPoly inv(int n) const;
};

template <int64 M>
struct NModPolyT : public NModPoly {
  NModPolyT() : NModPoly(M) {}

  NModPolyT(const std::vector<int64>& data) : NModPoly(data, M) {}

  NModPolyT(std::vector<int64>&& data) : NModPoly(std::move(data), M) {}

  NModPolyT(std::initializer_list<int64> l)
      : NModPolyT(std::vector<int64>(l)) {}
};

SL NModPoly poly_mul(const NModPoly& X, const NModPoly& Y) {
  return NModPoly{poly_mul(X.data, Y.data, X.mod), X.mod};
}

SL NModPoly poly_inv(const NModPoly& x, int n) {
  // It is assumed that mod is a prime
  return NModPoly(poly_inv(x.data, n, x.mod), x.mod);
}

SL tuple<NModPoly, NModPoly> poly_div_and_mod(const NModPoly& x,
                                              const NModPoly& y) {
  vector<int64> q, r;
  tie(q, r) = poly_div_and_mod(x.data, y.data, x.mod);
  return make_tuple(NModPoly(std::move(q), x.mod),
                    NModPoly(std::move(r), x.mod));
}

#define PPOLY_DIV_AND_MOD_IMPL(poly_div_and_mod, poly_div_and_mod_internal) \
  SL tuple<NModPoly, NModPoly> poly_div_and_mod(const NModPoly& X,          \
                                                const NModPoly& Y) {        \
    vector<int64> q, r;                                                     \
    tie(q, r) = poly_div_and_mod(X.data, Y.data, X.mod);                    \
    return make_tuple(NModPoly(std::move(q), X.mod),                        \
                      NModPoly(std::move(r), X.mod));                       \
  }

#define PPOLY_DIV_IMPL(poly_div, poly_div_and_mod)             \
  SL NModPoly poly_div(const NModPoly& X, const NModPoly& Y) { \
    return NModPoly(poly_div(X.data, Y.data, X.mod), X.mod);   \
  }

#define PPOLY_MOD_IMPL(poly_mod, poly_div_and_mod)             \
  SL NModPoly poly_mod(const NModPoly& X, const NModPoly& Y) { \
    return NModPoly(poly_mod(X.data, Y.data, X.mod), X.mod);   \
  }

PPOLY_DIV_AND_MOD_IMPL(poly_div_and_mod_dc, poly_div_and_mod_dc_internal)
PPOLY_DIV_IMPL(poly_div_dc, poly_div_and_mod_dc)
PPOLY_MOD_IMPL(poly_mod_dc, poly_div_and_mod_dc)

PPOLY_DIV_AND_MOD_IMPL(poly_div_and_mod_normal,
                       poly_div_and_mod_normal_internal)
PPOLY_DIV_IMPL(poly_div_normal, poly_div_and_mod_normal)
PPOLY_MOD_IMPL(poly_mod_normal, poly_div_and_mod_normal)

PPOLY_DIV_IMPL(poly_div, poly_div_and_mod)
PPOLY_MOD_IMPL(poly_mod, poly_div_and_mod)

inline NModPoly NModPoly::inv(int n) const {
  // It is assumed that mod is a prime
  auto t = poly_inv(data, n, mod);
  return NModPoly(std::vector<int64>(static_cast<int64*>(&t[0]),
                                     static_cast<int64*>(&t[0]) + t.size()),
                  mod);
}

NModPoly operator<<(const NModPoly& p, int m) {
  if (m == 0) {
    return p;
  }
  std::vector<int64> new_data(p.data.size() + m);
  for (int i = static_cast<int>(p.data.size()) + m - 1; i >= m; --i) {
    new_data[i] = p.data[i - m];
  }
  for (int i = 0; i < m; ++i) {
    new_data[i] = 0;
  }
  return NModPoly(std::move(new_data), p.mod);
}

SL NModPoly operator-(const NModPoly& x, const NModPoly& y) {
  return NModPoly(poly_sub(x.data, y.data, x.mod), x.mod)
      .adjust_leading_zeros();
}

SL NModPoly operator+(const NModPoly& x, const NModPoly& y) {
  return NModPoly(poly_add(x.data, y.data, x.mod), x.mod)
      .adjust_leading_zeros();
}

SL NModPoly operator*(const NModPoly& x, int64 v) {
  std::vector<int64> data(x.data);
  for (auto& iter : data) {
    iter = iter * v % x.mod;
  }
  return NModPoly(std::move(data), x.mod);
}

SL NModPoly operator*(int64 v, const NModPoly& x) { return x * v; }

SL NModPoly operator*(const NModPoly& x, const NModPoly& y) {
  return poly_mul(x, y);
}

SL NModPoly operator/(const NModPoly& x, const NModPoly& y) {
  return poly_div(x, y);
}

SL NModPoly operator%(const NModPoly& x, const NModPoly& y) {
  return poly_mod(x, y);
}

SL int operator==(const NModPoly& x, const NModPoly& y) {
  return x.mod == y.mod && x.data == y.data;
}

// x^n % mod
SL NModPoly operator%(int64 n, const NModPoly& mod) {
  NModPoly x{{0, 1}, mod.mod};
  NModPoly ret{{1}, mod.mod};
  for (; n > 0; n >>= 1) {
    if (n & 1) {
      ret = poly_mod(x * ret, mod);
    }
    if (n > 1) {
      x = poly_mod(x * x, mod);
    }
  }
  return ret;
}

SL ostream& operator<<(ostream& o, const NModPoly& p) {
  const int n = static_cast<int>(p.data.size());
  for (int i = 0; i < n - 1; ++i) {
    o << p.data[i] << ", ";
  }
  return o << p.data[n - 1];
}

#endif
