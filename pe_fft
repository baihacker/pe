#ifndef PE_FFT_
#define PE_FFT_

#include "pe_base"
#include "pe_int128"
#include "pe_mod"
#include "pe_type_traits"

namespace fft {
// http://uoj.ac/submission/49836
struct Complex {
  double x{0}, y{0};
  Complex() = default;
  Complex(const double& _x, const double& _y) : x(_x), y(_y) {}
};

SL Complex operator+(const Complex& a, const Complex& b) {
  return Complex(a.x + b.x, a.y + b.y);
}

SL Complex operator-(const Complex& a, const Complex& b) {
  return Complex(a.x - b.x, a.y - b.y);
}

SL Complex operator*(const Complex& a, const Complex& b) {
  return Complex(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

SL Complex conj(const Complex& a) { return Complex(a.x, -a.y); }

const double PI = acos(-1);
Complex* w[64];
Complex* w1[64];
int* bitrev[64];

// Init fft constants.
// By default, it requires that the result size is no more than 1 << 21.
// In another words, support two polynomials of size 1 << 20.
SL void InitFftK(int n = 22) {
  for (int j = 0; j < n; ++j) {
    const int N = 1 << j;
    if (w[j]) continue;
    w[j] = new Complex[N];
    w1[j] = new Complex[N];
    bitrev[j] = new int[N];
    for (int i = 0; i < N; ++i) {
      w[j][i] = Complex(cos(2 * PI * i / N), sin(2 * PI * i / N));
      w1[j][i] = Complex(cos(2 * PI * i / N), -sin(2 * PI * i / N));
      bitrev[j][i] = i == 0 ? 0 : bitrev[j][i >> 1] >> 1 | ((i & 1) << (j - 1));
    }
  }
}

SL void Fft(Complex* a, const int n, int f = 0) {
  int id = 0;
  while ((1 << id) != n) ++id;
  for (int i = 0; i < n; ++i) {
    if (i < bitrev[id][i]) std::swap(a[i], a[bitrev[id][i]]);
  }
  for (int i = 2, lyc = n >> 1; i <= n; i <<= 1, lyc >>= 1) {
    for (int j = 0; j < n; j += i) {
      Complex *l = a + j, *r = a + j + (i >> 1), *p = f ? w1[id] : w[id];
      const int end = i >> 1;
      for (int k = 0; k < end; ++k) {
        Complex tmp = *r * *p;
        *r = *l - tmp, *l = *l + tmp;
        ++l, ++r, p += lyc;
      }
    }
  }
  if (f) {
    const double coe = 1. / n;
    for (int i = 0; i < n; ++i) {
      a[i].x *= coe, a[i].y *= coe;
    }
  }
}

SL void PolyMulFftInternal(uint64* x, uint64* y, uint64* z, const int n,
                           int64 mod) {
  auto m = static_cast<int64>(sqrt(mod));
  while (m * m < mod) ++m;
  vector<Complex> a(n), b(n);
  vector<Complex> dfta(n), dftb(n), dftc(n), dftd(n);
  for (int i = 0; i < n; ++i) {
    a[i] = Complex(double(x[i] % m), double(x[i] / m));
  }
  for (int i = 0; i < n; ++i) {
    b[i] = Complex(double(y[i] % m), double(y[i] / m));
  }
#if ENABLE_OPENMP
#pragma omp parallel sections if (n > 5000)
#endif
  {
#if ENABLE_OPENMP
#pragma omp section
#endif
    Fft(&a[0], n);
#if ENABLE_OPENMP
#pragma omp section
#endif
    Fft(&b[0], n);
  }
  for (int i = 0; i < n; ++i) {
    int j = (n - i) & (n - 1);
    static Complex da, db, dc, dd;
    da = (a[i] + conj(a[j])) * Complex(0.5, 0);
    db = (a[i] - conj(a[j])) * Complex(0, -0.5);
    dc = (b[i] + conj(b[j])) * Complex(0.5, 0);
    dd = (b[i] - conj(b[j])) * Complex(0, -0.5);
    dfta[j] = da * dc;
    dftb[j] = da * dd;
    dftc[j] = db * dc;
    dftd[j] = db * dd;
  }
  for (int i = 0; i < n; ++i) a[i] = dfta[i] + dftb[i] * Complex(0, 1);
  for (int i = 0; i < n; ++i) b[i] = dftc[i] + dftd[i] * Complex(0, 1);
#if ENABLE_OPENMP
#pragma omp parallel sections if (n > 5000)
#endif
  {
#if ENABLE_OPENMP
#pragma omp section
#endif
    Fft(&a[0], n);
#if ENABLE_OPENMP
#pragma omp section
#endif
    Fft(&b[0], n);
  }
  for (int i = 0; i < n; ++i) {
    const uint64 da = static_cast<uint64>(a[i].x / n + 0.5) % mod;
    const uint64 db = static_cast<uint64>(a[i].y / n + 0.5) % mod;
    const uint64 dc = static_cast<uint64>(b[i].x / n + 0.5) % mod;
    const uint64 dd = static_cast<uint64>(b[i].y / n + 0.5) % mod;
    uint64 c = da, d = (db + dc) * m % mod, e = dd * m % mod * m % mod;
    z[i] = mod > 0 ? (c + d + e) % mod : c + d + e;
  }
}

SL void PolyMulFftSmallInternal(uint64* x, uint64* y, uint64* z, const int n,
                                int64 mod) {
  vector<Complex> a(n), b(n);
  for (int i = 0; i < n; ++i) a[i] = Complex(double(x[i]), 0);
  for (int i = 0; i < n; ++i) b[i] = Complex(double(y[i]), 0);
#if ENABLE_OPENMP
#pragma omp parallel sections if (n > 5000)
#endif
  {
#if ENABLE_OPENMP
#pragma omp section
#endif
    Fft(&a[0], n);
#if ENABLE_OPENMP
#pragma omp section
#endif
    Fft(&b[0], n);
  }

  for (int i = 0; i < n; ++i) {
    a[i] = a[i] * b[i];
  }

  Fft(&a[0], n, 1);
  const double coe = 1. / n;
  for (int i = 0; i < n; ++i) {
    z[i] = uint64(a[i].x + 0.01) % mod;
  }
}

#define POLY_MULL_FFT_IMPL(PolyMulFft, PolyMulFftInternal)                     \
  template <typename T>                                                        \
  SL void PolyMulFft(const T* x, const int n, const T* y, const int m,         \
                     T* result, int64 mod) {                                   \
    const int p = 1 << pe_lg(2 * (n + m - 1) - 1);                             \
                                                                               \
    vector<uint64> xx(p), yy(p), zz(p);                                        \
                                                                               \
    copy(x, x + n, &xx[0]);                                                    \
    fill(xx.begin() + n, xx.end(), 0);                                         \
                                                                               \
    copy(y, y + m, &yy[0]);                                                    \
    fill(yy.begin() + m, yy.end(), 0);                                         \
                                                                               \
    PolyMulFftInternal(&xx[0], &yy[0], &zz[0], p, mod);                        \
                                                                               \
    copy(zz.begin(), zz.begin() + n + m - 1, result);                          \
  }                                                                            \
                                                                               \
  template <typename T>                                                        \
  SL vector<T> PolyMulFft(const vector<T>& x, const vector<T>& y, int64 mod) { \
    const int n = (int)x.size();                                               \
    const int m = (int)y.size();                                               \
    vector<T> z(n + m - 1);                                                    \
                                                                               \
    PolyMulFft(&x[0], n, &y[0], m, &z[0], mod);                                \
                                                                               \
    return std::move(z);                                                       \
  }

POLY_MULL_FFT_IMPL(PolyMulFft, PolyMulFftInternal)
POLY_MULL_FFT_IMPL(PolyMulFftSmall, PolyMulFftSmallInternal)

// Test result about the limitation of each method:
//                       expr         random       limit
// PolyMulFft            mod^2*n      1e15         3.39e14
//                                    8e14         4.40e14
// PolyMulFftSmall       mod*n        7e13         2.06e11
}  // namespace fft
#endif
