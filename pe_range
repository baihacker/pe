#ifndef __PE_RANGE_H__
#define __PE_RANGE_H__

#include "pe_type_traits"
#include "pe_mod"

// range utility
namespace ru {
SL int64 mul(int64 a, int64 b) { return a * b; }

SL int64 add(int64 a, int64 b) { return a + b; }

template <int64 M>
SL int64 mul_mod(int64 a, int64 b) {
  return ::mul_mod(a, b, M);
}

template <int64 M>
SL int64 add_mod(int64 a, int64 b) {
  return ::add_mod(a, b, M);
}

SL std::function<int64(int64, int64)> mul_mod(int64 mod) {
  return [=](int64 a, int64 b) { return ::mul_mod(a, b, mod); };
}

SL std::function<int64(int64, int64)> add_mod(int64 mod) {
  return [=](int64 a, int64 b) { return ::add_mod(a, b, mod); };
}

SL void imul(int64& a, int64 b) { a *= b; }

SL void iadd(int64& a, int64 b) { a += b; }

template <int64 M>
SL void imul_mod(int64& a, int64 b) {
  a = ::mul_mod(a, b, M);
}

template <int64 M>
SL void iadd_mod(int64& a, int64 b) {
  a = ::add_mod(a, b, M);
}

SL std::function<void(int64&, int64)> imul_mod(int64 mod) {
  return [=](int64& a, int64 b) { a = ::mul_mod(a, b, mod); };
}

SL std::function<void(int64&, int64)> iadd_mod(int64 mod) {
  return [=](int64& a, int64 b) { a = ::add_mod(a, b, mod); };
}
}  // namespace ru

template <typename IT>
struct Range;

template <typename IT>
struct FilterRange;

template <typename IT>
struct MappedRange;

template <typename IT, typename DERIVED, typename IIT>
struct RangeBase {
  RangeBase(IT b, IT e) : b(b), e(e) {}

  using reference = typename IIT::reference;
  using rvalue_reference =
      typename add_rvalue_reference<const typename IIT::value_type>::type;
  using value_type = typename std::remove_cv<typename IIT::value_type>::type;

  FilterRange<IIT> filter(
      std::function<int(const typename IIT::value_type&)> filter) const {
    return FilterRange<IIT>{static_cast<const DERIVED&>(*this).begin(),
                            static_cast<const DERIVED&>(*this).end(), filter};
  }

  // Recommendation:
  // 1. Use the template version and specify the result type (VT).
  // 2. Sepecify the return type of accumulator.
  // 3. If the accumulator and the combiner are the same, specify the return
  // type of combiner.

  // Name convention
  // i: inplace reduce
  // p: parallel reduce

  // Sequential reduce
  template <typename VT = value_type>
  VT reduce(
      const VT& v,
      const std::function<VT(const VT&, rvalue_reference)>& accumulator) const {
    VT ret = v;
    auto now = static_cast<const DERIVED&>(*this).begin();
    auto x = static_cast<const DERIVED&>(*this).end();
    while (now != x) {
      ret = accumulator(ret, std::move(*now++));
    }
    return ret;
  }

  template <typename VT = value_type>
  VT ireduce(
      const VT& v,
      const std::function<void(VT&, rvalue_reference)>& accumulator) const {
    VT ret = v;
    auto now = static_cast<const DERIVED&>(*this).begin();
    auto x = static_cast<const DERIVED&>(*this).end();
    while (now != x) {
      accumulator(ret, std::move(*now++));
    }
    return ret;
  }

  value_type reduce(
      const value_type& v,
      const std::function<value_type(const value_type&, rvalue_reference)>&
          accumulator) const {
    value_type ret = v;
    auto now = static_cast<const DERIVED&>(*this).begin();
    auto x = static_cast<const DERIVED&>(*this).end();
    while (now != x) {
      ret = accumulator(ret, std::move(*now++));
    }
    return ret;
  }

  value_type ireduce(const value_type& v,
                     const std::function<void(value_type&, rvalue_reference)>&
                         accumulator) const {
    value_type ret = v;
    auto now = static_cast<const DERIVED&>(*this).begin();
    auto x = static_cast<const DERIVED&>(*this).end();
    while (now != x) {
      accumulator(ret, std::move(*now++));
    }
    return ret;
  }

  // Parallel reduce
  template <typename VT>
  VT preduce(const VT& v,
             const std::function<VT(const VT&, rvalue_reference)>& accumulator,
             const std::function<VT(const VT&, const VT&)>& combiner,
             const int thread_number = 8) const {
#if ENABLE_OPENMP
    auto data = toVector();
    const int size = sz(data);
    if (size == 0) {
      return v;
    }

    vector<VT> tmp(thread_number, v);
#pragma omp parallel for schedule(dynamic) num_threads(thread_number)
    for (int i = 0; i < size; ++i) {
      const auto tid = omp_get_thread_num();
      tmp[tid] = accumulator(tmp[tid], std::move(data[i]));
    }

    VT ret = tmp[0];
    for (int i = 1; i < thread_number; ++i) {
      ret = combiner(ret, std::move(tmp[i]));
    }
    return ret;
#else
    return reduce(v, accumulator);
#endif
  }

  template <typename VT>
  VT pireduce(const VT& v,
              const std::function<void(VT&, rvalue_reference)>& accumulator,
              const std::function<void(VT&, const VT&)>& combiner,
              const int thread_number = 8) const {
#if ENABLE_OPENMP
    auto data = toVector();
    const int size = sz(data);
    if (size == 0) {
      return v;
    }

    vector<VT> tmp(thread_number, v);
#pragma omp parallel for schedule(dynamic) num_threads(thread_number)
    for (int i = 0; i < size; ++i) {
      const auto tid = omp_get_thread_num();
      accumulator(tmp[tid], std::move(data[i]));
    }

    VT ret = tmp[0];
    for (int i = 1; i < thread_number; ++i) {
      combiner(ret, std::move(tmp[i]));
    }
    return ret;
#else
    return ireduce(v, accumulator);
#endif
  }

  value_type preduce(
      const value_type& v,
      const std::function<value_type(const value_type&, rvalue_reference)>&
          accumulator,
      const std::function<value_type(const value_type&, rvalue_reference)>&
          combiner,
      const int thread_number = 8) const {
#if ENABLE_OPENMP
    auto data = toVector();
    const int size = sz(data);
    if (size == 0) {
      return v;
    }

    vector<value_type> tmp(thread_number, v);
#pragma omp parallel for schedule(dynamic) num_threads(thread_number)
    for (int i = 0; i < size; ++i) {
      const auto tid = omp_get_thread_num();
      tmp[tid] = accumulator(tmp[tid], std::move(data[i]));
    }

    value_type ret = tmp[0];
    for (int i = 1; i < thread_number; ++i) {
      ret = combiner(ret, std::move(tmp[i]));
    }
    return ret;
#else
    return reduce(v, accumulator);
#endif
  }

  value_type pireduce(
      const value_type& v,
      const std::function<void(value_type&, rvalue_reference)>& accumulator,
      const std::function<void(value_type&, rvalue_reference)>& combiner,
      const int thread_number = 8) const {
#if ENABLE_OPENMP
    auto data = toVector();
    const int size = sz(data);
    if (size == 0) {
      return v;
    }

    vector<value_type> tmp(thread_number, v);
#pragma omp parallel for schedule(dynamic) num_threads(thread_number)
    for (int i = 0; i < size; ++i) {
      const auto tid = omp_get_thread_num();
      accumulator(tmp[tid], std::move(data[i]));
    }

    value_type ret = tmp[0];
    for (int i = 1; i < thread_number; ++i) {
      combiner(ret, std::move(tmp[i]));
    }
    return ret;
#else
    return ireduce(v, accumulator);
#endif
  }

#if PE_HAS_CPP14
  template <typename VT>
  VT preduce(const VT& v,
             const std::function<VT(const VT&, const VT&)>& combiner,
             const int thread_number = 8) const {
    return preduce<VT>(v, combiner, combiner, thread_number);
  }

  value_type preduce(
      const value_type& v,
      const std::function<value_type(const value_type&, const value_type&)>&
          combiner,
      const int thread_number = 8) const {
    return preduce(v, combiner, combiner, thread_number);
  }

  template <typename VT>
  VT pireduce(const VT& v, const std::function<void(VT&, const VT&)>& combiner,
              const int thread_number = 8) const {
    return pireduce<VT>(v, combiner, combiner, thread_number);
  }

  value_type pireduce(
      const value_type& v,
      const std::function<void(value_type&, const value_type&)>& combiner,
      const int thread_number = 8) const {
    return pireduce(v, combiner, combiner, thread_number);
  }
#endif

  MappedRange<IIT> map(
      std::function<typename IIT::value_type(const typename IIT::value_type&)>
          mapper) const {
    return MappedRange<IIT>{static_cast<const DERIVED&>(*this).begin(),
                            static_cast<const DERIVED&>(*this).end(), mapper};
  }

  std::vector<value_type> toVector() const {
    std::vector<value_type> ret;
    auto now = static_cast<const DERIVED&>(*this).begin();
    auto x = static_cast<const DERIVED&>(*this).end();
    while (now != x) {
      ret.emplace_back(*now++);
    }
    return ret;
  }

  std::set<value_type> toSet() const {
    std::set<value_type> ret;
    auto now = static_cast<const DERIVED&>(*this).begin();
    auto x = static_cast<const DERIVED&>(*this).end();
    while (now != x) {
      ret.insert(*now++);
    }
    return ret;
  }

  IT b;
  IT e;
};

template <typename T>
struct NumberIter {
  using reference = const T;
  using value_type = T;

  T operator*() const { return i; }

  int operator==(const NumberIter& o) const { return i == o.i; }

  int operator!=(const NumberIter& o) const { return !(this->operator==(o)); }

  NumberIter& operator++() {
    ++i;
    return *this;
  }

  NumberIter operator++(int) { return NumberIter{i++}; }

  NumberIter& operator--() {
    --i;
    return *this;
  }

  NumberIter operator--(int) { return NumberIter{i--}; }

  T i;
};

template <typename T>
struct NumberRange : public RangeBase<T, NumberRange<T>, NumberIter<T>> {
  using iterator = NumberIter<T>;
  using const_iterator = NumberIter<T>;
  using value_type = T;

  using base = RangeBase<T, NumberRange<T>, NumberIter<T>>;

  NumberRange(T b, T e) : base(b, e) {}

  NumberIter<T> begin() const { return NumberIter<T>{base::b}; }
  NumberIter<T> end() const { return NumberIter<T>{base::e}; }
};

template <typename T>
struct NumberIterD {
  using reference = const T;
  using value_type = T;

  T operator*() const { return i; }

  int operator==(const NumberIterD& o) const { return i == o.i; }

  int operator!=(const NumberIterD& o) const { return !(this->operator==(o)); }

  NumberIterD& operator++() {
    i += delta;
    return *this;
  }

  NumberIterD operator++(int) {
    T x = i;
    i += delta;
    return NumberIterD{x};
  }

  NumberIterD& operator--() {
    i -= delta;
    return *this;
  }

  NumberIterD operator--(int) {
    T x = i;
    i -= delta;
    return NumberIterD{x};
  }

  T i;
  T e;
  T delta;
};

template <typename T>
struct NumberRangeD : public RangeBase<T, NumberRangeD<T>, NumberIter<T>> {
  using iterator = NumberIterD<T>;
  using const_iterator = NumberIterD<T>;
  using value_type = T;

  using base = RangeBase<T, NumberRangeD<T>, NumberIter<T>>;

  NumberRangeD(T b, T n, T delta) : base(b, n), n(n), delta(delta) {
    T d = abs(delta);
    T r = abs(n - b);
    T s = r / d;
    base::e = b + s * delta;
    if (r % d) {
      base::e += delta;
    }
  }

  NumberIterD<T> begin() const {
    return NumberIterD<T>{base::b, base::e, delta};
  }
  NumberIterD<T> end() const { return NumberIterD<T>{base::e, base::e, delta}; }

  T delta;
  T n;
};

template <typename T>
SL REQUIRES(is_native_integer<T>::value) RETURN(NumberRange<int64>)
    range(T s, T e) {
  PE_ASSERT(s <= e);
  return NumberRange<int64>{s, e};
}

template <typename T>
SL REQUIRES(is_native_integer<T>::value) RETURN(NumberRangeD<int64>)
    range(T s, T e, T delta) {
  if (s < e) {
    PE_ASSERT(delta > 0);
  } else if (s > e) {
    PE_ASSERT(delta < 0);
  }
  return NumberRangeD<int64>{s, e, delta};
}

template <typename IT>
struct RangeIter {
  using reference = typename IT::reference;
  using value_type = typename IT::value_type;

  reference operator*() { return *iter; }

  int operator==(const RangeIter& o) const { return iter == o.iter; }

  int operator!=(const RangeIter& o) const { return !(this->operator==(o)); }

  RangeIter& operator++() {
    ++iter;
    return *this;
  }

  RangeIter operator++(int) { return RangeIter{iter++}; }

  RangeIter& operator--() {
    --iter;
    return *this;
  }

  RangeIter operator--(int) { return RangeIter{iter--}; }

  IT iter;
};

template <typename IT>
struct Range : public RangeBase<IT, Range<IT>, RangeIter<IT>> {
  using iterator = RangeIter<IT>;
  using const_iterator = RangeIter<IT>;
  using value_type = typename iterator::value_type;

  using base = RangeBase<IT, Range<IT>, RangeIter<IT>>;

  Range(IT b, IT e) : base(b, e) {}

  RangeIter<IT> begin() const { return RangeIter<IT>{base::b}; }
  RangeIter<IT> end() const { return RangeIter<IT>{base::e}; }
};

template <typename CT>
SL auto range(CT& v) -> Range<typename CT::iterator> {
  return Range<typename CT::iterator>{v.begin(), v.end()};
}

template <typename CT>
SL auto range(const CT& v) -> Range<typename CT::const_iterator> {
  return Range<typename CT::const_iterator>{v.begin(), v.end()};
}

template <typename T>
SL REQUIRES(!is_native_integer<T>::value) RETURN(Range<T>) range(T s, T e) {
  return Range<T>{s, e};
}

template <typename IT>
struct ArrayRangeIter {
  using reference = IT&;
  using value_type = IT;

  reference operator*() { return *iter; }

  int operator==(const ArrayRangeIter& o) const { return iter == o.iter; }

  int operator!=(const ArrayRangeIter& o) const {
    return !(this->operator==(o));
  }

  ArrayRangeIter& operator++() {
    ++iter;
    return *this;
  }

  ArrayRangeIter operator++(int) { return ArrayRangeIter{iter++}; }

  ArrayRangeIter& operator--() {
    --iter;
    return *this;
  }

  ArrayRangeIter operator--(int) { return ArrayRangeIter{iter--}; }

  IT* iter;
};

template <typename IT>
struct ArrayRange : public RangeBase<IT*, ArrayRange<IT>, ArrayRangeIter<IT>> {
  using iterator = ArrayRangeIter<IT>;
  using const_iterator = ArrayRangeIter<IT>;
  using value_type = typename iterator::value_type;

  using base = RangeBase<IT*, ArrayRange<IT>, ArrayRangeIter<IT>>;

  ArrayRange(IT* b, IT* e) : base(b, e) {}

  ArrayRangeIter<IT> begin() const { return ArrayRangeIter<IT>{base::b}; }
  ArrayRangeIter<IT> end() const { return ArrayRangeIter<IT>{base::e}; }
};

template <typename T>
SL ArrayRange<T> range(T* s, T* e) {
  PE_ASSERT(s <= e);
  return ArrayRange<T>{s, e};
}

template <typename T>
SL ArrayRange<const T> range(const T* s, const T* e) {
  PE_ASSERT(s <= e);
  return ArrayRange<const T>{s, e};
}

template <typename T, int N>
SL ArrayRange<T> range(T (&a)[N]) {
  return ArrayRange<T>{a, a + N};
}

template <typename IT>
struct MappedRangeIter {
  using reference = typename IT::value_type;
  using value_type = typename IT::value_type;

  reference operator*() { return mapper(*iter); }

  int operator==(const MappedRangeIter& o) const { return iter == o.iter; }

  int operator!=(const MappedRangeIter& o) const {
    return !(this->operator==(o));
  }

  MappedRangeIter& operator++() {
    ++iter;
    return *this;
  }

  MappedRangeIter operator++(int) { return MappedRangeIter{iter++, mapper}; }

  MappedRangeIter& operator--() {
    --iter;
    return *this;
  }

  MappedRangeIter operator--(int) { return MappedRangeIter{iter--, mapper}; }

  IT iter;
  const std::function<value_type(const value_type& v)>& mapper;
};

template <typename IT>
struct MappedRange
    : public RangeBase<IT, MappedRange<IT>, MappedRangeIter<IT>> {
  using iterator = MappedRangeIter<IT>;
  using const_iterator = MappedRangeIter<IT>;
  using value_type = typename iterator::value_type;

  using base = RangeBase<IT, MappedRange<IT>, MappedRangeIter<IT>>;

  MappedRange(IT b, IT e,
              const std::function<typename MappedRangeIter<IT>::value_type(
                  const typename MappedRangeIter<IT>::value_type&)>& mapper)
      : base(b, e), mapper(mapper) {}

  MappedRangeIter<IT> begin() const {
    return MappedRangeIter<IT>{base::b, mapper};
  }
  MappedRangeIter<IT> end() const {
    return MappedRangeIter<IT>{base::e, mapper};
  }

  const std::function<typename MappedRangeIter<IT>::value_type(
      const typename MappedRangeIter<IT>::value_type&)>
      mapper;
};

template <typename IT>
struct FilterRangeIter {
  using reference = typename IT::reference;
  using value_type = typename IT::value_type;

  reference operator*() { return *iter; }

  int operator==(const FilterRangeIter& o) const { return iter == o.iter; }

  int operator!=(const FilterRangeIter& o) const {
    return !(this->operator==(o));
  }

  FilterRangeIter& operator++() {
    while (iter != e) {
      ++iter;
      if (iter == e) break;
      if (filter(*iter)) break;
    }
    return *this;
  }

  FilterRangeIter operator++(int) {
    IT x = iter;
    this->operator++();
    return FilterRangeIter{x, e, filter};
  }

  IT iter;
  IT e;
  const std::function<int(const typename IT::value_type&)>& filter;
};

template <typename IT>
struct FilterRange
    : public RangeBase<IT, FilterRange<IT>, FilterRangeIter<IT>> {
  using iterator = FilterRangeIter<IT>;
  using const_iterator = FilterRangeIter<IT>;
  using value_type = typename FilterRangeIter<IT>::value_type;

  using base = RangeBase<IT, FilterRange<IT>, FilterRangeIter<IT>>;

  FilterRange(
      IT b, IT e,
      const std::function<int(const typename IT::value_type&)>& filterImpl)
      : base(b, e), filterImpl(filterImpl) {}

  FilterRangeIter<IT> begin() const {
    auto now = base::b;
    while (now != base::e && !filterImpl(*now)) ++now;
    return FilterRangeIter<IT>{now, base::e, filterImpl};
  }

  FilterRangeIter<IT> end() const {
    return FilterRangeIter<IT>{base::e, base::e, filterImpl};
  }

  const std::function<int(const typename IT::value_type&)> filterImpl;
};

// irange support. i = index.
template <typename IT>
struct ContainerIterI {
  struct ContainerItemI {
    const int64 i;
    typename IT::reference v;
  };

  using reference = ContainerItemI;

  ContainerItemI operator*() { return ContainerItemI{idx, *iter}; }

  int operator==(const ContainerIterI& o) const { return iter == o.iter; }

  int operator!=(const ContainerIterI& o) const {
    return !(this->operator==(o));
  }

  ContainerIterI& operator++() {
    ++idx;
    ++iter;
    return *this;
  }

  ContainerIterI operator++(int) { return ContainerIterI{iter++, idx++}; }

  ContainerIterI& operator--() {
    --idx;
    --iter;
    return *this;
  }

  ContainerIterI operator--(int) { return ContainerIterI{iter--, idx--}; }

  IT iter;
  int64 idx;
};

template <typename IT>
struct ContainerRangeI {
  using iterator = ContainerIterI<IT>;
  using const_iterator = ContainerIterI<IT>;

  ContainerIterI<IT> begin() const { return ContainerIterI<IT>{b, 0}; }
  ContainerIterI<IT> end() const { return ContainerIterI<IT>{e, 0}; }

  IT b;
  IT e;
};

template <typename T>
struct ArrayIterI {
  struct ContainerItemI {
    const int64 i;
    T& v;
  };

  using reference = ContainerItemI;

  ContainerItemI operator*() { return ContainerItemI{idx, start[idx]}; }

  int operator==(const ArrayIterI& o) const {
    return idx == o.idx && start == o.start;
  }

  int operator!=(const ArrayIterI& o) const { return !(this->operator==(o)); }

  ArrayIterI& operator++() {
    ++idx;
    return *this;
  }

  ArrayIterI operator++(int) { return ArrayIterI{start, idx++}; }

  ArrayIterI& operator--() {
    --idx;
    return *this;
  }

  ArrayIterI operator--(int) { return ArrayIterI{start, idx--}; }

  T* start;
  int64 idx;
};

template <typename T>
struct ArrayRangeI {
  using iterator = ArrayIterI<T>;
  using const_iterator = ArrayIterI<T>;

  ArrayIterI<T> begin() const { return ArrayIterI<T>{start, 0}; }
  ArrayIterI<T> end() const { return ArrayIterI<T>{start, cnt}; }

  T* start;
  int64 cnt;
};

template <typename T>
SL ArrayRangeI<T> irange(vector<T>& v) {
  return ArrayRangeI<T>{&v[0], sz(v)};
}

template <typename T>
SL ArrayRangeI<const T> irange(const vector<T>& v) {
  return ArrayRangeI<const T>{&v[0], sz(v)};
}

template <typename T>
SL ArrayRangeI<T> irange(T* s, T* e) {
  PE_ASSERT(s <= e);
  return ArrayRangeI<T>{s, e - s};
}

template <typename T>
SL ArrayRangeI<const T> irange(const T* s, const T* e) {
  PE_ASSERT(s <= e);
  return ArrayRangeI<const T>{s, e - s};
}

template <typename T, int N>
SL ArrayRangeI<T> irange(T (&a)[N]) {
  return ArrayRangeI<T>{a, N};
}

template <typename CT>
SL auto irange(CT& v) -> ContainerRangeI<typename CT::iterator> {
  return ContainerRangeI<typename CT::iterator>{v.begin(), v.end()};
}

template <typename CT>
SL auto irange(const CT& v) -> ContainerRangeI<typename CT::const_iterator> {
  return ContainerRangeI<typename CT::const_iterator>{v.begin(), v.end()};
}
#endif