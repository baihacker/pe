#ifndef PE_POLY_BASE_FLINT_
#define PE_POLY_BASE_FLINT_

#include "pe_base"
#include "pe_type_traits"
#include "pe_poly_base_common"

#if ENABLE_FLINT && GMP_LIMB_BITS == 64

// Online documentation of flint
// http://flintlib.org/sphinx/nmod_poly.html

#define HAS_POLY_FLINT 1
#define HAS_POLY_MUL_FLINT 1

namespace pe {
namespace poly_flint {
namespace poly_flint_internal {
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    CopyNModPoly(nmod_poly_t src, T* dest, int64 destSize) {
  const auto size = static_cast<int64>(src[0].length);
  for (int64 i = 0; i < size; ++i) {
    auto v = src[0].coeffs[i];
    dest[i] = v;
  }
  for (int64 i = size; i < destSize; ++i) {
    dest[i] = 0;
  }
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    PolyMulPrimeImpl(const T* X, const int64 n, const T* Y, const int64 m,
                     T* result, int64 mod) {
  fmpz_t xmod;
  fmpz_init_set_ui(xmod, mod);

  fq_nmod_ctx_t ctx;
  fq_nmod_ctx_init(ctx, xmod, 1, "Z");

  fq_nmod_poly_t a, b;
  fq_nmod_poly_init2(a, n, ctx);
  fq_nmod_poly_init2(b, m, ctx);

  fmpz_t c;
  fmpz_init(c);
  for (int64 i = 0; i < n; ++i) {
    fmpz_set_si(c, X[i]);
    fq_nmod_poly_set_coeff_fmpz(a, i, c, ctx);
  }
  for (int64 i = 0; i < m; ++i) {
    fmpz_set_si(c, Y[i]);
    fq_nmod_poly_set_coeff_fmpz(b, i, c, ctx);
  }
  fq_nmod_poly_mul(a, a, b, ctx);

  const auto size = static_cast<int64>(a[0].length);

  for (int64 i = 0; i < size; ++i) {
    auto v = nmod_poly_get_coeff_ui(a[0].coeffs + i, 0);
    result[i] = v;
  }
  fq_nmod_poly_clear(a, ctx);
  fq_nmod_poly_clear(b, ctx);
  fq_nmod_ctx_clear(ctx);
  fmpz_clear(xmod);
  fmpz_clear(c);
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    PolyMulNModImpl(const T* X, const int64 n, const T* Y, const int64 m,
                    T* result, int64 mod) {
  nmod_poly_t a, b;
  nmod_poly_init2(a, mod, n);
  nmod_poly_init2(b, mod, m);

  for (int64 i = 0; i < n; ++i) {
    nmod_poly_set_coeff_ui(a, i, X[i]);
  }
  for (int64 i = 0; i < m; ++i) {
    nmod_poly_set_coeff_ui(b, i, Y[i]);
  }
  nmod_poly_mul(a, a, b);

  const auto size = static_cast<int64>(a[0].length);

  for (int64 i = 0; i < size; ++i) {
    auto v = a[0].coeffs[i];
    result[i] = v;
  }

  const int64 allSize = n + m - 1;
  for (int64 i = size; i < allSize; ++i) {
    result[i] = 0;
  }
  nmod_poly_clear(a);
  nmod_poly_clear(b);
}
}  // namespace poly_flint_internal

POLY_MUL_IMPL(PolyMulPrime, poly_flint_internal::PolyMulPrimeImpl)
POLY_MUL_IMPL(PolyMulNMod, poly_flint_internal::PolyMulNModImpl)
POLY_MUL_IMPL(PolyMul, poly_flint_internal::PolyMulNModImpl)

namespace poly_flint_internal {
// size result >= n
#if 0
// This implementation is for general mod polynomial
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    PolyInvImpl(const T* x, int64 m, int64 n, T* result, int64 mod) {
  if (n == 1) {
    result[0] = InvOf(x[0], mod);
    return;
  }
  nmod_poly_t u, v, w;
  nmod_poly_init2(u, mod, m);
  for (int64 i = 0; i < m; ++i) {
    nmod_poly_set_coeff_ui(u, i, x[i]);
  }

  nmod_poly_init2(w, mod, n + 1);
  nmod_poly_set_coeff_ui(w, n, 1);

  nmod_poly_init2(v, mod, n);

  nmod_poly_invmod(v, u, w);
  for (int64 i = 0; i < n; ++i) {
    result[i] = nmod_poly_get_coeff_ui(v, i);
  }

  nmod_poly_clear(u);
  nmod_poly_clear(v);
  nmod_poly_clear(w);
}
#else
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    PolyInvImpl(const T* x, int64 m, int64 n, T* result, int64 mod) {
  if (n == 1) {
    result[0] = InvOf(x[0], mod);
    return;
  }
  nmod_poly_t u, v;
  nmod_poly_init2(u, mod, m);
  for (int64 i = 0; i < m; ++i) {
    nmod_poly_set_coeff_ui(u, i, x[i]);
  }

  nmod_poly_init2(v, mod, n + 1);

  nmod_poly_inv_series(v, u, n);
  for (int64 i = 0; i < n; ++i) {
    result[i] = nmod_poly_get_coeff_ui(v, i);
  }

  nmod_poly_clear(u);
  nmod_poly_clear(v);
}
#endif
}  // namespace poly_flint_internal

// size result >= n
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    PolyInv(const T* x, int64 m, int64 n, T* result, int64 mod) {
  using unsignedT = typename pe_make_unsigned<T>::type;
  poly_flint_internal::PolyInvImpl<unsignedT>(
      reinterpret_cast<const unsignedT*>(x), m, n,
      reinterpret_cast<unsignedT*>(result), mod);
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(std::vector<T>)
    PolyInv(const std::vector<T>& x, int64 n, int64 mod) {
  // It is assumed that mod is a prime
  const auto m = static_cast<int64>(x.size());

  // b
  std::vector<T> b(n);

  PolyInv(&x[0], m, n, &b[0], mod);

  return b;
}

namespace poly_flint_internal {
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    PolyDivAndModImpl(const T* X, int64 n, const T* Y, int64 m, T* q, T* r,
                      int64 mod) {
  static_assert(pe_is_unsigned<T>::value, "T must be unsigned");

  if (m > n) {
    if (r) {
      std::copy(X, X + n, r);
      std::fill(r + n, r + m, 0);
    }
    if (q) {
      q[0] = 0;
    }
    return;
  }

  nmod_poly_t a, b;
  nmod_poly_init2(a, mod, n);
  nmod_poly_init2(b, mod, m);

  for (int64 i = 0; i < n; ++i) {
    nmod_poly_set_coeff_ui(a, i, X[i]);
  }
  for (int64 i = 0; i < m; ++i) {
    nmod_poly_set_coeff_ui(b, i, Y[i]);
  }

  if (q && r) {
    nmod_poly_t u, v;
    nmod_poly_init(u, mod);
    nmod_poly_init(v, mod);

    nmod_poly_divrem(u, v, a, b);

    CopyNModPoly(u, q, n - m + 1);
    CopyNModPoly(v, r, m);

    nmod_poly_clear(u);
    nmod_poly_clear(v);
  } else if (q) {
    nmod_poly_t u;
    nmod_poly_init(u, mod);

    nmod_poly_div(u, a, b);

    CopyNModPoly(u, q, n - m + 1);
    nmod_poly_clear(u);
  } else if (r) {
    nmod_poly_t v;
    nmod_poly_init(v, mod);

    nmod_poly_rem(v, a, b);

    CopyNModPoly(v, r, m);
    nmod_poly_clear(v);
  }

  nmod_poly_clear(a);
  nmod_poly_clear(b);
}
}  // namespace poly_flint_internal

POLY_DIV_AND_MOD_IMPL(PolyDivAndMod, poly_flint_internal::PolyDivAndModImpl)
POLY_DIV_IMPL(PolyDiv, PolyDivAndMod)
POLY_MOD_IMPL(PolyMod, PolyDivAndMod)

// More function can be found here:
// http://flintlib.org/sphinx/nmod_poly.html#transcendental-functions
extern "C" {
using nmod_poly_series_t = void (*)(nmod_poly_struct*, const nmod_poly_struct*,
                                    mp_limb_signed_t);
}

namespace poly_flint_internal {
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    PolySeriesImpl(const T* x, int64 m, int64 n, T* result, int64 mod,
                   nmod_poly_series_t trans) {
  nmod_poly_t u, v;
  nmod_poly_init2(u, mod, m);
  for (int64 i = 0; i < m; ++i) {
    nmod_poly_set_coeff_ui(u, i, x[i]);
  }

  nmod_poly_init2(v, mod, n);
  trans(v, u, n);
  for (int64 i = 0; i < n; ++i) {
    result[i] = nmod_poly_get_coeff_ui(v, i);
  }

  nmod_poly_clear(u);
  nmod_poly_clear(v);
}
}  // namespace poly_flint_internal

// size result == n
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    PolySeries(const T* x, int64 m, int64 n, T* result, int64 mod,
               nmod_poly_series_t trans) {
  using unsignedT = typename pe_make_unsigned<T>::type;
  poly_flint_internal::PolySeriesImpl<unsignedT>(
      reinterpret_cast<const unsignedT*>(x), m, n,
      reinterpret_cast<unsignedT*>(result), mod, trans);
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(std::vector<T>)
    PolySeries(const std::vector<T>& x, int64 n, int64 mod,
               nmod_poly_series_t trans) {
  // It is assumed that mod is a prime
  const auto m = static_cast<int64>(x.size());

  // b
  std::vector<T> b(n);

  PolySeries(&x[0], m, n, &b[0], mod, trans);

  return b;
}

namespace poly_flint_internal {
// size result == n
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    PolyLogImpl(const T* x, int64 m, int64 n, T* result, int64 mod) {
  PolySeries(x, m, n, result, mod, &nmod_poly_log_series);
}
}  // namespace poly_flint_internal

// size result == n
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    PolyLog(const T* x, int64 m, int64 n, T* result, int64 mod) {
  using unsignedT = typename pe_make_unsigned<T>::type;
  poly_flint_internal::PolyLogImpl<unsignedT>(
      reinterpret_cast<const unsignedT*>(x), m, n,
      reinterpret_cast<unsignedT*>(result), mod);
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(std::vector<T>)
    PolyLog(const std::vector<T>& x, int64 n, int64 mod) {
  // It is assumed that mod is a prime
  const auto m = static_cast<int64>(x.size());

  // b
  std::vector<T> b(n);

  PolyLog(&x[0], m, n, &b[0], mod);

  return b;
}

namespace poly_flint_internal {
// size result == n
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    PolyExpImpl(const T* x, int64 m, int64 n, T* result, int64 mod) {
  PE_ASSERT(x[0] == 0);
  PolySeries(x, m, n, result, mod, &nmod_poly_exp_series);
}
}  // namespace poly_flint_internal

// size result == n
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    PolyExp(const T* x, int64 m, int64 n, T* result, int64 mod) {
  using unsignedT = typename pe_make_unsigned<T>::type;
  poly_flint_internal::PolyExpImpl<unsignedT>(
      reinterpret_cast<const unsignedT*>(x), m, n,
      reinterpret_cast<unsignedT*>(result), mod);
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(std::vector<T>)
    PolyExp(const std::vector<T>& x, int64 n, int64 mod) {
  // It is assumed that mod is a prime
  const auto m = static_cast<int64>(x.size());

  // b
  std::vector<T> b(n);

  PolyExp(&x[0], m, n, &b[0], mod);

  return b;
}

namespace poly_flint_internal {
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    PolyMultipointEvaluateImpl(const T* X, int64 n, const T* V, const int64 m,
                               T* result, int64 mod) {
  nmod_poly_t u;
  nmod_poly_init2(u, mod, n);
  for (int64 i = 0; i < n; ++i) {
    nmod_poly_set_coeff_ui(u, i, X[i]);
  }

  if (sizeof(mp_limb_t) == sizeof(T)) {
    nmod_poly_evaluate_nmod_vec_fast(result, u, V, m);
  } else {
    std::vector<mp_limb_t> x(m), y(m);
    for (int64 i = 0; i < m; ++i) x[i] = V[i];
    nmod_poly_evaluate_nmod_vec_fast(&y[0], u, &x[0], m);
    for (int64 i = 0; i < m; ++i) result[i] = y[i];
  }
  nmod_poly_clear(u);
}
}  // namespace poly_flint_internal

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    PolyMultipointEvaluate(const T* X, const int64 n, const T* V, const int64 m,
                           T* result, int64 mod) {
  using unsignedT = typename pe_make_unsigned<T>::type;
  poly_flint_internal::PolyMultipointEvaluateImpl<unsignedT>(
      reinterpret_cast<const unsignedT*>(X), n,
      reinterpret_cast<const unsignedT*>(V), m,
      reinterpret_cast<unsignedT*>(result), mod);
}

// size(V) = n
template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(void)
    PolyMultipointEvaluate(const T* X, const int64 n, const T* V, T* result,
                           int64 mod) {
  using unsignedT = typename pe_make_unsigned<T>::type;
  poly_flint_internal::PolyMultipointEvaluateImpl<unsignedT>(
      reinterpret_cast<const unsignedT*>(X), n,
      reinterpret_cast<const unsignedT*>(V), n, static_cast<unsignedT*>(result),
      mod);
}

template <typename T>
SL REQUIRES((is_native_integer<T>::value)) RETURN(std::vector<T>)
    PolyMultipointEvaluate(const std::vector<T>& X, const std::vector<T>& V,
                           int64 mod) {
  const auto n = static_cast<int64>(X.size());
  const auto m = static_cast<int64>(V.size());
  std::vector<T> result(m);
  PolyMultipointEvaluate(&X[0], n, &V[0], m, &result[0], mod);
  return result;
}
}  // namespace poly_flint
}  // namespace pe
#else
#define HAS_POLY_FLINT 0
#define HAS_POLY_MUL_FLINT 0
#endif

#endif
